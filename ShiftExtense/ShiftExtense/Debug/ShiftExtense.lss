
ShiftExtense.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000354  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00800060  00000354  000003e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  008001a2  008001a2  0000052a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000052c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000c80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000082f  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002b5  00000000  00000000  0000154f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e4  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001be8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000016a  00000000  00000000  00001c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000032c  00000000  00000000  00001dea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00002116  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a2 ea       	ldi	r26, 0xA2	; 162
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 3b       	cpi	r26, 0xBF	; 191
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  8a:	0c 94 a8 01 	jmp	0x350	; 0x350 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pinSet>:
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
  92:	89 32       	cpi	r24, 0x29	; 41
  94:	f0 f5       	brcc	.+124    	; 0x112 <pinSet+0x80>
  96:	66 23       	and	r22, r22
  98:	f1 f0       	breq	.+60     	; 0xd6 <pinSet+0x44>
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	dc 01       	movw	r26, r24
  9e:	aa 0f       	add	r26, r26
  a0:	bb 1f       	adc	r27, r27
  a2:	aa 0f       	add	r26, r26
  a4:	bb 1f       	adc	r27, r27
  a6:	aa 0f       	add	r26, r26
  a8:	bb 1f       	adc	r27, r27
  aa:	a8 1b       	sub	r26, r24
  ac:	b9 0b       	sbc	r27, r25
  ae:	ae 57       	subi	r26, 0x7E	; 126
  b0:	bf 4f       	sbci	r27, 0xFF	; 255
  b2:	ed 91       	ld	r30, X+
  b4:	fc 91       	ld	r31, X
  b6:	11 97       	sbiw	r26, 0x01	; 1
  b8:	40 81       	ld	r20, Z
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	c9 01       	movw	r24, r18
  c0:	16 96       	adiw	r26, 0x06	; 6
  c2:	0c 90       	ld	r0, X
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
  c4:	16 97       	sbiw	r26, 0x06	; 6
  c6:	02 c0       	rjmp	.+4      	; 0xcc <pinSet+0x3a>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	0a 94       	dec	r0
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <pinSet+0x36>
  d0:	84 2b       	or	r24, r20
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	dc 01       	movw	r26, r24
  da:	aa 0f       	add	r26, r26
  dc:	bb 1f       	adc	r27, r27
  de:	aa 0f       	add	r26, r26
  e0:	bb 1f       	adc	r27, r27
  e2:	aa 0f       	add	r26, r26
  e4:	bb 1f       	adc	r27, r27
  e6:	a8 1b       	sub	r26, r24
  e8:	b9 0b       	sbc	r27, r25
  ea:	ae 57       	subi	r26, 0x7E	; 126
  ec:	bf 4f       	sbci	r27, 0xFF	; 255
  ee:	ed 91       	ld	r30, X+
  f0:	fc 91       	ld	r31, X
  f2:	11 97       	sbiw	r26, 0x01	; 1
  f4:	40 81       	ld	r20, Z
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	30 e0       	ldi	r19, 0x00	; 0
{
	uint8_t bit, x =0;
	uint8_t iplex = 27;
	uint8_t *p = value;
	pinWrite(clockpin, HIGH);
	for(bit = 4; bit<8; bit++)
  fa:	c9 01       	movw	r24, r18
  fc:	16 96       	adiw	r26, 0x06	; 6
  fe:	0c 90       	ld	r0, X
 100:	16 97       	sbiw	r26, 0x06	; 6
 102:	02 c0       	rjmp	.+4      	; 0x108 <pinSet+0x76>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
	{
		pinWrite(bit_pins[iplex], (*p & (1  << (7-bit))));
		iplex--;
 108:	0a 94       	dec	r0
 10a:	e2 f7       	brpl	.-8      	; 0x104 <pinSet+0x72>
 10c:	80 95       	com	r24
 10e:	84 23       	and	r24, r20
 110:	80 83       	st	Z, r24
 112:	08 95       	ret

00000114 <main>:
	for(x=1; x<4; x++)
	{
		p++;
		for(bit = 0; bit < 8 ; bit++)
		{
			pinWrite(bit_pins[iplex], (*p & (1  << (7-bit))));
 114:	86 e2       	ldi	r24, 0x26	; 38
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	0e 94 49 00 	call	0x92	; 0x92 <pinSet>
 11c:	87 e2       	ldi	r24, 0x27	; 39
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	0e 94 49 00 	call	0x92	; 0x92 <pinSet>
 124:	a6 e6       	ldi	r26, 0x66	; 102
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	ad 01       	movw	r20, r26
 12a:	62 e8       	ldi	r22, 0x82	; 130
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	01 e0       	ldi	r16, 0x01	; 1
	uint8_t *p = value;
	pinWrite(clockpin, HIGH);
	for(bit = 4; bit<8; bit++)
	{
		pinWrite(bit_pins[iplex], (*p & (1  << (7-bit))));
		iplex--;
 130:	10 e0       	ldi	r17, 0x00	; 0
 132:	1b c0       	rjmp	.+54     	; 0x16a <main+0x56>
	for(x=1; x<4; x++)
	{
		p++;
		for(bit = 0; bit < 8 ; bit++)
		{
			pinWrite(bit_pins[iplex], (*p & (1  << (7-bit))));
 134:	89 32       	cpi	r24, 0x29	; 41
 136:	c8 f4       	brcc	.+50     	; 0x16a <main+0x56>
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	9c 01       	movw	r18, r24
 13c:	22 0f       	add	r18, r18
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
 13e:	33 1f       	adc	r19, r19
 140:	22 0f       	add	r18, r18
 142:	33 1f       	adc	r19, r19
 144:	22 0f       	add	r18, r18
 146:	33 1f       	adc	r19, r19
 148:	28 1b       	sub	r18, r24
 14a:	39 0b       	sbc	r19, r25
 14c:	fb 01       	movw	r30, r22
 14e:	e2 0f       	add	r30, r18
 150:	f3 1f       	adc	r31, r19
		if (value) {
 152:	c0 81       	ld	r28, Z
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
 154:	d1 81       	ldd	r29, Z+1	; 0x01
 156:	28 81       	ld	r18, Y
 158:	c8 01       	movw	r24, r16
 15a:	06 80       	ldd	r0, Z+6	; 0x06
 15c:	02 c0       	rjmp	.+4      	; 0x162 <main+0x4e>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <main+0x4a>
 166:	82 2b       	or	r24, r18
 168:	88 83       	st	Y, r24
 16a:	fa 01       	movw	r30, r20
 16c:	81 91       	ld	r24, Z+
 16e:	af 01       	movw	r20, r30
 170:	88 23       	and	r24, r24
 172:	01 f7       	brne	.-64     	; 0x134 <main+0x20>
 174:	1d c0       	rjmp	.+58     	; 0x1b0 <main+0x9c>
 176:	89 32       	cpi	r24, 0x29	; 41
 178:	f8 f4       	brcc	.+62     	; 0x1b8 <main+0xa4>
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	9c 01       	movw	r18, r24
 17e:	22 0f       	add	r18, r18
 180:	33 1f       	adc	r19, r19
 182:	22 0f       	add	r18, r18
 184:	33 1f       	adc	r19, r19
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
 186:	22 0f       	add	r18, r18
 188:	33 1f       	adc	r19, r19
 18a:	28 1b       	sub	r18, r24
 18c:	39 0b       	sbc	r19, r25
 18e:	fa 01       	movw	r30, r20
 190:	e2 0f       	add	r30, r18
 192:	f3 1f       	adc	r31, r19
 194:	c2 81       	ldd	r28, Z+2	; 0x02
 196:	d3 81       	ldd	r29, Z+3	; 0x03
 198:	28 81       	ld	r18, Y
 19a:	cb 01       	movw	r24, r22
 19c:	06 80       	ldd	r0, Z+6	; 0x06
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <main+0x90>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <main+0x8c>
 1a8:	80 95       	com	r24
 1aa:	82 23       	and	r24, r18
 1ac:	88 83       	st	Y, r24
 1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <main+0xa4>
 1b0:	42 e8       	ldi	r20, 0x82	; 130
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	70 e0       	ldi	r23, 0x00	; 0
			iplex--;	
 1b8:	8d 91       	ld	r24, X+
 1ba:	88 23       	and	r24, r24
 1bc:	e1 f6       	brne	.-72     	; 0x176 <main+0x62>
		iplex--;
	}
	for(x=1; x<4; x++)
	{
		p++;
		for(bit = 0; bit < 8 ; bit++)
 1be:	0f 2e       	mov	r0, r31
 1c0:	f2 e8       	ldi	r31, 0x82	; 130
 1c2:	6f 2e       	mov	r6, r31
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	7f 2e       	mov	r7, r31
 1c8:	f0 2d       	mov	r31, r0
 1ca:	0f 2e       	mov	r0, r31
	for(bit = 4; bit<8; bit++)
	{
		pinWrite(bit_pins[iplex], (*p & (1  << (7-bit))));
		iplex--;
	}
	for(x=1; x<4; x++)
 1cc:	f3 e0       	ldi	r31, 0x03	; 3
 1ce:	4f 2e       	mov	r4, r31
 1d0:	55 24       	eor	r5, r5
 1d2:	f0 2d       	mov	r31, r0
			pinWrite(bit_pins[iplex], (*p & (1  << (7-bit))));
			iplex--;	
		}
	}
	pinWrite(clockpin, LOW);
	data = 0;
 1d4:	0f 2e       	mov	r0, r31
 1d6:	f0 e6       	ldi	r31, 0x60	; 96
			*p = (uint8_t)USART_Receive();
			data++; p++;			
		}
	}
	if(data > 3) Display();
}
 1d8:	af 2e       	mov	r10, r31
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	bf 2e       	mov	r11, r31
 1de:	f0 2d       	mov	r31, r0
 1e0:	01 e0       	ldi	r16, 0x01	; 1
 1e2:	10 e0       	ldi	r17, 0x00	; 0
 1e4:	0f 2e       	mov	r0, r31
 1e6:	f2 e8       	ldi	r31, 0x82	; 130
 1e8:	cf 2e       	mov	r12, r31
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	df 2e       	mov	r13, r31
 1ee:	f0 2d       	mov	r31, r0
	uint8_t *p = value;
	pinWrite(clockpin, HIGH);
	for(bit = 4; bit<8; bit++)
	{
		pinWrite(bit_pins[iplex], (*p & (1  << (7-bit))));
		iplex--;
 1f0:	0f 2e       	mov	r0, r31
 1f2:	f7 e1       	ldi	r31, 0x17	; 23
 1f4:	3f 2e       	mov	r3, r31
 1f6:	f0 2d       	mov	r31, r0
	for(x=1; x<4; x++)
	{
		p++;
		for(bit = 0; bit < 8 ; bit++)
		{
			pinWrite(bit_pins[iplex], (*p & (1  << (7-bit))));
 1f8:	0f 2e       	mov	r0, r31
 1fa:	f6 e6       	ldi	r31, 0x66	; 102
 1fc:	ef 2e       	mov	r14, r31
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	ff 2e       	mov	r15, r31
 202:	f0 2d       	mov	r31, r0
	uint8_t *p = value;
	pinWrite(clockpin, HIGH);
	for(bit = 4; bit<8; bit++)
	{
		pinWrite(bit_pins[iplex], (*p & (1  << (7-bit))));
		iplex--;
 204:	0f 2e       	mov	r0, r31
 206:	f7 e0       	ldi	r31, 0x07	; 7
 208:	8f 2e       	mov	r8, r31
 20a:	99 24       	eor	r9, r9
 20c:	f0 2d       	mov	r31, r0
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
 20e:	d9 9a       	sbi	0x1b, 1	; 27
 210:	d3 01       	movw	r26, r6
 212:	a2 01       	movw	r20, r4
	uint8_t iplex = 27;
	uint8_t *p = value;
	pinWrite(clockpin, HIGH);
	for(bit = 4; bit<8; bit++)
	{
		pinWrite(bit_pins[iplex], (*p & (1  << (7-bit))));
 214:	8e 91       	ld	r24, -X
 216:	f5 01       	movw	r30, r10
 218:	90 81       	ld	r25, Z
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
 21a:	89 32       	cpi	r24, 0x29	; 41
 21c:	d8 f5       	brcc	.+118    	; 0x294 <main+0x180>
 21e:	98 01       	movw	r18, r16
 220:	04 2e       	mov	r0, r20
 222:	02 c0       	rjmp	.+4      	; 0x228 <main+0x114>
 224:	22 0f       	add	r18, r18
 226:	33 1f       	adc	r19, r19
 228:	0a 94       	dec	r0
 22a:	e2 f7       	brpl	.-8      	; 0x224 <main+0x110>
 22c:	29 23       	and	r18, r25
		if (value) {
 22e:	c9 f0       	breq	.+50     	; 0x262 <main+0x14e>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	fc 01       	movw	r30, r24
 234:	ee 0f       	add	r30, r30
 236:	ff 1f       	adc	r31, r31
 238:	ee 0f       	add	r30, r30
 23a:	ff 1f       	adc	r31, r31
 23c:	ee 0f       	add	r30, r30
 23e:	ff 1f       	adc	r31, r31
 240:	e8 1b       	sub	r30, r24
 242:	f9 0b       	sbc	r31, r25
 244:	ec 0d       	add	r30, r12
 246:	fd 1d       	adc	r31, r13
 248:	c2 81       	ldd	r28, Z+2	; 0x02
 24a:	d3 81       	ldd	r29, Z+3	; 0x03
 24c:	28 81       	ld	r18, Y
 24e:	c8 01       	movw	r24, r16
 250:	06 80       	ldd	r0, Z+6	; 0x06
 252:	02 c0       	rjmp	.+4      	; 0x258 <main+0x144>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	0a 94       	dec	r0
 25a:	e2 f7       	brpl	.-8      	; 0x254 <main+0x140>
 25c:	82 2b       	or	r24, r18
 25e:	88 83       	st	Y, r24
 260:	19 c0       	rjmp	.+50     	; 0x294 <main+0x180>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	fc 01       	movw	r30, r24
 266:	ee 0f       	add	r30, r30
 268:	ff 1f       	adc	r31, r31
 26a:	ee 0f       	add	r30, r30
 26c:	ff 1f       	adc	r31, r31
 26e:	ee 0f       	add	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	e8 1b       	sub	r30, r24
 274:	f9 0b       	sbc	r31, r25
 276:	ec 0d       	add	r30, r12
 278:	fd 1d       	adc	r31, r13
 27a:	c2 81       	ldd	r28, Z+2	; 0x02
 27c:	d3 81       	ldd	r29, Z+3	; 0x03
 27e:	28 81       	ld	r18, Y
 280:	c8 01       	movw	r24, r16
 282:	06 80       	ldd	r0, Z+6	; 0x06
 284:	02 c0       	rjmp	.+4      	; 0x28a <main+0x176>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	0a 94       	dec	r0
 28c:	e2 f7       	brpl	.-8      	; 0x286 <main+0x172>
 28e:	80 95       	com	r24
 290:	82 23       	and	r24, r18
 292:	88 83       	st	Y, r24
 294:	41 50       	subi	r20, 0x01	; 1
 296:	50 40       	sbci	r21, 0x00	; 0
{
	uint8_t bit, x =0;
	uint8_t iplex = 27;
	uint8_t *p = value;
	pinWrite(clockpin, HIGH);
	for(bit = 4; bit<8; bit++)
 298:	ff ef       	ldi	r31, 0xFF	; 255
 29a:	4f 3f       	cpi	r20, 0xFF	; 255
 29c:	5f 07       	cpc	r21, r31
 29e:	09 f0       	breq	.+2      	; 0x2a2 <main+0x18e>
 2a0:	b9 cf       	rjmp	.-142    	; 0x214 <main+0x100>
 2a2:	e5 01       	movw	r28, r10
	{
		pinWrite(bit_pins[iplex], (*p & (1  << (7-bit))));
		iplex--;
 2a4:	53 2d       	mov	r21, r3
 2a6:	45 2f       	mov	r20, r21
 2a8:	b4 01       	movw	r22, r8
	for(x=1; x<4; x++)
	{
		p++;
		for(bit = 0; bit < 8 ; bit++)
		{
			pinWrite(bit_pins[iplex], (*p & (1  << (7-bit))));
 2aa:	f7 01       	movw	r30, r14
 2ac:	e4 0f       	add	r30, r20
 2ae:	f1 1d       	adc	r31, r1
 2b0:	80 81       	ld	r24, Z
 2b2:	99 81       	ldd	r25, Y+1	; 0x01
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
 2b4:	89 32       	cpi	r24, 0x29	; 41
 2b6:	d8 f5       	brcc	.+118    	; 0x32e <main+0x21a>
 2b8:	98 01       	movw	r18, r16
 2ba:	06 2e       	mov	r0, r22
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <main+0x1ae>
 2be:	22 0f       	add	r18, r18
 2c0:	33 1f       	adc	r19, r19
 2c2:	0a 94       	dec	r0
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <main+0x1aa>
 2c6:	29 23       	and	r18, r25
		if (value) {
 2c8:	c9 f0       	breq	.+50     	; 0x2fc <main+0x1e8>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	fc 01       	movw	r30, r24
 2ce:	ee 0f       	add	r30, r30
 2d0:	ff 1f       	adc	r31, r31
 2d2:	ee 0f       	add	r30, r30
 2d4:	ff 1f       	adc	r31, r31
 2d6:	ee 0f       	add	r30, r30
 2d8:	ff 1f       	adc	r31, r31
 2da:	e8 1b       	sub	r30, r24
 2dc:	f9 0b       	sbc	r31, r25
 2de:	ec 0d       	add	r30, r12
 2e0:	fd 1d       	adc	r31, r13
 2e2:	a2 81       	ldd	r26, Z+2	; 0x02
 2e4:	b3 81       	ldd	r27, Z+3	; 0x03
 2e6:	2c 91       	ld	r18, X
 2e8:	c8 01       	movw	r24, r16
 2ea:	06 80       	ldd	r0, Z+6	; 0x06
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <main+0x1de>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	0a 94       	dec	r0
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <main+0x1da>
 2f6:	82 2b       	or	r24, r18
 2f8:	8c 93       	st	X, r24
 2fa:	19 c0       	rjmp	.+50     	; 0x32e <main+0x21a>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	fc 01       	movw	r30, r24
 300:	ee 0f       	add	r30, r30
 302:	ff 1f       	adc	r31, r31
 304:	ee 0f       	add	r30, r30
 306:	ff 1f       	adc	r31, r31
 308:	ee 0f       	add	r30, r30
 30a:	ff 1f       	adc	r31, r31
 30c:	e8 1b       	sub	r30, r24
 30e:	f9 0b       	sbc	r31, r25
 310:	ec 0d       	add	r30, r12
 312:	fd 1d       	adc	r31, r13
 314:	a2 81       	ldd	r26, Z+2	; 0x02
 316:	b3 81       	ldd	r27, Z+3	; 0x03
 318:	2c 91       	ld	r18, X
 31a:	c8 01       	movw	r24, r16
 31c:	06 80       	ldd	r0, Z+6	; 0x06
 31e:	02 c0       	rjmp	.+4      	; 0x324 <main+0x210>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	0a 94       	dec	r0
 326:	e2 f7       	brpl	.-8      	; 0x320 <main+0x20c>
 328:	80 95       	com	r24
 32a:	82 23       	and	r24, r18
 32c:	8c 93       	st	X, r24
			iplex--;	
 32e:	41 50       	subi	r20, 0x01	; 1
 330:	61 50       	subi	r22, 0x01	; 1
 332:	70 40       	sbci	r23, 0x00	; 0
		iplex--;
	}
	for(x=1; x<4; x++)
	{
		p++;
		for(bit = 0; bit < 8 ; bit++)
 334:	8f ef       	ldi	r24, 0xFF	; 255
 336:	6f 3f       	cpi	r22, 0xFF	; 255
 338:	78 07       	cpc	r23, r24
 33a:	09 f0       	breq	.+2      	; 0x33e <main+0x22a>
 33c:	b6 cf       	rjmp	.-148    	; 0x2aa <main+0x196>
 33e:	58 50       	subi	r21, 0x08	; 8
 340:	21 96       	adiw	r28, 0x01	; 1
	for(bit = 4; bit<8; bit++)
	{
		pinWrite(bit_pins[iplex], (*p & (1  << (7-bit))));
		iplex--;
	}
	for(x=1; x<4; x++)
 342:	5f 3f       	cpi	r21, 0xFF	; 255
 344:	09 f0       	breq	.+2      	; 0x348 <main+0x234>
 346:	af cf       	rjmp	.-162    	; 0x2a6 <main+0x192>
 348:	d9 98       	cbi	0x1b, 1	; 27
			pinWrite(bit_pins[iplex], (*p & (1  << (7-bit))));
			iplex--;	
		}
	}
	pinWrite(clockpin, LOW);
	data = 0;
 34a:	10 92 a2 01 	sts	0x01A2, r1
 34e:	5f cf       	rjmp	.-322    	; 0x20e <main+0xfa>

00000350 <_exit>:
 350:	f8 94       	cli

00000352 <__stop_program>:
 352:	ff cf       	rjmp	.-2      	; 0x352 <__stop_program>
