
ShiftRegister.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000018a  00800100  00002194  00002228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002194  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  0080028a  0080028a  000023b2  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000023b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00002a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000d0  00000000  00000000  00002b08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031bf  00000000  00000000  00002bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003ba  00000000  00000000  00005d97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f14  00000000  00000000  00006151  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  00007068  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000294  00000000  00000000  00007438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004481  00000000  00000000  000076cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000017a0  00000000  00000000  0000bb4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 4e 0f 	jmp	0x1e9c	; 0x1e9c <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e9       	ldi	r30, 0x94	; 148
      7c:	f1 e2       	ldi	r31, 0x21	; 33
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 38       	cpi	r26, 0x8A	; 138
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	aa e8       	ldi	r26, 0x8A	; 138
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 3a       	cpi	r26, 0xA5	; 165
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <main>
      9e:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
      a6:	90 93 c5 00 	sts	0x00C5, r25
      aa:	80 93 c4 00 	sts	0x00C4, r24
      ae:	88 e0       	ldi	r24, 0x08	; 8
      b0:	80 93 c1 00 	sts	0x00C1, r24
      b4:	8e e0       	ldi	r24, 0x0E	; 14
      b6:	80 93 c2 00 	sts	0x00C2, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
      ba:	51 9a       	sbi	0x0a, 1	; 10
      bc:	08 95       	ret

000000be <_init>:
      be:	cf 93       	push	r28
      c0:	df 93       	push	r29
      c2:	23 9a       	sbi	0x04, 3	; 4
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
      c4:	24 98       	cbi	0x04, 4	; 4
}

/************************************************************************/
/* scroll left                                                          */
/************************************************************************/
void ScrollLeft(uint8_t *p, uint8_t time)
      c6:	c7 e0       	ldi	r28, 0x07	; 7
      c8:	d1 e0       	ldi	r29, 0x01	; 1
	for(index=0; index<5; index++){
		pinsMultiWrite(plex_pins, LOW);
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
      ca:	4e eb       	ldi	r20, 0xBE	; 190
}

inline void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
      cc:	51 e0       	ldi	r21, 0x01	; 1
      ce:	61 e0       	ldi	r22, 0x01	; 1
      d0:	70 e0       	ldi	r23, 0x00	; 0
      d2:	1b c0       	rjmp	.+54     	; 0x10a <_init+0x4c>
	/* Put data into buffer, sends the data */
	UDR0 = data;
      d4:	8d 31       	cpi	r24, 0x1D	; 29
      d6:	c8 f4       	brcc	.+50     	; 0x10a <_init+0x4c>
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
		pinsMultiWrite(plex_pins, LOW);
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	9c 01       	movw	r18, r24
      dc:	22 0f       	add	r18, r18
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
      de:	33 1f       	adc	r19, r19
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
      e0:	22 0f       	add	r18, r18
      e2:	33 1f       	adc	r19, r19
      e4:	22 0f       	add	r18, r18
      e6:	33 1f       	adc	r19, r19
      e8:	28 1b       	sub	r18, r24
      ea:	39 0b       	sbc	r19, r25
      ec:	fa 01       	movw	r30, r20
      ee:	e2 0f       	add	r30, r18
		///////////////////////////////////////////////////////
		for(bit = 0; bit < 8 ; bit++)
			pinWrite(int_data_pins[bit], (*p & (1  << bit)));
      f0:	f3 1f       	adc	r31, r19
      f2:	a0 81       	ld	r26, Z
      f4:	b1 81       	ldd	r27, Z+1	; 0x01
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
      f6:	2c 91       	ld	r18, X
      f8:	cb 01       	movw	r24, r22
      fa:	06 80       	ldd	r0, Z+6	; 0x06
      fc:	02 c0       	rjmp	.+4      	; 0x102 <_init+0x44>
      fe:	88 0f       	add	r24, r24
     100:	99 1f       	adc	r25, r25
     102:	0a 94       	dec	r0
     104:	e2 f7       	brpl	.-8      	; 0xfe <_init+0x40>
     106:	82 2b       	or	r24, r18
     108:	8c 93       	st	X, r24
     10a:	89 91       	ld	r24, Y+
     10c:	88 23       	and	r24, r24
		if (value) {
     10e:	11 f7       	brne	.-60     	; 0xd4 <_init+0x16>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     110:	c2 e0       	ldi	r28, 0x02	; 2
     112:	d1 e0       	ldi	r29, 0x01	; 1
     114:	4e eb       	ldi	r20, 0xBE	; 190
     116:	51 e0       	ldi	r21, 0x01	; 1
     118:	61 e0       	ldi	r22, 0x01	; 1
     11a:	70 e0       	ldi	r23, 0x00	; 0
     11c:	1b c0       	rjmp	.+54     	; 0x154 <_init+0x96>
     11e:	8d 31       	cpi	r24, 0x1D	; 29
     120:	c8 f4       	brcc	.+50     	; 0x154 <_init+0x96>
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	9c 01       	movw	r18, r24
     126:	22 0f       	add	r18, r18
     128:	33 1f       	adc	r19, r19
     12a:	22 0f       	add	r18, r18
     12c:	33 1f       	adc	r19, r19
     12e:	22 0f       	add	r18, r18
     130:	33 1f       	adc	r19, r19
     132:	28 1b       	sub	r18, r24
     134:	39 0b       	sbc	r19, r25
     136:	fa 01       	movw	r30, r20
     138:	e2 0f       	add	r30, r18
     13a:	f3 1f       	adc	r31, r19
     13c:	a0 81       	ld	r26, Z
     13e:	b1 81       	ldd	r27, Z+1	; 0x01
     140:	2c 91       	ld	r18, X
     142:	cb 01       	movw	r24, r22
     144:	06 80       	ldd	r0, Z+6	; 0x06
     146:	02 c0       	rjmp	.+4      	; 0x14c <_init+0x8e>
     148:	88 0f       	add	r24, r24
     14a:	99 1f       	adc	r25, r25
     14c:	0a 94       	dec	r0
     14e:	e2 f7       	brpl	.-8      	; 0x148 <_init+0x8a>
     150:	82 2b       	or	r24, r18
     152:	8c 93       	st	X, r24
     154:	89 91       	ld	r24, Y+
     156:	88 23       	and	r24, r24
     158:	11 f7       	brne	.-60     	; 0x11e <_init+0x60>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	91 ee       	ldi	r25, 0xE1	; 225
     15e:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	08 95       	ret

00000168 <FallIn>:
     168:	2f 92       	push	r2
     16a:	3f 92       	push	r3
     16c:	4f 92       	push	r4
     16e:	5f 92       	push	r5
     170:	6f 92       	push	r6
     172:	7f 92       	push	r7
     174:	8f 92       	push	r8
     176:	9f 92       	push	r9
     178:	af 92       	push	r10
     17a:	bf 92       	push	r11
     17c:	cf 92       	push	r12
     17e:	df 92       	push	r13
     180:	ef 92       	push	r14
     182:	ff 92       	push	r15
     184:	0f 93       	push	r16
     186:	1f 93       	push	r17
     188:	cf 93       	push	r28
     18a:	df 93       	push	r29
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
     190:	2f 97       	sbiw	r28, 0x0f	; 15
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	f8 94       	cli
     196:	de bf       	out	0x3e, r29	; 62
     198:	0f be       	out	0x3f, r0	; 63
     19a:	cd bf       	out	0x3d, r28	; 61
     19c:	9b 87       	std	Y+11, r25	; 0x0b
     19e:	8a 87       	std	Y+10, r24	; 0x0a
     1a0:	6c 83       	std	Y+4, r22	; 0x04
     1a2:	19 86       	std	Y+9, r1	; 0x09
     1a4:	44 96       	adiw	r24, 0x14	; 20
     1a6:	9d 87       	std	Y+13, r25	; 0x0d
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
		///////////////////////////////////////////////////////
		for(bit = 0; bit < 8 ; bit++)
     1a8:	8c 87       	std	Y+12, r24	; 0x0c
     1aa:	82 e0       	ldi	r24, 0x02	; 2
     1ac:	91 e0       	ldi	r25, 0x01	; 1
     1ae:	8d 83       	std	Y+5, r24	; 0x05
			pinWrite(int_data_pins[bit], (*p & (1  << bit)));
		p++;
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
     1b0:	9e 83       	std	Y+6, r25	; 0x06
     1b2:	0f 2e       	mov	r0, r31
     1b4:	fe eb       	ldi	r31, 0xBE	; 190
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     1b6:	cf 2e       	mov	r12, r31
     1b8:	f1 e0       	ldi	r31, 0x01	; 1
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     1ba:	df 2e       	mov	r13, r31
     1bc:	f0 2d       	mov	r31, r0
     1be:	61 e0       	ldi	r22, 0x01	; 1
     1c0:	70 e0       	ldi	r23, 0x00	; 0
     1c2:	00 ec       	ldi	r16, 0xC0	; 192
     1c4:	10 e0       	ldi	r17, 0x00	; 0
     1c6:	6f 83       	std	Y+7, r22	; 0x07
     1c8:	78 87       	std	Y+8, r23	; 0x08
     1ca:	89 83       	std	Y+1, r24	; 0x01
     1cc:	9a 83       	std	Y+2, r25	; 0x02
     1ce:	0f 2e       	mov	r0, r31
     1d0:	f7 e0       	ldi	r31, 0x07	; 7
     1d2:	4f 2e       	mov	r4, r31
     1d4:	f1 e0       	ldi	r31, 0x01	; 1
     1d6:	5f 2e       	mov	r5, r31
     1d8:	f0 2d       	mov	r31, r0
     1da:	59 c1       	rjmp	.+690    	; 0x48e <FallIn+0x326>
     1dc:	91 30       	cpi	r25, 0x01	; 1
     1de:	79 f0       	breq	.+30     	; 0x1fe <FallIn+0x96>
     1e0:	91 30       	cpi	r25, 0x01	; 1
     1e2:	28 f0       	brcs	.+10     	; 0x1ee <FallIn+0x86>
     1e4:	92 30       	cpi	r25, 0x02	; 2
     1e6:	a1 f0       	breq	.+40     	; 0x210 <FallIn+0xa8>
     1e8:	93 30       	cpi	r25, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ea:	19 f5       	brne	.+70     	; 0x232 <FallIn+0xca>
     1ec:	1a c0       	rjmp	.+52     	; 0x222 <FallIn+0xba>
     1ee:	85 30       	cpi	r24, 0x05	; 5
     1f0:	10 f0       	brcs	.+4      	; 0x1f6 <FallIn+0x8e>
     1f2:	1c 92       	st	X, r1
     1f4:	1e c0       	rjmp	.+60     	; 0x232 <FallIn+0xca>
     1f6:	fa 01       	movw	r30, r20
     1f8:	20 81       	ld	r18, Z
     1fa:	2c 93       	st	X, r18
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     1fc:	1a c0       	rjmp	.+52     	; 0x232 <FallIn+0xca>
     1fe:	8a 30       	cpi	r24, 0x0A	; 10
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     200:	10 f0       	brcs	.+4      	; 0x206 <FallIn+0x9e>
     202:	1c 92       	st	X, r1
     204:	16 c0       	rjmp	.+44     	; 0x232 <FallIn+0xca>
     206:	fa 01       	movw	r30, r20
     208:	35 97       	sbiw	r30, 0x05	; 5
     20a:	20 81       	ld	r18, Z
     20c:	2c 93       	st	X, r18
     20e:	11 c0       	rjmp	.+34     	; 0x232 <FallIn+0xca>
     210:	8f 30       	cpi	r24, 0x0F	; 15
     212:	10 f0       	brcs	.+4      	; 0x218 <FallIn+0xb0>
     214:	1c 92       	st	X, r1
     216:	0d c0       	rjmp	.+26     	; 0x232 <FallIn+0xca>
     218:	fa 01       	movw	r30, r20
     21a:	3a 97       	sbiw	r30, 0x0a	; 10
     21c:	20 81       	ld	r18, Z
     21e:	2c 93       	st	X, r18
     220:	08 c0       	rjmp	.+16     	; 0x232 <FallIn+0xca>
     222:	84 31       	cpi	r24, 0x14	; 20
     224:	10 f0       	brcs	.+4      	; 0x22a <FallIn+0xc2>
     226:	1c 92       	st	X, r1
     228:	04 c0       	rjmp	.+8      	; 0x232 <FallIn+0xca>
     22a:	fa 01       	movw	r30, r20
     22c:	3f 97       	sbiw	r30, 0x0f	; 15
     22e:	20 81       	ld	r18, Z
     230:	2c 93       	st	X, r18
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     232:	8f 5f       	subi	r24, 0xFF	; 255
     234:	4f 5f       	subi	r20, 0xFF	; 255
     236:	5f 4f       	sbci	r21, 0xFF	; 255
     238:	11 96       	adiw	r26, 0x01	; 1
     23a:	89 31       	cpi	r24, 0x19	; 25
     23c:	79 f6       	brne	.-98     	; 0x1dc <FallIn+0x74>
     23e:	fc 81       	ldd	r31, Y+4	; 0x04
     240:	ff 23       	and	r31, r31
     242:	09 f0       	breq	.+2      	; 0x246 <FallIn+0xde>
     244:	05 c1       	rjmp	.+522    	; 0x450 <FallIn+0x2e8>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     246:	1d c1       	rjmp	.+570    	; 0x482 <FallIn+0x31a>
     248:	8d 31       	cpi	r24, 0x1D	; 29
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     24a:	c8 f4       	brcc	.+50     	; 0x27e <FallIn+0x116>
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	fc 01       	movw	r30, r24
     250:	ee 0f       	add	r30, r30
     252:	ff 1f       	adc	r31, r31
     254:	ee 0f       	add	r30, r30
     256:	ff 1f       	adc	r31, r31
     258:	ee 0f       	add	r30, r30
     25a:	ff 1f       	adc	r31, r31
     25c:	e8 1b       	sub	r30, r24
     25e:	f9 0b       	sbc	r31, r25
     260:	ec 0d       	add	r30, r12
     262:	fd 1d       	adc	r31, r13
     264:	a2 81       	ldd	r26, Z+2	; 0x02
     266:	b3 81       	ldd	r27, Z+3	; 0x03
     268:	2c 91       	ld	r18, X
     26a:	cb 01       	movw	r24, r22
     26c:	06 80       	ldd	r0, Z+6	; 0x06
     26e:	02 c0       	rjmp	.+4      	; 0x274 <FallIn+0x10c>
     270:	88 0f       	add	r24, r24
     272:	99 1f       	adc	r25, r25
     274:	0a 94       	dec	r0
     276:	e2 f7       	brpl	.-8      	; 0x270 <FallIn+0x108>
     278:	80 95       	com	r24
     27a:	82 23       	and	r24, r18
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     27c:	8c 93       	st	X, r24
     27e:	d7 01       	movw	r26, r14
     280:	8d 91       	ld	r24, X+
     282:	7d 01       	movw	r14, r26
     284:	88 23       	and	r24, r24
     286:	01 f7       	brne	.-64     	; 0x248 <FallIn+0xe0>
     288:	2b 9a       	sbi	0x05, 3	; 5
     28a:	75 01       	movw	r14, r10
     28c:	fa 01       	movw	r30, r20
/* Display data                                                         */
/************************************************************************/
static inline void Display(uint8_t *p)
{
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
     28e:	91 91       	ld	r25, Z+
     290:	d8 01       	movw	r26, r16
     292:	8c 91       	ld	r24, X
     294:	85 ff       	sbrs	r24, 5
     296:	fc cf       	rjmp	.-8      	; 0x290 <FallIn+0x128>
}

/************************************************************************/
/* scroll left                                                          */
/************************************************************************/
void ScrollLeft(uint8_t *p, uint8_t time)
     298:	d4 01       	movw	r26, r8
     29a:	9c 93       	st	X, r25
     29c:	ee 15       	cp	r30, r14
     29e:	ff 05       	cpc	r31, r15
     2a0:	b1 f7       	brne	.-20     	; 0x28e <FallIn+0x126>
     2a2:	2b 98       	cbi	0x05, 3	; 5
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
		_delay_ms(5);
		Clear();
	}
	delayms = 1;
     2a4:	1c 99       	sbic	0x03, 4	; 3
     2a6:	fe cf       	rjmp	.-4      	; 0x2a4 <FallIn+0x13c>
     2a8:	40 e0       	ldi	r20, 0x00	; 0
     2aa:	50 e0       	ldi	r21, 0x00	; 0
     2ac:	5f 86       	std	Y+15, r5	; 0x0f
     2ae:	4e 86       	std	Y+14, r4	; 0x0e
     2b0:	ee 85       	ldd	r30, Y+14	; 0x0e
     2b2:	ff 85       	ldd	r31, Y+15	; 0x0f
     2b4:	21 91       	ld	r18, Z+
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     2b6:	ff 87       	std	Y+15, r31	; 0x0f
     2b8:	ee 87       	std	Y+14, r30	; 0x0e
     2ba:	d7 01       	movw	r26, r14
     2bc:	3c 91       	ld	r19, X
     2be:	2d 31       	cpi	r18, 0x1D	; 29
     2c0:	08 f0       	brcs	.+2      	; 0x2c4 <FallIn+0x15c>
     2c2:	3e c0       	rjmp	.+124    	; 0x340 <FallIn+0x1d8>
}

/************************************************************************/
/* scroll left                                                          */
/************************************************************************/
void ScrollLeft(uint8_t *p, uint8_t time)
     2c4:	fb 01       	movw	r30, r22
     2c6:	04 2e       	mov	r0, r20
     2c8:	02 c0       	rjmp	.+4      	; 0x2ce <FallIn+0x166>
     2ca:	ee 0f       	add	r30, r30
     2cc:	ff 1f       	adc	r31, r31
     2ce:	0a 94       	dec	r0
     2d0:	e2 f7       	brpl	.-8      	; 0x2ca <FallIn+0x162>
     2d2:	cf 01       	movw	r24, r30
     2d4:	83 23       	and	r24, r19
     2d6:	d1 f0       	breq	.+52     	; 0x30c <FallIn+0x1a4>
     2d8:	82 2f       	mov	r24, r18
     2da:	90 e0       	ldi	r25, 0x00	; 0
	HoldDisplay(p, 10);
	for(c=0; c<4; c++)
	{
		for(y=0; y<5; y++)
		{
			*bf = *p >> 1;
     2dc:	fc 01       	movw	r30, r24
     2de:	ee 0f       	add	r30, r30
     2e0:	ff 1f       	adc	r31, r31
     2e2:	ee 0f       	add	r30, r30
}

/************************************************************************/
/* scroll left                                                          */
/************************************************************************/
void ScrollLeft(uint8_t *p, uint8_t time)
     2e4:	ff 1f       	adc	r31, r31
     2e6:	ee 0f       	add	r30, r30
     2e8:	ff 1f       	adc	r31, r31
     2ea:	e8 1b       	sub	r30, r24
		{
			*bf = *p >> 1;
			for(x=1; x<5; x++)
			{	
				bf++; p++;
				*bf = (*p >> 1);// | (*(p-1) << 7);
     2ec:	f9 0b       	sbc	r31, r25
     2ee:	ec 0d       	add	r30, r12
     2f0:	fd 1d       	adc	r31, r13
	for(c=0; c<4; c++)
	{
		for(y=0; y<5; y++)
		{
			*bf = *p >> 1;
			for(x=1; x<5; x++)
     2f2:	a2 81       	ldd	r26, Z+2	; 0x02
     2f4:	b3 81       	ldd	r27, Z+3	; 0x03
     2f6:	2c 91       	ld	r18, X
}

/************************************************************************/
/* scroll left                                                          */
/************************************************************************/
void ScrollLeft(uint8_t *p, uint8_t time)
     2f8:	cb 01       	movw	r24, r22
     2fa:	06 80       	ldd	r0, Z+6	; 0x06
	uint8_t *bf = buffer;
	uint8_t *bk = p;
	HoldDisplay(p, 10);
	for(c=0; c<4; c++)
	{
		for(y=0; y<5; y++)
     2fc:	02 c0       	rjmp	.+4      	; 0x302 <FallIn+0x19a>
     2fe:	88 0f       	add	r24, r24
     300:	99 1f       	adc	r25, r25
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     302:	0a 94       	dec	r0
     304:	e2 f7       	brpl	.-8      	; 0x2fe <FallIn+0x196>
     306:	82 2b       	or	r24, r18
     308:	8c 93       	st	X, r24
     30a:	1a c0       	rjmp	.+52     	; 0x340 <FallIn+0x1d8>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     30c:	82 2f       	mov	r24, r18
     30e:	90 e0       	ldi	r25, 0x00	; 0
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     310:	fc 01       	movw	r30, r24
     312:	ee 0f       	add	r30, r30
     314:	ff 1f       	adc	r31, r31
     316:	ee 0f       	add	r30, r30
     318:	ff 1f       	adc	r31, r31
     31a:	ee 0f       	add	r30, r30
     31c:	ff 1f       	adc	r31, r31
     31e:	e8 1b       	sub	r30, r24
     320:	f9 0b       	sbc	r31, r25
     322:	ec 0d       	add	r30, r12
     324:	fd 1d       	adc	r31, r13
     326:	a2 81       	ldd	r26, Z+2	; 0x02
     328:	b3 81       	ldd	r27, Z+3	; 0x03
     32a:	2c 91       	ld	r18, X
     32c:	cb 01       	movw	r24, r22
     32e:	06 80       	ldd	r0, Z+6	; 0x06
     330:	02 c0       	rjmp	.+4      	; 0x336 <FallIn+0x1ce>
     332:	88 0f       	add	r24, r24
     334:	99 1f       	adc	r25, r25
     336:	0a 94       	dec	r0
     338:	e2 f7       	brpl	.-8      	; 0x332 <FallIn+0x1ca>
     33a:	80 95       	com	r24
     33c:	82 23       	and	r24, r18
     33e:	8c 93       	st	X, r24
     340:	4f 5f       	subi	r20, 0xFF	; 255
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     342:	5f 4f       	sbci	r21, 0xFF	; 255
     344:	48 30       	cpi	r20, 0x08	; 8
     346:	51 05       	cpc	r21, r1
     348:	09 f0       	breq	.+2      	; 0x34c <FallIn+0x1e4>
     34a:	b2 cf       	rjmp	.-156    	; 0x2b0 <FallIn+0x148>
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     34c:	d3 01       	movw	r26, r6
}

/************************************************************************/
/* scroll left                                                          */
/************************************************************************/
void ScrollLeft(uint8_t *p, uint8_t time)
     34e:	8d 91       	ld	r24, X+
     350:	3d 01       	movw	r6, r26
	for(index=0; index<5; index++){
		pinsMultiWrite(plex_pins, LOW);
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
     352:	8d 31       	cpi	r24, 0x1D	; 29
}

inline void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
     354:	c0 f4       	brcc	.+48     	; 0x386 <FallIn+0x21e>
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	fc 01       	movw	r30, r24
     35a:	ee 0f       	add	r30, r30
	/* Put data into buffer, sends the data */
	UDR0 = data;
     35c:	ff 1f       	adc	r31, r31
     35e:	ee 0f       	add	r30, r30
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
		pinsMultiWrite(plex_pins, LOW);
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
     360:	ff 1f       	adc	r31, r31
     362:	ee 0f       	add	r30, r30
     364:	ff 1f       	adc	r31, r31
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     366:	e8 1b       	sub	r30, r24
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
     368:	f9 0b       	sbc	r31, r25
     36a:	ec 0d       	add	r30, r12
     36c:	fd 1d       	adc	r31, r13
     36e:	a2 81       	ldd	r26, Z+2	; 0x02
     370:	b3 81       	ldd	r27, Z+3	; 0x03
     372:	2c 91       	ld	r18, X
     374:	cb 01       	movw	r24, r22
		///////////////////////////////////////////////////////
		for(bit = 0; bit < 8 ; bit++)
			pinWrite(int_data_pins[bit], (*p & (1  << bit)));
     376:	06 80       	ldd	r0, Z+6	; 0x06
     378:	02 c0       	rjmp	.+4      	; 0x37e <FallIn+0x216>
     37a:	88 0f       	add	r24, r24
     37c:	99 1f       	adc	r25, r25
     37e:	0a 94       	dec	r0
     380:	e2 f7       	brpl	.-8      	; 0x37a <FallIn+0x212>
     382:	82 2b       	or	r24, r18
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     384:	8c 93       	st	X, r24
     386:	ef e1       	ldi	r30, 0x1F	; 31
     388:	fe e4       	ldi	r31, 0x4E	; 78
     38a:	31 97       	sbiw	r30, 0x01	; 1
     38c:	f1 f7       	brne	.-4      	; 0x38a <FallIn+0x222>
     38e:	00 c0       	rjmp	.+0      	; 0x390 <FallIn+0x228>
     390:	00 00       	nop
     392:	49 81       	ldd	r20, Y+1	; 0x01
     394:	5a 81       	ldd	r21, Y+2	; 0x02
     396:	1b c0       	rjmp	.+54     	; 0x3ce <FallIn+0x266>
     398:	8d 31       	cpi	r24, 0x1D	; 29
     39a:	c8 f4       	brcc	.+50     	; 0x3ce <FallIn+0x266>
		if (value) {
     39c:	90 e0       	ldi	r25, 0x00	; 0
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     39e:	fc 01       	movw	r30, r24
     3a0:	ee 0f       	add	r30, r30
     3a2:	ff 1f       	adc	r31, r31
     3a4:	ee 0f       	add	r30, r30
     3a6:	ff 1f       	adc	r31, r31
     3a8:	ee 0f       	add	r30, r30
     3aa:	ff 1f       	adc	r31, r31
     3ac:	e8 1b       	sub	r30, r24
     3ae:	f9 0b       	sbc	r31, r25
     3b0:	ec 0d       	add	r30, r12
     3b2:	fd 1d       	adc	r31, r13
     3b4:	a2 81       	ldd	r26, Z+2	; 0x02
     3b6:	b3 81       	ldd	r27, Z+3	; 0x03
     3b8:	2c 91       	ld	r18, X
     3ba:	cb 01       	movw	r24, r22
     3bc:	06 80       	ldd	r0, Z+6	; 0x06
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <FallIn+0x25c>
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	0a 94       	dec	r0
     3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <FallIn+0x258>
     3c8:	80 95       	com	r24
     3ca:	82 23       	and	r24, r18
     3cc:	8c 93       	st	X, r24
     3ce:	da 01       	movw	r26, r20
     3d0:	8d 91       	ld	r24, X+
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     3d2:	ad 01       	movw	r20, r26
     3d4:	88 23       	and	r24, r24
     3d6:	01 f7       	brne	.-64     	; 0x398 <FallIn+0x230>
     3d8:	a2 01       	movw	r20, r4
     3da:	1b c0       	rjmp	.+54     	; 0x412 <FallIn+0x2aa>
     3dc:	8d 31       	cpi	r24, 0x1D	; 29
     3de:	c8 f4       	brcc	.+50     	; 0x412 <FallIn+0x2aa>
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	fc 01       	movw	r30, r24
     3e4:	ee 0f       	add	r30, r30
     3e6:	ff 1f       	adc	r31, r31
     3e8:	ee 0f       	add	r30, r30
     3ea:	ff 1f       	adc	r31, r31
     3ec:	ee 0f       	add	r30, r30
     3ee:	ff 1f       	adc	r31, r31
     3f0:	e8 1b       	sub	r30, r24
     3f2:	f9 0b       	sbc	r31, r25
     3f4:	ec 0d       	add	r30, r12
     3f6:	fd 1d       	adc	r31, r13
     3f8:	a2 81       	ldd	r26, Z+2	; 0x02
     3fa:	b3 81       	ldd	r27, Z+3	; 0x03
     3fc:	2c 91       	ld	r18, X
     3fe:	cb 01       	movw	r24, r22
     400:	06 80       	ldd	r0, Z+6	; 0x06
     402:	02 c0       	rjmp	.+4      	; 0x408 <FallIn+0x2a0>
     404:	88 0f       	add	r24, r24
     406:	99 1f       	adc	r25, r25
     408:	0a 94       	dec	r0
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
		///////////////////////////////////////////////////////
		for(bit = 0; bit < 8 ; bit++)
     40a:	e2 f7       	brpl	.-8      	; 0x404 <FallIn+0x29c>
     40c:	80 95       	com	r24
     40e:	82 23       	and	r24, r18
     410:	8c 93       	st	X, r24
			pinWrite(int_data_pins[bit], (*p & (1  << bit)));
		p++;
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
     412:	fa 01       	movw	r30, r20
     414:	81 91       	ld	r24, Z+
     416:	af 01       	movw	r20, r30
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     418:	88 23       	and	r24, r24
     41a:	01 f7       	brne	.-64     	; 0x3dc <FallIn+0x274>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     41c:	85 e0       	ldi	r24, 0x05	; 5
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	a8 0e       	add	r10, r24
     422:	b9 1e       	adc	r11, r25
     424:	62 14       	cp	r6, r2
     426:	73 04       	cpc	r7, r3
     428:	31 f0       	breq	.+12     	; 0x436 <FallIn+0x2ce>
     42a:	a5 01       	movw	r20, r10
     42c:	44 50       	subi	r20, 0x04	; 4
     42e:	50 40       	sbci	r21, 0x00	; 0
     430:	e9 80       	ldd	r14, Y+1	; 0x01
     432:	fa 80       	ldd	r15, Y+2	; 0x02
     434:	24 cf       	rjmp	.-440    	; 0x27e <FallIn+0x116>
     436:	9f 81       	ldd	r25, Y+7	; 0x07
     438:	90 93 00 01 	sts	0x0100, r25
     43c:	a8 85       	ldd	r26, Y+8	; 0x08
     43e:	a0 93 01 01 	sts	0x0101, r26
     442:	bb 81       	ldd	r27, Y+3	; 0x03
     444:	bf 5f       	subi	r27, 0xFF	; 255
     446:	bb 83       	std	Y+3, r27	; 0x03
     448:	ec 81       	ldd	r30, Y+4	; 0x04
     44a:	be 17       	cp	r27, r30
     44c:	89 f4       	brne	.+34     	; 0x470 <FallIn+0x308>
     44e:	19 c0       	rjmp	.+50     	; 0x482 <FallIn+0x31a>
     450:	1b 82       	std	Y+3, r1	; 0x03
     452:	0f 2e       	mov	r0, r31
     454:	f2 e0       	ldi	r31, 0x02	; 2
     456:	2f 2e       	mov	r2, r31
     458:	f1 e0       	ldi	r31, 0x01	; 1
     45a:	3f 2e       	mov	r3, r31
     45c:	f0 2d       	mov	r31, r0
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     45e:	85 e0       	ldi	r24, 0x05	; 5
     460:	90 e0       	ldi	r25, 0x00	; 0
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     462:	28 0e       	add	r2, r24
     464:	39 1e       	adc	r3, r25
     466:	0f 2e       	mov	r0, r31
     468:	f6 ec       	ldi	r31, 0xC6	; 198
     46a:	8f 2e       	mov	r8, r31
     46c:	99 24       	eor	r9, r9
     46e:	f0 2d       	mov	r31, r0
     470:	6d 80       	ldd	r6, Y+5	; 0x05
     472:	7e 80       	ldd	r7, Y+6	; 0x06
     474:	0f 2e       	mov	r0, r31
     476:	f0 e9       	ldi	r31, 0x90	; 144
     478:	af 2e       	mov	r10, r31
     47a:	f2 e0       	ldi	r31, 0x02	; 2
     47c:	bf 2e       	mov	r11, r31
     47e:	f0 2d       	mov	r31, r0
     480:	d4 cf       	rjmp	.-88     	; 0x42a <FallIn+0x2c2>
     482:	99 85       	ldd	r25, Y+9	; 0x09
     484:	9f 5f       	subi	r25, 0xFF	; 255
     486:	99 87       	std	Y+9, r25	; 0x09
     488:	94 30       	cpi	r25, 0x04	; 4
     48a:	09 f4       	brne	.+2      	; 0x48e <FallIn+0x326>
     48c:	19 c1       	rjmp	.+562    	; 0x6c0 <FallIn+0x558>
     48e:	4c 85       	ldd	r20, Y+12	; 0x0c
     490:	5d 85       	ldd	r21, Y+13	; 0x0d
     492:	ac e8       	ldi	r26, 0x8C	; 140
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     494:	b2 e0       	ldi	r27, 0x02	; 2
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	99 85       	ldd	r25, Y+9	; 0x09
     49a:	a0 ce       	rjmp	.-704    	; 0x1dc <FallIn+0x74>
     49c:	8d 31       	cpi	r24, 0x1D	; 29
     49e:	c8 f4       	brcc	.+50     	; 0x4d2 <FallIn+0x36a>
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	fc 01       	movw	r30, r24
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     4a4:	ee 0f       	add	r30, r30
     4a6:	ff 1f       	adc	r31, r31
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     4a8:	ee 0f       	add	r30, r30
     4aa:	ff 1f       	adc	r31, r31
     4ac:	ee 0f       	add	r30, r30
     4ae:	ff 1f       	adc	r31, r31
     4b0:	e8 1b       	sub	r30, r24
     4b2:	f9 0b       	sbc	r31, r25
     4b4:	ee 0d       	add	r30, r14
     4b6:	ff 1d       	adc	r31, r15
     4b8:	a2 81       	ldd	r26, Z+2	; 0x02
     4ba:	b3 81       	ldd	r27, Z+3	; 0x03
     4bc:	2c 91       	ld	r18, X
     4be:	cb 01       	movw	r24, r22
     4c0:	06 80       	ldd	r0, Z+6	; 0x06
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <FallIn+0x360>
     4c4:	88 0f       	add	r24, r24
     4c6:	99 1f       	adc	r25, r25
     4c8:	0a 94       	dec	r0
     4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <FallIn+0x35c>
     4cc:	80 95       	com	r24
     4ce:	82 23       	and	r24, r18
     4d0:	8c 93       	st	X, r24
     4d2:	d6 01       	movw	r26, r12
     4d4:	8d 91       	ld	r24, X+
     4d6:	6d 01       	movw	r12, r26
     4d8:	88 23       	and	r24, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     4da:	01 f7       	brne	.-64     	; 0x49c <FallIn+0x334>
     4dc:	2b 9a       	sbi	0x05, 3	; 5
     4de:	64 01       	movw	r12, r8
     4e0:	fa 01       	movw	r30, r20
     4e2:	91 91       	ld	r25, Z+
     4e4:	d8 01       	movw	r26, r16
     4e6:	8c 91       	ld	r24, X
     4e8:	85 ff       	sbrs	r24, 5
     4ea:	fc cf       	rjmp	.-8      	; 0x4e4 <FallIn+0x37c>
/* Display data                                                         */
/************************************************************************/
static inline void Display(uint8_t *p)
{
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
     4ec:	d5 01       	movw	r26, r10
     4ee:	9c 93       	st	X, r25
     4f0:	ec 15       	cp	r30, r12
}

/************************************************************************/
/* scroll left                                                          */
/************************************************************************/
void ScrollLeft(uint8_t *p, uint8_t time)
     4f2:	fd 05       	cpc	r31, r13
     4f4:	b1 f7       	brne	.-20     	; 0x4e2 <FallIn+0x37a>
     4f6:	2b 98       	cbi	0x05, 3	; 5
     4f8:	1c 99       	sbic	0x03, 4	; 3
     4fa:	fe cf       	rjmp	.-4      	; 0x4f8 <FallIn+0x390>
     4fc:	d2 01       	movw	r26, r4
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
		_delay_ms(5);
		Clear();
	}
	delayms = 1;
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	50 e0       	ldi	r21, 0x00	; 0
     502:	8d 91       	ld	r24, X+
     504:	f6 01       	movw	r30, r12
     506:	90 81       	ld	r25, Z
     508:	8d 31       	cpi	r24, 0x1D	; 29
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     50a:	08 f0       	brcs	.+2      	; 0x50e <FallIn+0x3a6>
     50c:	52 c0       	rjmp	.+164    	; 0x5b2 <FallIn+0x44a>
     50e:	fb 01       	movw	r30, r22
     510:	04 2e       	mov	r0, r20
     512:	02 c0       	rjmp	.+4      	; 0x518 <FallIn+0x3b0>
     514:	ee 0f       	add	r30, r30
     516:	ff 1f       	adc	r31, r31
     518:	0a 94       	dec	r0
     51a:	e2 f7       	brpl	.-8      	; 0x514 <FallIn+0x3ac>
     51c:	9f 01       	movw	r18, r30
     51e:	29 23       	and	r18, r25
     520:	21 f1       	breq	.+72     	; 0x56a <FallIn+0x402>
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	fc 01       	movw	r30, r24
     526:	ee 0f       	add	r30, r30
     528:	ff 1f       	adc	r31, r31
     52a:	ee 0f       	add	r30, r30
     52c:	ff 1f       	adc	r31, r31
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     52e:	ee 0f       	add	r30, r30
     530:	ff 1f       	adc	r31, r31
     532:	e8 1b       	sub	r30, r24
     534:	f9 0b       	sbc	r31, r25
     536:	cf 01       	movw	r24, r30
     538:	8e 0d       	add	r24, r14
     53a:	9f 1d       	adc	r25, r15
     53c:	9f 87       	std	Y+15, r25	; 0x0f
     53e:	8e 87       	std	Y+14, r24	; 0x0e
     540:	fc 01       	movw	r30, r24
     542:	02 80       	ldd	r0, Z+2	; 0x02
     544:	f3 81       	ldd	r31, Z+3	; 0x03
     546:	e0 2d       	mov	r30, r0
     548:	fd 87       	std	Y+13, r31	; 0x0d
{
	int x ,y,c = 0;
	uint8_t *bf = buffer;
	uint8_t *bk = p;
	HoldDisplay(p, 10);
	for(c=0; c<4; c++)
     54a:	ec 87       	std	Y+12, r30	; 0x0c
     54c:	20 81       	ld	r18, Z
				*bf = (*p >> 1);// | (*(p-1) << 7);
			}
			bf++; p++;
		}
		HoldDisplay(buffer, time);
		p = bf = buffer;
     54e:	cb 01       	movw	r24, r22
     550:	ee 85       	ldd	r30, Y+14	; 0x0e
     552:	ff 85       	ldd	r31, Y+15	; 0x0f
     554:	06 80       	ldd	r0, Z+6	; 0x06
     556:	02 c0       	rjmp	.+4      	; 0x55c <FallIn+0x3f4>
     558:	88 0f       	add	r24, r24
     55a:	99 1f       	adc	r25, r25
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     55c:	0a 94       	dec	r0
     55e:	e2 f7       	brpl	.-8      	; 0x558 <FallIn+0x3f0>
     560:	82 2b       	or	r24, r18
     562:	ec 85       	ldd	r30, Y+12	; 0x0c
     564:	fd 85       	ldd	r31, Y+13	; 0x0d
     566:	80 83       	st	Z, r24
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     568:	24 c0       	rjmp	.+72     	; 0x5b2 <FallIn+0x44a>
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	fc 01       	movw	r30, r24
     56e:	ee 0f       	add	r30, r30
     570:	ff 1f       	adc	r31, r31
     572:	ee 0f       	add	r30, r30
     574:	ff 1f       	adc	r31, r31
     576:	ee 0f       	add	r30, r30
}

inline void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
     578:	ff 1f       	adc	r31, r31
     57a:	e8 1b       	sub	r30, r24
	/* Put data into buffer, sends the data */
	UDR0 = data;
     57c:	f9 0b       	sbc	r31, r25
     57e:	cf 01       	movw	r24, r30
     580:	8e 0d       	add	r24, r14
     582:	9f 1d       	adc	r25, r15
     584:	9f 87       	std	Y+15, r25	; 0x0f
     586:	8e 87       	std	Y+14, r24	; 0x0e
     588:	fc 01       	movw	r30, r24
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
     58a:	02 80       	ldd	r0, Z+2	; 0x02
     58c:	f3 81       	ldd	r31, Z+3	; 0x03
     58e:	e0 2d       	mov	r30, r0
     590:	fd 87       	std	Y+13, r31	; 0x0d
}

/************************************************************************/
/* scroll left                                                          */
/************************************************************************/
void ScrollLeft(uint8_t *p, uint8_t time)
     592:	ec 87       	std	Y+12, r30	; 0x0c
     594:	20 81       	ld	r18, Z
     596:	cb 01       	movw	r24, r22
     598:	ee 85       	ldd	r30, Y+14	; 0x0e
     59a:	ff 85       	ldd	r31, Y+15	; 0x0f
     59c:	06 80       	ldd	r0, Z+6	; 0x06
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <FallIn+0x43c>
     5a0:	88 0f       	add	r24, r24
     5a2:	99 1f       	adc	r25, r25
     5a4:	0a 94       	dec	r0
     5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <FallIn+0x438>
     5a8:	80 95       	com	r24
     5aa:	82 23       	and	r24, r18
     5ac:	ec 85       	ldd	r30, Y+12	; 0x0c
     5ae:	fd 85       	ldd	r31, Y+13	; 0x0d
     5b0:	80 83       	st	Z, r24
     5b2:	4f 5f       	subi	r20, 0xFF	; 255
     5b4:	5f 4f       	sbci	r21, 0xFF	; 255
     5b6:	48 30       	cpi	r20, 0x08	; 8
     5b8:	51 05       	cpc	r21, r1
     5ba:	09 f0       	breq	.+2      	; 0x5be <FallIn+0x456>
     5bc:	a2 cf       	rjmp	.-188    	; 0x502 <FallIn+0x39a>
     5be:	d3 01       	movw	r26, r6
		p = bf = buffer;
	}
	p = bk;
	for(x=2; x<23; x+=5)
	{
		*(bf+x) |= (*(p+(x-1)) << 4);
     5c0:	8d 91       	ld	r24, X+
     5c2:	3d 01       	movw	r6, r26
     5c4:	8d 31       	cpi	r24, 0x1D	; 29
     5c6:	c0 f4       	brcc	.+48     	; 0x5f8 <FallIn+0x490>
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	fc 01       	movw	r30, r24
		*(bf+x+1) |= (*(p+(x)) << 4);
     5cc:	ee 0f       	add	r30, r30
     5ce:	ff 1f       	adc	r31, r31
     5d0:	ee 0f       	add	r30, r30
     5d2:	ff 1f       	adc	r31, r31
     5d4:	ee 0f       	add	r30, r30
     5d6:	ff 1f       	adc	r31, r31
     5d8:	e8 1b       	sub	r30, r24
     5da:	f9 0b       	sbc	r31, r25
     5dc:	ee 0d       	add	r30, r14
     5de:	ff 1d       	adc	r31, r15
     5e0:	a2 81       	ldd	r26, Z+2	; 0x02
     5e2:	b3 81       	ldd	r27, Z+3	; 0x03
		}
		HoldDisplay(buffer, time);
		p = bf = buffer;
	}
	p = bk;
	for(x=2; x<23; x+=5)
     5e4:	2c 91       	ld	r18, X
     5e6:	cb 01       	movw	r24, r22
     5e8:	06 80       	ldd	r0, Z+6	; 0x06
     5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <FallIn+0x488>
     5ec:	88 0f       	add	r24, r24
     5ee:	99 1f       	adc	r25, r25
     5f0:	0a 94       	dec	r0
     5f2:	e2 f7       	brpl	.-8      	; 0x5ec <FallIn+0x484>
     5f4:	82 2b       	or	r24, r18
     5f6:	8c 93       	st	X, r24
     5f8:	ef e1       	ldi	r30, 0x1F	; 31
     5fa:	fe e4       	ldi	r31, 0x4E	; 78
     5fc:	31 97       	sbiw	r30, 0x01	; 1
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <FallIn+0x494>
     600:	00 c0       	rjmp	.+0      	; 0x602 <FallIn+0x49a>
}

inline void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
     602:	00 00       	nop
     604:	49 81       	ldd	r20, Y+1	; 0x01
	/* Put data into buffer, sends the data */
	UDR0 = data;
     606:	5a 81       	ldd	r21, Y+2	; 0x02
     608:	1b c0       	rjmp	.+54     	; 0x640 <FallIn+0x4d8>
     60a:	8d 31       	cpi	r24, 0x1D	; 29
     60c:	c8 f4       	brcc	.+50     	; 0x640 <FallIn+0x4d8>
     60e:	90 e0       	ldi	r25, 0x00	; 0
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
     610:	fc 01       	movw	r30, r24
     612:	ee 0f       	add	r30, r30
     614:	ff 1f       	adc	r31, r31
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     616:	ee 0f       	add	r30, r30
     618:	ff 1f       	adc	r31, r31
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     61a:	ee 0f       	add	r30, r30
     61c:	ff 1f       	adc	r31, r31
     61e:	e8 1b       	sub	r30, r24
     620:	f9 0b       	sbc	r31, r25
     622:	ee 0d       	add	r30, r14
     624:	ff 1d       	adc	r31, r15
     626:	a2 81       	ldd	r26, Z+2	; 0x02
     628:	b3 81       	ldd	r27, Z+3	; 0x03
     62a:	2c 91       	ld	r18, X
     62c:	cb 01       	movw	r24, r22
     62e:	06 80       	ldd	r0, Z+6	; 0x06
     630:	02 c0       	rjmp	.+4      	; 0x636 <FallIn+0x4ce>
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	0a 94       	dec	r0
     638:	e2 f7       	brpl	.-8      	; 0x632 <FallIn+0x4ca>
     63a:	80 95       	com	r24
     63c:	82 23       	and	r24, r18
     63e:	8c 93       	st	X, r24
     640:	da 01       	movw	r26, r20
     642:	8d 91       	ld	r24, X+
     644:	ad 01       	movw	r20, r26
     646:	88 23       	and	r24, r24
     648:	01 f7       	brne	.-64     	; 0x60a <FallIn+0x4a2>
     64a:	a2 01       	movw	r20, r4
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     64c:	1b c0       	rjmp	.+54     	; 0x684 <FallIn+0x51c>
     64e:	8d 31       	cpi	r24, 0x1D	; 29
     650:	c8 f4       	brcc	.+50     	; 0x684 <FallIn+0x51c>
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	fc 01       	movw	r30, r24
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     656:	ee 0f       	add	r30, r30
}

/************************************************************************/
/* scroll left                                                          */
/************************************************************************/
void ScrollLeft(uint8_t *p, uint8_t time)
     658:	ff 1f       	adc	r31, r31
     65a:	ee 0f       	add	r30, r30
	for(index=0; index<5; index++){
		pinsMultiWrite(plex_pins, LOW);
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
     65c:	ff 1f       	adc	r31, r31
}

inline void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
     65e:	ee 0f       	add	r30, r30
     660:	ff 1f       	adc	r31, r31
     662:	e8 1b       	sub	r30, r24
     664:	f9 0b       	sbc	r31, r25
	/* Put data into buffer, sends the data */
	UDR0 = data;
     666:	ee 0d       	add	r30, r14
     668:	ff 1d       	adc	r31, r15
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
		pinsMultiWrite(plex_pins, LOW);
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
     66a:	a2 81       	ldd	r26, Z+2	; 0x02
     66c:	b3 81       	ldd	r27, Z+3	; 0x03
     66e:	2c 91       	ld	r18, X
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     670:	cb 01       	movw	r24, r22
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
     672:	06 80       	ldd	r0, Z+6	; 0x06
     674:	02 c0       	rjmp	.+4      	; 0x67a <FallIn+0x512>
     676:	88 0f       	add	r24, r24
     678:	99 1f       	adc	r25, r25
     67a:	0a 94       	dec	r0
     67c:	e2 f7       	brpl	.-8      	; 0x676 <FallIn+0x50e>
     67e:	80 95       	com	r24
		///////////////////////////////////////////////////////
		for(bit = 0; bit < 8 ; bit++)
			pinWrite(int_data_pins[bit], (*p & (1  << bit)));
     680:	82 23       	and	r24, r18
     682:	8c 93       	st	X, r24
     684:	fa 01       	movw	r30, r20
     686:	81 91       	ld	r24, Z+
     688:	af 01       	movw	r20, r30
     68a:	88 23       	and	r24, r24
     68c:	01 f7       	brne	.-64     	; 0x64e <FallIn+0x4e6>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     68e:	85 e0       	ldi	r24, 0x05	; 5
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	88 0e       	add	r8, r24
     694:	99 1e       	adc	r9, r25
     696:	62 14       	cp	r6, r2
     698:	73 04       	cpc	r7, r3
     69a:	31 f0       	breq	.+12     	; 0x6a8 <FallIn+0x540>
     69c:	a4 01       	movw	r20, r8
     69e:	44 50       	subi	r20, 0x04	; 4
     6a0:	50 40       	sbci	r21, 0x00	; 0
     6a2:	c9 80       	ldd	r12, Y+1	; 0x01
		if (value) {
     6a4:	da 80       	ldd	r13, Y+2	; 0x02
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     6a6:	15 cf       	rjmp	.-470    	; 0x4d2 <FallIn+0x36a>
     6a8:	9c 81       	ldd	r25, Y+4	; 0x04
     6aa:	90 93 00 01 	sts	0x0100, r25
     6ae:	ad 81       	ldd	r26, Y+5	; 0x05
     6b0:	a0 93 01 01 	sts	0x0101, r26
     6b4:	bb 81       	ldd	r27, Y+3	; 0x03
     6b6:	b1 50       	subi	r27, 0x01	; 1
     6b8:	bb 83       	std	Y+3, r27	; 0x03
     6ba:	bb 23       	and	r27, r27
     6bc:	69 f5       	brne	.+90     	; 0x718 <FallIn+0x5b0>
     6be:	35 c0       	rjmp	.+106    	; 0x72a <FallIn+0x5c2>
     6c0:	e2 e3       	ldi	r30, 0x32	; 50
     6c2:	eb 83       	std	Y+3, r30	; 0x03
     6c4:	8a 85       	ldd	r24, Y+10	; 0x0a
     6c6:	9b 85       	ldd	r25, Y+11	; 0x0b
     6c8:	04 96       	adiw	r24, 0x04	; 4
     6ca:	9b 87       	std	Y+11, r25	; 0x0b
     6cc:	8a 87       	std	Y+10, r24	; 0x0a
     6ce:	0f 2e       	mov	r0, r31
     6d0:	f2 e0       	ldi	r31, 0x02	; 2
     6d2:	2f 2e       	mov	r2, r31
     6d4:	f1 e0       	ldi	r31, 0x01	; 1
     6d6:	3f 2e       	mov	r3, r31
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     6d8:	f0 2d       	mov	r31, r0
     6da:	a5 e0       	ldi	r26, 0x05	; 5
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
     6de:	2a 0e       	add	r2, r26
     6e0:	3b 1e       	adc	r3, r27
     6e2:	0f 2e       	mov	r0, r31
     6e4:	fe eb       	ldi	r31, 0xBE	; 190
     6e6:	ef 2e       	mov	r14, r31
     6e8:	f1 e0       	ldi	r31, 0x01	; 1
     6ea:	ff 2e       	mov	r15, r31
     6ec:	f0 2d       	mov	r31, r0
     6ee:	61 e0       	ldi	r22, 0x01	; 1
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	6c 83       	std	Y+4, r22	; 0x04
     6f4:	7d 83       	std	Y+5, r23	; 0x05
     6f6:	00 ec       	ldi	r16, 0xC0	; 192
     6f8:	10 e0       	ldi	r17, 0x00	; 0
     6fa:	0f 2e       	mov	r0, r31
     6fc:	f6 ec       	ldi	r31, 0xC6	; 198
     6fe:	af 2e       	mov	r10, r31
     700:	bb 24       	eor	r11, r11
     702:	f0 2d       	mov	r31, r0
     704:	e2 e0       	ldi	r30, 0x02	; 2
     706:	f1 e0       	ldi	r31, 0x01	; 1
     708:	e9 83       	std	Y+1, r30	; 0x01
     70a:	fa 83       	std	Y+2, r31	; 0x02
     70c:	0f 2e       	mov	r0, r31
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
		///////////////////////////////////////////////////////
		for(bit = 0; bit < 8 ; bit++)
     70e:	f7 e0       	ldi	r31, 0x07	; 7
     710:	4f 2e       	mov	r4, r31
     712:	f1 e0       	ldi	r31, 0x01	; 1
     714:	5f 2e       	mov	r5, r31
			pinWrite(int_data_pins[bit], (*p & (1  << bit)));
		p++;
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
     716:	f0 2d       	mov	r31, r0
     718:	0f 2e       	mov	r0, r31
     71a:	f2 e0       	ldi	r31, 0x02	; 2
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     71c:	6f 2e       	mov	r6, r31
     71e:	f1 e0       	ldi	r31, 0x01	; 1
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     720:	7f 2e       	mov	r7, r31
     722:	f0 2d       	mov	r31, r0
     724:	8a 84       	ldd	r8, Y+10	; 0x0a
     726:	9b 84       	ldd	r9, Y+11	; 0x0b
     728:	b9 cf       	rjmp	.-142    	; 0x69c <FallIn+0x534>
     72a:	2f 96       	adiw	r28, 0x0f	; 15
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	de bf       	out	0x3e, r29	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	cd bf       	out	0x3d, r28	; 61
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	df 90       	pop	r13
     744:	cf 90       	pop	r12
     746:	bf 90       	pop	r11
     748:	af 90       	pop	r10
     74a:	9f 90       	pop	r9
     74c:	8f 90       	pop	r8
     74e:	7f 90       	pop	r7
     750:	6f 90       	pop	r6
     752:	5f 90       	pop	r5
     754:	4f 90       	pop	r4
     756:	3f 90       	pop	r3
     758:	2f 90       	pop	r2
     75a:	08 95       	ret

0000075c <FallOut>:
     75c:	2f 92       	push	r2
     75e:	3f 92       	push	r3
     760:	4f 92       	push	r4
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     762:	5f 92       	push	r5
     764:	6f 92       	push	r6
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     766:	7f 92       	push	r7
     768:	8f 92       	push	r8
     76a:	9f 92       	push	r9
     76c:	af 92       	push	r10
     76e:	bf 92       	push	r11
     770:	cf 92       	push	r12
     772:	df 92       	push	r13
     774:	ef 92       	push	r14
     776:	ff 92       	push	r15
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62
     784:	6b 97       	sbiw	r28, 0x1b	; 27
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	de bf       	out	0x3e, r29	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	cd bf       	out	0x3d, r28	; 61
     790:	9e 8b       	std	Y+22, r25	; 0x16
     792:	8d 8b       	std	Y+21, r24	; 0x15
     794:	6f 87       	std	Y+15, r22	; 0x0f
     796:	24 e1       	ldi	r18, 0x14	; 20
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     798:	2b 83       	std	Y+3, r18	; 0x03
     79a:	04 96       	adiw	r24, 0x04	; 4
     79c:	9f 83       	std	Y+7, r25	; 0x07
     79e:	8e 83       	std	Y+6, r24	; 0x06
     7a0:	42 e0       	ldi	r20, 0x02	; 2
     7a2:	51 e0       	ldi	r21, 0x01	; 1
     7a4:	4c 83       	std	Y+4, r20	; 0x04
     7a6:	5d 83       	std	Y+5, r21	; 0x05
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     7a8:	0f 2e       	mov	r0, r31
     7aa:	fe eb       	ldi	r31, 0xBE	; 190
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     7ac:	cf 2e       	mov	r12, r31
     7ae:	f1 e0       	ldi	r31, 0x01	; 1
     7b0:	df 2e       	mov	r13, r31
     7b2:	f0 2d       	mov	r31, r0
     7b4:	61 e0       	ldi	r22, 0x01	; 1
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	68 87       	std	Y+8, r22	; 0x08
     7ba:	7c 87       	std	Y+12, r23	; 0x0c
     7bc:	00 ec       	ldi	r16, 0xC0	; 192
     7be:	10 e0       	ldi	r17, 0x00	; 0
     7c0:	0f 2e       	mov	r0, r31
     7c2:	f6 ec       	ldi	r31, 0xC6	; 198
     7c4:	af 2e       	mov	r10, r31
     7c6:	bb 24       	eor	r11, r11
     7c8:	f0 2d       	mov	r31, r0
     7ca:	0f 2e       	mov	r0, r31
     7cc:	f7 e0       	ldi	r31, 0x07	; 7
     7ce:	2f 2e       	mov	r2, r31
     7d0:	f1 e0       	ldi	r31, 0x01	; 1
     7d2:	3f 2e       	mov	r3, r31
     7d4:	f0 2d       	mov	r31, r0
     7d6:	59 83       	std	Y+1, r21	; 0x01
     7d8:	2a 82       	std	Y+2, r2	; 0x02
     7da:	53 2c       	mov	r5, r3
     7dc:	44 2e       	mov	r4, r20
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     7de:	20 c1       	rjmp	.+576    	; 0xa20 <__stack+0x121>
     7e0:	8d 31       	cpi	r24, 0x1D	; 29
     7e2:	f8 f4       	brcc	.+62     	; 0x822 <FallOut+0xc6>
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	fc 01       	movw	r30, r24
     7e8:	ee 0f       	add	r30, r30
     7ea:	ff 1f       	adc	r31, r31
     7ec:	ee 0f       	add	r30, r30
     7ee:	ff 1f       	adc	r31, r31
/* Display data                                                         */
/************************************************************************/
static inline void Display(uint8_t *p)
{
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
     7f0:	ee 0f       	add	r30, r30
     7f2:	ff 1f       	adc	r31, r31
     7f4:	e8 1b       	sub	r30, r24
}

/************************************************************************/
/* scroll left                                                          */
/************************************************************************/
void ScrollLeft(uint8_t *p, uint8_t time)
     7f6:	f9 0b       	sbc	r31, r25
     7f8:	cf 01       	movw	r24, r30
     7fa:	8c 0d       	add	r24, r12
     7fc:	9d 1d       	adc	r25, r13
     7fe:	fc 01       	movw	r30, r24
     800:	e2 80       	ldd	r14, Z+2	; 0x02
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
		_delay_ms(5);
		Clear();
	}
	delayms = 1;
     802:	f3 80       	ldd	r15, Z+3	; 0x03
     804:	f7 01       	movw	r30, r14
     806:	20 81       	ld	r18, Z
     808:	2b 01       	movw	r4, r22
     80a:	fc 01       	movw	r30, r24
     80c:	06 80       	ldd	r0, Z+6	; 0x06
     80e:	02 c0       	rjmp	.+4      	; 0x814 <FallOut+0xb8>
     810:	44 0c       	add	r4, r4
     812:	55 1c       	adc	r5, r5
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     814:	0a 94       	dec	r0
     816:	e2 f7       	brpl	.-8      	; 0x810 <FallOut+0xb4>
     818:	c2 01       	movw	r24, r4
     81a:	80 95       	com	r24
     81c:	82 23       	and	r24, r18
     81e:	f7 01       	movw	r30, r14
     820:	80 83       	st	Z, r24
     822:	8d 91       	ld	r24, X+
     824:	88 23       	and	r24, r24
     826:	e1 f6       	brne	.-72     	; 0x7e0 <FallOut+0x84>
     828:	43 2e       	mov	r4, r19
	{
		*(bf+x) |= (*(p+(x-1)) << 4);
		*(bf+x+1) |= (*(p+(x)) << 4);
	}		
	HoldDisplay(buffer, 50);
}
     82a:	5a 84       	ldd	r5, Y+10	; 0x0a
     82c:	2b 9a       	sbi	0x05, 3	; 5
     82e:	74 01       	movw	r14, r8
     830:	fa 01       	movw	r30, r20
     832:	91 91       	ld	r25, Z+
     834:	d8 01       	movw	r26, r16
     836:	8c 91       	ld	r24, X
     838:	85 ff       	sbrs	r24, 5
     83a:	fc cf       	rjmp	.-8      	; 0x834 <FallOut+0xd8>
     83c:	d5 01       	movw	r26, r10
     83e:	9c 93       	st	X, r25
     840:	ee 15       	cp	r30, r14
     842:	ff 05       	cpc	r31, r15
     844:	b1 f7       	brne	.-20     	; 0x832 <FallOut+0xd6>
     846:	2b 98       	cbi	0x05, 3	; 5
     848:	1c 99       	sbic	0x03, 4	; 3
     84a:	fe cf       	rjmp	.-4      	; 0x848 <FallOut+0xec>
     84c:	2a 86       	std	Y+10, r2	; 0x0a
     84e:	3b 86       	std	Y+11, r3	; 0x0b
     850:	2a 81       	ldd	r18, Y+2	; 0x02
     852:	35 2d       	mov	r19, r5
     854:	40 e0       	ldi	r20, 0x00	; 0
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	3b 8f       	std	Y+27, r19	; 0x1b
     85a:	2a 8f       	std	Y+26, r18	; 0x1a
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
		///////////////////////////////////////////////////////
		for(bit = 0; bit < 8 ; bit++)
			pinWrite(int_data_pins[bit], (*p & (1  << bit)));
     85c:	ea 8d       	ldd	r30, Y+26	; 0x1a
     85e:	fb 8d       	ldd	r31, Y+27	; 0x1b
     860:	21 91       	ld	r18, Z+
     862:	fb 8f       	std	Y+27, r31	; 0x1b
     864:	ea 8f       	std	Y+26, r30	; 0x1a
     866:	d7 01       	movw	r26, r14
     868:	3c 91       	ld	r19, X
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     86a:	2d 31       	cpi	r18, 0x1D	; 29
     86c:	08 f0       	brcs	.+2      	; 0x870 <FallOut+0x114>
     86e:	3e c0       	rjmp	.+124    	; 0x8ec <FallOut+0x190>
     870:	fb 01       	movw	r30, r22
     872:	04 2e       	mov	r0, r20
     874:	02 c0       	rjmp	.+4      	; 0x87a <FallOut+0x11e>
     876:	ee 0f       	add	r30, r30
     878:	ff 1f       	adc	r31, r31
     87a:	0a 94       	dec	r0
     87c:	e2 f7       	brpl	.-8      	; 0x876 <FallOut+0x11a>
     87e:	cf 01       	movw	r24, r30
     880:	83 23       	and	r24, r19
		if (value) {
     882:	d1 f0       	breq	.+52     	; 0x8b8 <FallOut+0x15c>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     884:	82 2f       	mov	r24, r18
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	fc 01       	movw	r30, r24
     88a:	ee 0f       	add	r30, r30
     88c:	ff 1f       	adc	r31, r31
     88e:	ee 0f       	add	r30, r30
     890:	ff 1f       	adc	r31, r31
     892:	ee 0f       	add	r30, r30
     894:	ff 1f       	adc	r31, r31
     896:	e8 1b       	sub	r30, r24
     898:	f9 0b       	sbc	r31, r25
     89a:	ec 0d       	add	r30, r12
     89c:	fd 1d       	adc	r31, r13
     89e:	a2 81       	ldd	r26, Z+2	; 0x02
     8a0:	b3 81       	ldd	r27, Z+3	; 0x03
     8a2:	2c 91       	ld	r18, X
     8a4:	cb 01       	movw	r24, r22
     8a6:	06 80       	ldd	r0, Z+6	; 0x06
     8a8:	02 c0       	rjmp	.+4      	; 0x8ae <FallOut+0x152>
     8aa:	88 0f       	add	r24, r24
     8ac:	99 1f       	adc	r25, r25
     8ae:	0a 94       	dec	r0
     8b0:	e2 f7       	brpl	.-8      	; 0x8aa <FallOut+0x14e>
     8b2:	82 2b       	or	r24, r18
     8b4:	8c 93       	st	X, r24
     8b6:	1a c0       	rjmp	.+52     	; 0x8ec <FallOut+0x190>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     8b8:	82 2f       	mov	r24, r18
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	fc 01       	movw	r30, r24
     8be:	ee 0f       	add	r30, r30
     8c0:	ff 1f       	adc	r31, r31
     8c2:	ee 0f       	add	r30, r30
     8c4:	ff 1f       	adc	r31, r31
     8c6:	ee 0f       	add	r30, r30
     8c8:	ff 1f       	adc	r31, r31
     8ca:	e8 1b       	sub	r30, r24
     8cc:	f9 0b       	sbc	r31, r25
     8ce:	ec 0d       	add	r30, r12
     8d0:	fd 1d       	adc	r31, r13
     8d2:	a2 81       	ldd	r26, Z+2	; 0x02
     8d4:	b3 81       	ldd	r27, Z+3	; 0x03
     8d6:	2c 91       	ld	r18, X
     8d8:	cb 01       	movw	r24, r22
     8da:	06 80       	ldd	r0, Z+6	; 0x06
     8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <FallOut+0x186>
     8de:	88 0f       	add	r24, r24
     8e0:	99 1f       	adc	r25, r25
     8e2:	0a 94       	dec	r0
     8e4:	e2 f7       	brpl	.-8      	; 0x8de <FallOut+0x182>
     8e6:	80 95       	com	r24
     8e8:	82 23       	and	r24, r18
     8ea:	8c 93       	st	X, r24
     8ec:	4f 5f       	subi	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
		///////////////////////////////////////////////////////
		for(bit = 0; bit < 8 ; bit++)
     8f0:	48 30       	cpi	r20, 0x08	; 8
     8f2:	51 05       	cpc	r21, r1
     8f4:	09 f0       	breq	.+2      	; 0x8f8 <FallOut+0x19c>
     8f6:	b2 cf       	rjmp	.-156    	; 0x85c <FallOut+0x100>
			pinWrite(int_data_pins[bit], (*p & (1  << bit)));
		p++;
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
     8f8:	d3 01       	movw	r26, r6
     8fa:	8d 91       	ld	r24, X+
     8fc:	3d 01       	movw	r6, r26
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     8fe:	8d 31       	cpi	r24, 0x1D	; 29
     900:	c0 f4       	brcc	.+48     	; 0x932 <__stack+0x33>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	fc 01       	movw	r30, r24
     906:	ee 0f       	add	r30, r30
     908:	ff 1f       	adc	r31, r31
     90a:	ee 0f       	add	r30, r30
     90c:	ff 1f       	adc	r31, r31
     90e:	ee 0f       	add	r30, r30
     910:	ff 1f       	adc	r31, r31
     912:	e8 1b       	sub	r30, r24
     914:	f9 0b       	sbc	r31, r25
     916:	ec 0d       	add	r30, r12
     918:	fd 1d       	adc	r31, r13
     91a:	a2 81       	ldd	r26, Z+2	; 0x02
     91c:	b3 81       	ldd	r27, Z+3	; 0x03
     91e:	2c 91       	ld	r18, X
     920:	cb 01       	movw	r24, r22
     922:	06 80       	ldd	r0, Z+6	; 0x06
     924:	02 c0       	rjmp	.+4      	; 0x92a <__stack+0x2b>
     926:	88 0f       	add	r24, r24
     928:	99 1f       	adc	r25, r25
     92a:	0a 94       	dec	r0
     92c:	e2 f7       	brpl	.-8      	; 0x926 <__stack+0x27>
     92e:	82 2b       	or	r24, r18
     930:	8c 93       	st	X, r24
     932:	ef e1       	ldi	r30, 0x1F	; 31
     934:	fe e4       	ldi	r31, 0x4E	; 78
     936:	31 97       	sbiw	r30, 0x01	; 1
     938:	f1 f7       	brne	.-4      	; 0x936 <__stack+0x37>
     93a:	00 c0       	rjmp	.+0      	; 0x93c <__stack+0x3d>
     93c:	00 00       	nop
     93e:	a4 2d       	mov	r26, r4
     940:	b9 81       	ldd	r27, Y+1	; 0x01
     942:	21 c0       	rjmp	.+66     	; 0x986 <__stack+0x87>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     944:	8d 31       	cpi	r24, 0x1D	; 29
     946:	f8 f4       	brcc	.+62     	; 0x986 <__stack+0x87>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	fc 01       	movw	r30, r24
     94c:	ee 0f       	add	r30, r30
     94e:	ff 1f       	adc	r31, r31
     950:	ee 0f       	add	r30, r30
     952:	ff 1f       	adc	r31, r31
     954:	ee 0f       	add	r30, r30
     956:	ff 1f       	adc	r31, r31
     958:	e8 1b       	sub	r30, r24
     95a:	f9 0b       	sbc	r31, r25
     95c:	cf 01       	movw	r24, r30
     95e:	8c 0d       	add	r24, r12
     960:	9d 1d       	adc	r25, r13
     962:	fc 01       	movw	r30, r24
     964:	42 81       	ldd	r20, Z+2	; 0x02
     966:	53 81       	ldd	r21, Z+3	; 0x03
     968:	fa 01       	movw	r30, r20
     96a:	20 81       	ld	r18, Z
     96c:	7b 01       	movw	r14, r22
     96e:	fc 01       	movw	r30, r24
     970:	06 80       	ldd	r0, Z+6	; 0x06
     972:	02 c0       	rjmp	.+4      	; 0x978 <__stack+0x79>
     974:	ee 0c       	add	r14, r14
     976:	ff 1c       	adc	r15, r15
     978:	0a 94       	dec	r0
     97a:	e2 f7       	brpl	.-8      	; 0x974 <__stack+0x75>
     97c:	c7 01       	movw	r24, r14
     97e:	80 95       	com	r24
     980:	82 23       	and	r24, r18
     982:	fa 01       	movw	r30, r20
     984:	80 83       	st	Z, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     986:	8d 91       	ld	r24, X+
     988:	88 23       	and	r24, r24
     98a:	e1 f6       	brne	.-72     	; 0x944 <__stack+0x45>
     98c:	33 2d       	mov	r19, r3
     98e:	aa 81       	ldd	r26, Y+2	; 0x02
     990:	b5 2d       	mov	r27, r5
     992:	28 8a       	std	Y+16, r2	; 0x10
     994:	21 c0       	rjmp	.+66     	; 0x9d8 <__stack+0xd9>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     996:	8d 31       	cpi	r24, 0x1D	; 29
     998:	f8 f4       	brcc	.+62     	; 0x9d8 <__stack+0xd9>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	fc 01       	movw	r30, r24
     99e:	ee 0f       	add	r30, r30
     9a0:	ff 1f       	adc	r31, r31
     9a2:	ee 0f       	add	r30, r30
     9a4:	ff 1f       	adc	r31, r31
     9a6:	ee 0f       	add	r30, r30
     9a8:	ff 1f       	adc	r31, r31
     9aa:	e8 1b       	sub	r30, r24
     9ac:	f9 0b       	sbc	r31, r25
     9ae:	cf 01       	movw	r24, r30
     9b0:	8c 0d       	add	r24, r12
     9b2:	9d 1d       	adc	r25, r13
     9b4:	fc 01       	movw	r30, r24
     9b6:	e2 80       	ldd	r14, Z+2	; 0x02
     9b8:	f3 80       	ldd	r15, Z+3	; 0x03
     9ba:	f7 01       	movw	r30, r14
     9bc:	20 81       	ld	r18, Z
     9be:	ab 01       	movw	r20, r22
     9c0:	fc 01       	movw	r30, r24
     9c2:	06 80       	ldd	r0, Z+6	; 0x06
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <__stack+0xcb>
     9c6:	44 0f       	add	r20, r20
     9c8:	55 1f       	adc	r21, r21
     9ca:	0a 94       	dec	r0
     9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <__stack+0xc7>
     9ce:	ca 01       	movw	r24, r20
     9d0:	80 95       	com	r24
     9d2:	82 23       	and	r24, r18
     9d4:	f7 01       	movw	r30, r14
     9d6:	80 83       	st	Z, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     9d8:	8d 91       	ld	r24, X+
     9da:	88 23       	and	r24, r24
     9dc:	e1 f6       	brne	.-72     	; 0x996 <__stack+0x97>
     9de:	48 89       	ldd	r20, Y+16	; 0x10
     9e0:	0f 2e       	mov	r0, r31
     9e2:	f5 e0       	ldi	r31, 0x05	; 5
     9e4:	ef 2e       	mov	r14, r31
     9e6:	ff 24       	eor	r15, r15
     9e8:	f0 2d       	mov	r31, r0
     9ea:	8e 0c       	add	r8, r14
     9ec:	9f 1c       	adc	r9, r15
/* Display data                                                         */
/************************************************************************/
static inline void Display(uint8_t *p)
{
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
     9ee:	27 e0       	ldi	r18, 0x07	; 7
     9f0:	62 16       	cp	r6, r18
     9f2:	21 e0       	ldi	r18, 0x01	; 1
     9f4:	72 06       	cpc	r7, r18
     9f6:	41 f0       	breq	.+16     	; 0xa08 <__stack+0x109>
}

/************************************************************************/
/* drop down effect                                                     */
/************************************************************************/
void FallOut(uint8_t *p, uint8_t time)
     9f8:	a4 01       	movw	r20, r8
     9fa:	44 50       	subi	r20, 0x04	; 4
     9fc:	50 40       	sbci	r21, 0x00	; 0
     9fe:	a4 2d       	mov	r26, r4
     a00:	b9 81       	ldd	r27, Y+1	; 0x01
     a02:	34 2d       	mov	r19, r4
     a04:	5a 86       	std	Y+10, r5	; 0x0a
     a06:	0d cf       	rjmp	.-486    	; 0x822 <FallOut+0xc6>
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
		_delay_ms(5);
		Clear();
	}
	delayms = 1;
     a08:	58 85       	ldd	r21, Y+8	; 0x08
     a0a:	50 93 00 01 	sts	0x0100, r21
     a0e:	8c 85       	ldd	r24, Y+12	; 0x0c
     a10:	80 93 01 01 	sts	0x0101, r24
     a14:	9b 81       	ldd	r25, Y+3	; 0x03
     a16:	91 50       	subi	r25, 0x01	; 1
     a18:	9b 83       	std	Y+3, r25	; 0x03
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     a1a:	99 23       	and	r25, r25
     a1c:	09 f4       	brne	.+2      	; 0xa20 <__stack+0x121>
     a1e:	71 c1       	rjmp	.+738    	; 0xd02 <__stack+0x403>
     a20:	a2 e0       	ldi	r26, 0x02	; 2
     a22:	b1 e0       	ldi	r27, 0x01	; 1
     a24:	af 8b       	std	Y+23, r26	; 0x17
     a26:	b8 8f       	std	Y+24, r27	; 0x18
}

/************************************************************************/
/* drop down effect                                                     */
/************************************************************************/
void FallOut(uint8_t *p, uint8_t time)
     a28:	8e 80       	ldd	r8, Y+6	; 0x06
     a2a:	9f 80       	ldd	r9, Y+7	; 0x07
     a2c:	fc 81       	ldd	r31, Y+4	; 0x04
     a2e:	f9 8f       	std	Y+25, r31	; 0x19
     a30:	ed 80       	ldd	r14, Y+5	; 0x05
     a32:	e9 86       	std	Y+9, r14	; 0x09
     a34:	47 e0       	ldi	r20, 0x07	; 7
     a36:	51 e0       	ldi	r21, 0x01	; 1
     a38:	5e 87       	std	Y+14, r21	; 0x0e
     a3a:	4d 87       	std	Y+13, r20	; 0x0d
     a3c:	6f 2e       	mov	r6, r31
     a3e:	7e 2c       	mov	r7, r14
     a40:	db cf       	rjmp	.-74     	; 0x9f8 <__stack+0xf9>
	HoldDisplay(p, 20);
	for(step = 0; step <5 ; step++)
	{
		for(index = 0; index < 25; index++)
		{
			switch (step)
     a42:	92 30       	cpi	r25, 0x02	; 2
     a44:	a9 f0       	breq	.+42     	; 0xa70 <__stack+0x171>
     a46:	93 30       	cpi	r25, 0x03	; 3
     a48:	28 f4       	brcc	.+10     	; 0xa54 <__stack+0x155>
     a4a:	99 23       	and	r25, r25
     a4c:	19 f1       	breq	.+70     	; 0xa94 <__stack+0x195>
     a4e:	91 30       	cpi	r25, 0x01	; 1
     a50:	49 f5       	brne	.+82     	; 0xaa4 <__stack+0x1a5>
     a52:	17 c0       	rjmp	.+46     	; 0xa82 <__stack+0x183>
     a54:	93 30       	cpi	r25, 0x03	; 3
     a56:	21 f0       	breq	.+8      	; 0xa60 <__stack+0x161>
     a58:	94 30       	cpi	r25, 0x04	; 4
     a5a:	21 f5       	brne	.+72     	; 0xaa4 <__stack+0x1a5>
			{
				case 4:
				*(bf+index) = 0x00;
     a5c:	1c 92       	st	X, r1
				break;
     a5e:	22 c0       	rjmp	.+68     	; 0xaa4 <__stack+0x1a5>
				case 3:
				if(index >= 5) *(bf+index) = 0x00;
     a60:	85 30       	cpi	r24, 0x05	; 5
     a62:	10 f0       	brcs	.+4      	; 0xa68 <__stack+0x169>
     a64:	1c 92       	st	X, r1
     a66:	1e c0       	rjmp	.+60     	; 0xaa4 <__stack+0x1a5>
				else *(bf + index) = *(p+(index+20));
     a68:	fa 01       	movw	r30, r20
     a6a:	20 81       	ld	r18, Z
     a6c:	2c 93       	st	X, r18
     a6e:	1a c0       	rjmp	.+52     	; 0xaa4 <__stack+0x1a5>
				break;
				case 2:
				if(index >= 10) *(bf+index) = 0x00;
     a70:	8a 30       	cpi	r24, 0x0A	; 10
     a72:	10 f0       	brcs	.+4      	; 0xa78 <__stack+0x179>
     a74:	1c 92       	st	X, r1
     a76:	16 c0       	rjmp	.+44     	; 0xaa4 <__stack+0x1a5>
}

/************************************************************************/
/* drop down effect                                                     */
/************************************************************************/
void FallOut(uint8_t *p, uint8_t time)
     a78:	fa 01       	movw	r30, r20
     a7a:	35 97       	sbiw	r30, 0x05	; 5
				if(index >= 5) *(bf+index) = 0x00;
				else *(bf + index) = *(p+(index+20));
				break;
				case 2:
				if(index >= 10) *(bf+index) = 0x00;
				else *(bf + index) = *(p+(index+15));
     a7c:	20 81       	ld	r18, Z
     a7e:	2c 93       	st	X, r18
     a80:	11 c0       	rjmp	.+34     	; 0xaa4 <__stack+0x1a5>
				break;
				case 1:
				if(index >= 15) *(bf+index) = 0x00;
     a82:	8f 30       	cpi	r24, 0x0F	; 15
     a84:	10 f0       	brcs	.+4      	; 0xa8a <__stack+0x18b>
     a86:	1c 92       	st	X, r1
     a88:	0d c0       	rjmp	.+26     	; 0xaa4 <__stack+0x1a5>
}

/************************************************************************/
/* drop down effect                                                     */
/************************************************************************/
void FallOut(uint8_t *p, uint8_t time)
     a8a:	fa 01       	movw	r30, r20
     a8c:	3a 97       	sbiw	r30, 0x0a	; 10
				if(index >= 10) *(bf+index) = 0x00;
				else *(bf + index) = *(p+(index+15));
				break;
				case 1:
				if(index >= 15) *(bf+index) = 0x00;
				else *(bf + index) = *(p+(index+10));
     a8e:	20 81       	ld	r18, Z
     a90:	2c 93       	st	X, r18
     a92:	08 c0       	rjmp	.+16     	; 0xaa4 <__stack+0x1a5>
				break;
				case 0:
				if(index >= 20) *(bf+index) = 0x00;
     a94:	84 31       	cpi	r24, 0x14	; 20
     a96:	10 f0       	brcs	.+4      	; 0xa9c <__stack+0x19d>
     a98:	1c 92       	st	X, r1
     a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <__stack+0x1a5>
}

/************************************************************************/
/* drop down effect                                                     */
/************************************************************************/
void FallOut(uint8_t *p, uint8_t time)
     a9c:	fa 01       	movw	r30, r20
     a9e:	3f 97       	sbiw	r30, 0x0f	; 15
				if(index >= 15) *(bf+index) = 0x00;
				else *(bf + index) = *(p+(index+10));
				break;
				case 0:
				if(index >= 20) *(bf+index) = 0x00;
				else *(bf + index) = *(p+(index+5));
     aa0:	20 81       	ld	r18, Z
     aa2:	2c 93       	st	X, r18
	uint8_t *bf = buffer;
	uint8_t index, step = 0;
	HoldDisplay(p, 20);
	for(step = 0; step <5 ; step++)
	{
		for(index = 0; index < 25; index++)
     aa4:	8f 5f       	subi	r24, 0xFF	; 255
     aa6:	11 96       	adiw	r26, 0x01	; 1
     aa8:	4f 5f       	subi	r20, 0xFF	; 255
     aaa:	5f 4f       	sbci	r21, 0xFF	; 255
     aac:	89 31       	cpi	r24, 0x19	; 25
     aae:	49 f6       	brne	.-110    	; 0xa42 <__stack+0x143>
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     ab0:	ff 85       	ldd	r31, Y+15	; 0x0f
     ab2:	ff 23       	and	r31, r31
     ab4:	09 f0       	breq	.+2      	; 0xab8 <__stack+0x1b9>
     ab6:	07 c1       	rjmp	.+526    	; 0xcc6 <__stack+0x3c7>
     ab8:	1e c1       	rjmp	.+572    	; 0xcf6 <__stack+0x3f7>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     aba:	8d 31       	cpi	r24, 0x1D	; 29
     abc:	c8 f4       	brcc	.+50     	; 0xaf0 <__stack+0x1f1>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	fc 01       	movw	r30, r24
     ac2:	ee 0f       	add	r30, r30
     ac4:	ff 1f       	adc	r31, r31
     ac6:	ee 0f       	add	r30, r30
     ac8:	ff 1f       	adc	r31, r31
     aca:	ee 0f       	add	r30, r30
     acc:	ff 1f       	adc	r31, r31
     ace:	e8 1b       	sub	r30, r24
     ad0:	f9 0b       	sbc	r31, r25
     ad2:	ec 0d       	add	r30, r12
     ad4:	fd 1d       	adc	r31, r13
     ad6:	a2 81       	ldd	r26, Z+2	; 0x02
     ad8:	b3 81       	ldd	r27, Z+3	; 0x03
     ada:	2c 91       	ld	r18, X
     adc:	cb 01       	movw	r24, r22
     ade:	06 80       	ldd	r0, Z+6	; 0x06
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <__stack+0x1e7>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	0a 94       	dec	r0
     ae8:	e2 f7       	brpl	.-8      	; 0xae2 <__stack+0x1e3>
     aea:	80 95       	com	r24
     aec:	82 23       	and	r24, r18
     aee:	8c 93       	st	X, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     af0:	d7 01       	movw	r26, r14
     af2:	8d 91       	ld	r24, X+
     af4:	7d 01       	movw	r14, r26
     af6:	88 23       	and	r24, r24
     af8:	01 f7       	brne	.-64     	; 0xaba <__stack+0x1bb>
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     afa:	2b 9a       	sbi	0x05, 3	; 5
}

/************************************************************************/
/* drop down effect                                                     */
/************************************************************************/
void FallOut(uint8_t *p, uint8_t time)
     afc:	75 01       	movw	r14, r10
     afe:	fa 01       	movw	r30, r20
	for(index=0; index<5; index++){
		pinsMultiWrite(plex_pins, LOW);
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
     b00:	91 91       	ld	r25, Z+
}

inline void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
     b02:	d8 01       	movw	r26, r16
     b04:	8c 91       	ld	r24, X
     b06:	85 ff       	sbrs	r24, 5
     b08:	fc cf       	rjmp	.-8      	; 0xb02 <__stack+0x203>
	/* Put data into buffer, sends the data */
	UDR0 = data;
     b0a:	d4 01       	movw	r26, r8
     b0c:	9c 93       	st	X, r25
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
		pinsMultiWrite(plex_pins, LOW);
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
     b0e:	ee 15       	cp	r30, r14
     b10:	ff 05       	cpc	r31, r15
     b12:	b1 f7       	brne	.-20     	; 0xb00 <__stack+0x201>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     b14:	2b 98       	cbi	0x05, 3	; 5
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
     b16:	1c 99       	sbic	0x03, 4	; 3
     b18:	fe cf       	rjmp	.-4      	; 0xb16 <__stack+0x217>
     b1a:	2b 81       	ldd	r18, Y+3	; 0x03
     b1c:	3c 81       	ldd	r19, Y+4	; 0x04
     b1e:	a1 01       	movw	r20, r2
     b20:	3b 8f       	std	Y+27, r19	; 0x1b
     b22:	2a 8f       	std	Y+26, r18	; 0x1a
		///////////////////////////////////////////////////////
		for(bit = 0; bit < 8 ; bit++)
			pinWrite(int_data_pins[bit], (*p & (1  << bit)));
     b24:	ea 8d       	ldd	r30, Y+26	; 0x1a
     b26:	fb 8d       	ldd	r31, Y+27	; 0x1b
     b28:	81 91       	ld	r24, Z+
     b2a:	fb 8f       	std	Y+27, r31	; 0x1b
     b2c:	ea 8f       	std	Y+26, r30	; 0x1a
     b2e:	d7 01       	movw	r26, r14
     b30:	9c 91       	ld	r25, X
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     b32:	8d 31       	cpi	r24, 0x1D	; 29
     b34:	e0 f5       	brcc	.+120    	; 0xbae <__stack+0x2af>
     b36:	fb 01       	movw	r30, r22
     b38:	04 2e       	mov	r0, r20
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__stack+0x241>
     b3c:	ee 0f       	add	r30, r30
     b3e:	ff 1f       	adc	r31, r31
     b40:	0a 94       	dec	r0
     b42:	e2 f7       	brpl	.-8      	; 0xb3c <__stack+0x23d>
     b44:	9f 01       	movw	r18, r30
     b46:	29 23       	and	r18, r25
		if (value) {
     b48:	c9 f0       	breq	.+50     	; 0xb7c <__stack+0x27d>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	fc 01       	movw	r30, r24
     b4e:	ee 0f       	add	r30, r30
     b50:	ff 1f       	adc	r31, r31
     b52:	ee 0f       	add	r30, r30
     b54:	ff 1f       	adc	r31, r31
     b56:	ee 0f       	add	r30, r30
     b58:	ff 1f       	adc	r31, r31
     b5a:	e8 1b       	sub	r30, r24
     b5c:	f9 0b       	sbc	r31, r25
     b5e:	ec 0d       	add	r30, r12
     b60:	fd 1d       	adc	r31, r13
     b62:	a2 81       	ldd	r26, Z+2	; 0x02
     b64:	b3 81       	ldd	r27, Z+3	; 0x03
     b66:	2c 91       	ld	r18, X
     b68:	cb 01       	movw	r24, r22
     b6a:	06 80       	ldd	r0, Z+6	; 0x06
     b6c:	02 c0       	rjmp	.+4      	; 0xb72 <__stack+0x273>
     b6e:	88 0f       	add	r24, r24
     b70:	99 1f       	adc	r25, r25
     b72:	0a 94       	dec	r0
     b74:	e2 f7       	brpl	.-8      	; 0xb6e <__stack+0x26f>
     b76:	82 2b       	or	r24, r18
     b78:	8c 93       	st	X, r24
     b7a:	19 c0       	rjmp	.+50     	; 0xbae <__stack+0x2af>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	fc 01       	movw	r30, r24
     b80:	ee 0f       	add	r30, r30
     b82:	ff 1f       	adc	r31, r31
     b84:	ee 0f       	add	r30, r30
     b86:	ff 1f       	adc	r31, r31
     b88:	ee 0f       	add	r30, r30
     b8a:	ff 1f       	adc	r31, r31
     b8c:	e8 1b       	sub	r30, r24
     b8e:	f9 0b       	sbc	r31, r25
     b90:	ec 0d       	add	r30, r12
     b92:	fd 1d       	adc	r31, r13
     b94:	a2 81       	ldd	r26, Z+2	; 0x02
     b96:	b3 81       	ldd	r27, Z+3	; 0x03
     b98:	2c 91       	ld	r18, X
     b9a:	cb 01       	movw	r24, r22
     b9c:	06 80       	ldd	r0, Z+6	; 0x06
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <__stack+0x2a5>
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	0a 94       	dec	r0
     ba6:	e2 f7       	brpl	.-8      	; 0xba0 <__stack+0x2a1>
     ba8:	80 95       	com	r24
     baa:	82 23       	and	r24, r18
     bac:	8c 93       	st	X, r24
     bae:	4f 5f       	subi	r20, 0xFF	; 255
     bb0:	5f 4f       	sbci	r21, 0xFF	; 255
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
		///////////////////////////////////////////////////////
		for(bit = 0; bit < 8 ; bit++)
     bb2:	48 30       	cpi	r20, 0x08	; 8
     bb4:	51 05       	cpc	r21, r1
     bb6:	09 f0       	breq	.+2      	; 0xbba <__stack+0x2bb>
     bb8:	b5 cf       	rjmp	.-150    	; 0xb24 <__stack+0x225>
			pinWrite(int_data_pins[bit], (*p & (1  << bit)));
		p++;
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
     bba:	d3 01       	movw	r26, r6
     bbc:	8d 91       	ld	r24, X+
     bbe:	3d 01       	movw	r6, r26
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     bc0:	8d 31       	cpi	r24, 0x1D	; 29
     bc2:	c0 f4       	brcc	.+48     	; 0xbf4 <__stack+0x2f5>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	fc 01       	movw	r30, r24
     bc8:	ee 0f       	add	r30, r30
     bca:	ff 1f       	adc	r31, r31
     bcc:	ee 0f       	add	r30, r30
     bce:	ff 1f       	adc	r31, r31
     bd0:	ee 0f       	add	r30, r30
     bd2:	ff 1f       	adc	r31, r31
     bd4:	e8 1b       	sub	r30, r24
     bd6:	f9 0b       	sbc	r31, r25
     bd8:	ec 0d       	add	r30, r12
     bda:	fd 1d       	adc	r31, r13
     bdc:	a2 81       	ldd	r26, Z+2	; 0x02
     bde:	b3 81       	ldd	r27, Z+3	; 0x03
     be0:	2c 91       	ld	r18, X
     be2:	cb 01       	movw	r24, r22
     be4:	06 80       	ldd	r0, Z+6	; 0x06
     be6:	02 c0       	rjmp	.+4      	; 0xbec <__stack+0x2ed>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <__stack+0x2e9>
     bf0:	82 2b       	or	r24, r18
     bf2:	8c 93       	st	X, r24
     bf4:	ef e1       	ldi	r30, 0x1F	; 31
     bf6:	fe e4       	ldi	r31, 0x4E	; 78
     bf8:	31 97       	sbiw	r30, 0x01	; 1
     bfa:	f1 f7       	brne	.-4      	; 0xbf8 <__stack+0x2f9>
     bfc:	00 c0       	rjmp	.+0      	; 0xbfe <__stack+0x2ff>
     bfe:	00 00       	nop
     c00:	49 81       	ldd	r20, Y+1	; 0x01
     c02:	5a 81       	ldd	r21, Y+2	; 0x02
     c04:	1b c0       	rjmp	.+54     	; 0xc3c <__stack+0x33d>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     c06:	8d 31       	cpi	r24, 0x1D	; 29
     c08:	c8 f4       	brcc	.+50     	; 0xc3c <__stack+0x33d>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	fc 01       	movw	r30, r24
     c0e:	ee 0f       	add	r30, r30
     c10:	ff 1f       	adc	r31, r31
     c12:	ee 0f       	add	r30, r30
     c14:	ff 1f       	adc	r31, r31
     c16:	ee 0f       	add	r30, r30
     c18:	ff 1f       	adc	r31, r31
     c1a:	e8 1b       	sub	r30, r24
     c1c:	f9 0b       	sbc	r31, r25
     c1e:	ec 0d       	add	r30, r12
     c20:	fd 1d       	adc	r31, r13
     c22:	a2 81       	ldd	r26, Z+2	; 0x02
     c24:	b3 81       	ldd	r27, Z+3	; 0x03
     c26:	2c 91       	ld	r18, X
     c28:	cb 01       	movw	r24, r22
     c2a:	06 80       	ldd	r0, Z+6	; 0x06
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <__stack+0x333>
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	0a 94       	dec	r0
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <__stack+0x32f>
     c36:	80 95       	com	r24
     c38:	82 23       	and	r24, r18
     c3a:	8c 93       	st	X, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     c3c:	da 01       	movw	r26, r20
     c3e:	8d 91       	ld	r24, X+
     c40:	ad 01       	movw	r20, r26
     c42:	88 23       	and	r24, r24
     c44:	01 f7       	brne	.-64     	; 0xc06 <__stack+0x307>
     c46:	4d 81       	ldd	r20, Y+5	; 0x05
     c48:	5e 81       	ldd	r21, Y+6	; 0x06
     c4a:	1b c0       	rjmp	.+54     	; 0xc82 <__stack+0x383>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     c4c:	8d 31       	cpi	r24, 0x1D	; 29
     c4e:	c8 f4       	brcc	.+50     	; 0xc82 <__stack+0x383>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	fc 01       	movw	r30, r24
     c54:	ee 0f       	add	r30, r30
     c56:	ff 1f       	adc	r31, r31
     c58:	ee 0f       	add	r30, r30
     c5a:	ff 1f       	adc	r31, r31
     c5c:	ee 0f       	add	r30, r30
     c5e:	ff 1f       	adc	r31, r31
     c60:	e8 1b       	sub	r30, r24
     c62:	f9 0b       	sbc	r31, r25
     c64:	ec 0d       	add	r30, r12
     c66:	fd 1d       	adc	r31, r13
     c68:	a2 81       	ldd	r26, Z+2	; 0x02
     c6a:	b3 81       	ldd	r27, Z+3	; 0x03
     c6c:	2c 91       	ld	r18, X
     c6e:	cb 01       	movw	r24, r22
     c70:	06 80       	ldd	r0, Z+6	; 0x06
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <__stack+0x379>
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	0a 94       	dec	r0
     c7a:	e2 f7       	brpl	.-8      	; 0xc74 <__stack+0x375>
     c7c:	80 95       	com	r24
     c7e:	82 23       	and	r24, r18
     c80:	8c 93       	st	X, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     c82:	fa 01       	movw	r30, r20
     c84:	81 91       	ld	r24, Z+
     c86:	af 01       	movw	r20, r30
     c88:	88 23       	and	r24, r24
     c8a:	01 f7       	brne	.-64     	; 0xc4c <__stack+0x34d>
     c8c:	0f 2e       	mov	r0, r31
     c8e:	f5 e0       	ldi	r31, 0x05	; 5
     c90:	ef 2e       	mov	r14, r31
     c92:	ff 24       	eor	r15, r15
     c94:	f0 2d       	mov	r31, r0
     c96:	ae 0c       	add	r10, r14
     c98:	bf 1c       	adc	r11, r15
/* Display data                                                         */
/************************************************************************/
static inline void Display(uint8_t *p)
{
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
     c9a:	46 14       	cp	r4, r6
     c9c:	57 04       	cpc	r5, r7
     c9e:	31 f0       	breq	.+12     	; 0xcac <__stack+0x3ad>
}

/************************************************************************/
/* drop down effect                                                     */
/************************************************************************/
void FallOut(uint8_t *p, uint8_t time)
     ca0:	a5 01       	movw	r20, r10
     ca2:	44 50       	subi	r20, 0x04	; 4
     ca4:	50 40       	sbci	r21, 0x00	; 0
     ca6:	e9 80       	ldd	r14, Y+1	; 0x01
     ca8:	fa 80       	ldd	r15, Y+2	; 0x02
     caa:	22 cf       	rjmp	.-444    	; 0xaf0 <__stack+0x1f1>
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
		_delay_ms(5);
		Clear();
	}
	delayms = 1;
     cac:	fa 88       	ldd	r15, Y+18	; 0x12
     cae:	f0 92 00 01 	sts	0x0100, r15
     cb2:	2b 89       	ldd	r18, Y+19	; 0x13
     cb4:	20 93 01 01 	sts	0x0101, r18
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     cb8:	48 85       	ldd	r20, Y+8	; 0x08
     cba:	4f 5f       	subi	r20, 0xFF	; 255
     cbc:	48 87       	std	Y+8, r20	; 0x08
     cbe:	5f 85       	ldd	r21, Y+15	; 0x0f
     cc0:	45 17       	cp	r20, r21
     cc2:	81 f4       	brne	.+32     	; 0xce4 <__stack+0x3e5>
     cc4:	18 c0       	rjmp	.+48     	; 0xcf6 <__stack+0x3f7>
     cc6:	18 86       	std	Y+8, r1	; 0x08
     cc8:	8f 89       	ldd	r24, Y+23	; 0x17
     cca:	88 8b       	std	Y+16, r24	; 0x10
     ccc:	98 8d       	ldd	r25, Y+24	; 0x18
     cce:	99 8b       	std	Y+17, r25	; 0x11
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
     cd0:	aa 85       	ldd	r26, Y+10	; 0x0a
     cd2:	ab 83       	std	Y+3, r26	; 0x03
     cd4:	bb 85       	ldd	r27, Y+11	; 0x0b
     cd6:	bc 83       	std	Y+4, r27	; 0x04
     cd8:	22 24       	eor	r2, r2
     cda:	33 24       	eor	r3, r3
     cdc:	ec 85       	ldd	r30, Y+12	; 0x0c
     cde:	ed 83       	std	Y+5, r30	; 0x05
     ce0:	fd 85       	ldd	r31, Y+13	; 0x0d
     ce2:	fe 83       	std	Y+6, r31	; 0x06
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     ce4:	0f 2e       	mov	r0, r31
     ce6:	f0 e9       	ldi	r31, 0x90	; 144
     ce8:	af 2e       	mov	r10, r31
     cea:	f2 e0       	ldi	r31, 0x02	; 2
     cec:	bf 2e       	mov	r11, r31
     cee:	f0 2d       	mov	r31, r0
     cf0:	68 88       	ldd	r6, Y+16	; 0x10
     cf2:	79 88       	ldd	r7, Y+17	; 0x11
     cf4:	d5 cf       	rjmp	.-86     	; 0xca0 <__stack+0x3a1>
void FallOut(uint8_t *p, uint8_t time)
{
	uint8_t *bf = buffer;
	uint8_t index, step = 0;
	HoldDisplay(p, 20);
	for(step = 0; step <5 ; step++)
     cf6:	2c 89       	ldd	r18, Y+20	; 0x14
     cf8:	2f 5f       	subi	r18, 0xFF	; 255
     cfa:	2c 8b       	std	Y+20, r18	; 0x14
     cfc:	25 30       	cpi	r18, 0x05	; 5
     cfe:	09 f5       	brne	.+66     	; 0xd42 <__stack+0x443>
     d00:	3a c1       	rjmp	.+628    	; 0xf76 <__stack+0x677>
     d02:	4d 84       	ldd	r4, Y+13	; 0x0d
     d04:	5e 84       	ldd	r5, Y+14	; 0x0e
     d06:	4c 87       	std	Y+12, r20	; 0x0c
     d08:	3d 87       	std	Y+13, r19	; 0x0d
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     d0a:	1c 8a       	std	Y+20, r1	; 0x14
}

/************************************************************************/
/* drop down effect                                                     */
/************************************************************************/
void FallOut(uint8_t *p, uint8_t time)
     d0c:	4d 89       	ldd	r20, Y+21	; 0x15
     d0e:	5e 89       	ldd	r21, Y+22	; 0x16
     d10:	4c 5e       	subi	r20, 0xEC	; 236
     d12:	5f 4f       	sbci	r21, 0xFF	; 255
     d14:	5e 8b       	std	Y+22, r21	; 0x16
     d16:	4d 8b       	std	Y+21, r20	; 0x15
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     d18:	0f 2e       	mov	r0, r31
     d1a:	fe eb       	ldi	r31, 0xBE	; 190
     d1c:	cf 2e       	mov	r12, r31
     d1e:	f1 e0       	ldi	r31, 0x01	; 1
     d20:	df 2e       	mov	r13, r31
     d22:	f0 2d       	mov	r31, r0
     d24:	61 e0       	ldi	r22, 0x01	; 1
     d26:	70 e0       	ldi	r23, 0x00	; 0
}

inline void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
     d28:	00 ec       	ldi	r16, 0xC0	; 192
     d2a:	10 e0       	ldi	r17, 0x00	; 0
	/* Put data into buffer, sends the data */
	UDR0 = data;
     d2c:	0f 2e       	mov	r0, r31
     d2e:	f6 ec       	ldi	r31, 0xC6	; 198
     d30:	8f 2e       	mov	r8, r31
     d32:	99 24       	eor	r9, r9
     d34:	f0 2d       	mov	r31, r0
     d36:	6a 8b       	std	Y+18, r22	; 0x12
     d38:	7b 8b       	std	Y+19, r23	; 0x13
}

/************************************************************************/
/* drop down effect                                                     */
/************************************************************************/
void FallOut(uint8_t *p, uint8_t time)
     d3a:	59 8d       	ldd	r21, Y+25	; 0x19
     d3c:	59 83       	std	Y+1, r21	; 0x01
     d3e:	89 85       	ldd	r24, Y+9	; 0x09
     d40:	8a 83       	std	Y+2, r24	; 0x02
{
	uint8_t *bf = buffer;
	uint8_t index, step = 0;
	HoldDisplay(p, 20);
	for(step = 0; step <5 ; step++)
     d42:	ac e8       	ldi	r26, 0x8C	; 140
     d44:	b2 e0       	ldi	r27, 0x02	; 2
}

/************************************************************************/
/* drop down effect                                                     */
/************************************************************************/
void FallOut(uint8_t *p, uint8_t time)
     d46:	4d 89       	ldd	r20, Y+21	; 0x15
     d48:	5e 89       	ldd	r21, Y+22	; 0x16
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	9c 89       	ldd	r25, Y+20	; 0x14
     d4e:	79 ce       	rjmp	.-782    	; 0xa42 <__stack+0x143>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     d50:	8d 31       	cpi	r24, 0x1D	; 29
     d52:	c8 f4       	brcc	.+50     	; 0xd86 <__stack+0x487>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	fc 01       	movw	r30, r24
     d58:	ee 0f       	add	r30, r30
     d5a:	ff 1f       	adc	r31, r31
     d5c:	ee 0f       	add	r30, r30
     d5e:	ff 1f       	adc	r31, r31
     d60:	ee 0f       	add	r30, r30
     d62:	ff 1f       	adc	r31, r31
     d64:	e8 1b       	sub	r30, r24
     d66:	f9 0b       	sbc	r31, r25
     d68:	ee 0d       	add	r30, r14
     d6a:	ff 1d       	adc	r31, r15
     d6c:	a2 81       	ldd	r26, Z+2	; 0x02
     d6e:	b3 81       	ldd	r27, Z+3	; 0x03
     d70:	2c 91       	ld	r18, X
     d72:	cb 01       	movw	r24, r22
     d74:	06 80       	ldd	r0, Z+6	; 0x06
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <__stack+0x47d>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	0a 94       	dec	r0
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <__stack+0x479>
     d80:	80 95       	com	r24
     d82:	82 23       	and	r24, r18
     d84:	8c 93       	st	X, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     d86:	d6 01       	movw	r26, r12
     d88:	8d 91       	ld	r24, X+
     d8a:	6d 01       	movw	r12, r26
     d8c:	88 23       	and	r24, r24
     d8e:	01 f7       	brne	.-64     	; 0xd50 <__stack+0x451>
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     d90:	2b 9a       	sbi	0x05, 3	; 5
     d92:	65 01       	movw	r12, r10
     d94:	fa 01       	movw	r30, r20
	for(index=0; index<5; index++){
		pinsMultiWrite(plex_pins, LOW);
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
     d96:	91 91       	ld	r25, Z+
}

inline void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
     d98:	d8 01       	movw	r26, r16
     d9a:	8c 91       	ld	r24, X
     d9c:	85 ff       	sbrs	r24, 5
     d9e:	fc cf       	rjmp	.-8      	; 0xd98 <__stack+0x499>
	/* Put data into buffer, sends the data */
	UDR0 = data;
     da0:	d4 01       	movw	r26, r8
     da2:	9c 93       	st	X, r25
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
		pinsMultiWrite(plex_pins, LOW);
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
     da4:	ec 15       	cp	r30, r12
     da6:	fd 05       	cpc	r31, r13
     da8:	b1 f7       	brne	.-20     	; 0xd96 <__stack+0x497>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     daa:	2b 98       	cbi	0x05, 3	; 5
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
     dac:	1c 99       	sbic	0x03, 4	; 3
     dae:	fe cf       	rjmp	.-4      	; 0xdac <__stack+0x4ad>
     db0:	aa 85       	ldd	r26, Y+10	; 0x0a
     db2:	bb 85       	ldd	r27, Y+11	; 0x0b
     db4:	a1 01       	movw	r20, r2
		///////////////////////////////////////////////////////
		for(bit = 0; bit < 8 ; bit++)
			pinWrite(int_data_pins[bit], (*p & (1  << bit)));
     db6:	8d 91       	ld	r24, X+
     db8:	f6 01       	movw	r30, r12
     dba:	90 81       	ld	r25, Z
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     dbc:	8d 31       	cpi	r24, 0x1D	; 29
     dbe:	08 f0       	brcs	.+2      	; 0xdc2 <__stack+0x4c3>
     dc0:	52 c0       	rjmp	.+164    	; 0xe66 <__stack+0x567>
     dc2:	fb 01       	movw	r30, r22
     dc4:	04 2e       	mov	r0, r20
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <__stack+0x4cd>
     dc8:	ee 0f       	add	r30, r30
     dca:	ff 1f       	adc	r31, r31
     dcc:	0a 94       	dec	r0
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <__stack+0x4c9>
     dd0:	9f 01       	movw	r18, r30
     dd2:	29 23       	and	r18, r25
		if (value) {
     dd4:	21 f1       	breq	.+72     	; 0xe1e <__stack+0x51f>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	fc 01       	movw	r30, r24
     dda:	ee 0f       	add	r30, r30
     ddc:	ff 1f       	adc	r31, r31
     dde:	ee 0f       	add	r30, r30
     de0:	ff 1f       	adc	r31, r31
     de2:	ee 0f       	add	r30, r30
     de4:	ff 1f       	adc	r31, r31
     de6:	e8 1b       	sub	r30, r24
     de8:	f9 0b       	sbc	r31, r25
     dea:	cf 01       	movw	r24, r30
     dec:	8e 0d       	add	r24, r14
     dee:	9f 1d       	adc	r25, r15
     df0:	9e 8b       	std	Y+22, r25	; 0x16
     df2:	8d 8b       	std	Y+21, r24	; 0x15
     df4:	fc 01       	movw	r30, r24
     df6:	02 80       	ldd	r0, Z+2	; 0x02
     df8:	f3 81       	ldd	r31, Z+3	; 0x03
     dfa:	e0 2d       	mov	r30, r0
     dfc:	ff 83       	std	Y+7, r31	; 0x07
     dfe:	ee 83       	std	Y+6, r30	; 0x06
     e00:	20 81       	ld	r18, Z
     e02:	cb 01       	movw	r24, r22
     e04:	ed 89       	ldd	r30, Y+21	; 0x15
     e06:	fe 89       	ldd	r31, Y+22	; 0x16
     e08:	06 80       	ldd	r0, Z+6	; 0x06
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <__stack+0x511>
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	0a 94       	dec	r0
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <__stack+0x50d>
     e14:	82 2b       	or	r24, r18
     e16:	ee 81       	ldd	r30, Y+6	; 0x06
     e18:	ff 81       	ldd	r31, Y+7	; 0x07
     e1a:	80 83       	st	Z, r24
     e1c:	24 c0       	rjmp	.+72     	; 0xe66 <__stack+0x567>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	fc 01       	movw	r30, r24
     e22:	ee 0f       	add	r30, r30
     e24:	ff 1f       	adc	r31, r31
     e26:	ee 0f       	add	r30, r30
     e28:	ff 1f       	adc	r31, r31
     e2a:	ee 0f       	add	r30, r30
     e2c:	ff 1f       	adc	r31, r31
     e2e:	e8 1b       	sub	r30, r24
     e30:	f9 0b       	sbc	r31, r25
     e32:	cf 01       	movw	r24, r30
     e34:	8e 0d       	add	r24, r14
     e36:	9f 1d       	adc	r25, r15
     e38:	9e 8b       	std	Y+22, r25	; 0x16
     e3a:	8d 8b       	std	Y+21, r24	; 0x15
     e3c:	fc 01       	movw	r30, r24
     e3e:	02 80       	ldd	r0, Z+2	; 0x02
     e40:	f3 81       	ldd	r31, Z+3	; 0x03
     e42:	e0 2d       	mov	r30, r0
     e44:	ff 83       	std	Y+7, r31	; 0x07
     e46:	ee 83       	std	Y+6, r30	; 0x06
     e48:	20 81       	ld	r18, Z
     e4a:	cb 01       	movw	r24, r22
     e4c:	ed 89       	ldd	r30, Y+21	; 0x15
     e4e:	fe 89       	ldd	r31, Y+22	; 0x16
     e50:	06 80       	ldd	r0, Z+6	; 0x06
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <__stack+0x559>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <__stack+0x555>
     e5c:	80 95       	com	r24
     e5e:	82 23       	and	r24, r18
     e60:	ee 81       	ldd	r30, Y+6	; 0x06
     e62:	ff 81       	ldd	r31, Y+7	; 0x07
     e64:	80 83       	st	Z, r24
     e66:	4f 5f       	subi	r20, 0xFF	; 255
     e68:	5f 4f       	sbci	r21, 0xFF	; 255
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
		///////////////////////////////////////////////////////
		for(bit = 0; bit < 8 ; bit++)
     e6a:	48 30       	cpi	r20, 0x08	; 8
     e6c:	51 05       	cpc	r21, r1
     e6e:	09 f0       	breq	.+2      	; 0xe72 <__stack+0x573>
     e70:	a2 cf       	rjmp	.-188    	; 0xdb6 <__stack+0x4b7>
			pinWrite(int_data_pins[bit], (*p & (1  << bit)));
		p++;
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
     e72:	d3 01       	movw	r26, r6
     e74:	8d 91       	ld	r24, X+
     e76:	3d 01       	movw	r6, r26
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     e78:	8d 31       	cpi	r24, 0x1D	; 29
     e7a:	c0 f4       	brcc	.+48     	; 0xeac <__stack+0x5ad>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	fc 01       	movw	r30, r24
     e80:	ee 0f       	add	r30, r30
     e82:	ff 1f       	adc	r31, r31
     e84:	ee 0f       	add	r30, r30
     e86:	ff 1f       	adc	r31, r31
     e88:	ee 0f       	add	r30, r30
     e8a:	ff 1f       	adc	r31, r31
     e8c:	e8 1b       	sub	r30, r24
     e8e:	f9 0b       	sbc	r31, r25
     e90:	ee 0d       	add	r30, r14
     e92:	ff 1d       	adc	r31, r15
     e94:	a2 81       	ldd	r26, Z+2	; 0x02
     e96:	b3 81       	ldd	r27, Z+3	; 0x03
     e98:	2c 91       	ld	r18, X
     e9a:	cb 01       	movw	r24, r22
     e9c:	06 80       	ldd	r0, Z+6	; 0x06
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <__stack+0x5a5>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <__stack+0x5a1>
     ea8:	82 2b       	or	r24, r18
     eaa:	8c 93       	st	X, r24
     eac:	ef e1       	ldi	r30, 0x1F	; 31
     eae:	fe e4       	ldi	r31, 0x4E	; 78
     eb0:	31 97       	sbiw	r30, 0x01	; 1
     eb2:	f1 f7       	brne	.-4      	; 0xeb0 <__stack+0x5b1>
     eb4:	00 c0       	rjmp	.+0      	; 0xeb6 <__stack+0x5b7>
     eb6:	00 00       	nop
     eb8:	49 81       	ldd	r20, Y+1	; 0x01
     eba:	59 85       	ldd	r21, Y+9	; 0x09
     ebc:	1b c0       	rjmp	.+54     	; 0xef4 <__stack+0x5f5>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     ebe:	8d 31       	cpi	r24, 0x1D	; 29
     ec0:	c8 f4       	brcc	.+50     	; 0xef4 <__stack+0x5f5>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	fc 01       	movw	r30, r24
     ec6:	ee 0f       	add	r30, r30
     ec8:	ff 1f       	adc	r31, r31
     eca:	ee 0f       	add	r30, r30
     ecc:	ff 1f       	adc	r31, r31
     ece:	ee 0f       	add	r30, r30
     ed0:	ff 1f       	adc	r31, r31
     ed2:	e8 1b       	sub	r30, r24
     ed4:	f9 0b       	sbc	r31, r25
     ed6:	ee 0d       	add	r30, r14
     ed8:	ff 1d       	adc	r31, r15
     eda:	a2 81       	ldd	r26, Z+2	; 0x02
     edc:	b3 81       	ldd	r27, Z+3	; 0x03
     ede:	2c 91       	ld	r18, X
     ee0:	cb 01       	movw	r24, r22
     ee2:	06 80       	ldd	r0, Z+6	; 0x06
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <__stack+0x5eb>
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	0a 94       	dec	r0
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <__stack+0x5e7>
     eee:	80 95       	com	r24
     ef0:	82 23       	and	r24, r18
     ef2:	8c 93       	st	X, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     ef4:	da 01       	movw	r26, r20
     ef6:	8d 91       	ld	r24, X+
     ef8:	ad 01       	movw	r20, r26
     efa:	88 23       	and	r24, r24
     efc:	01 f7       	brne	.-64     	; 0xebe <__stack+0x5bf>
     efe:	4c 85       	ldd	r20, Y+12	; 0x0c
     f00:	5d 85       	ldd	r21, Y+13	; 0x0d
     f02:	1b c0       	rjmp	.+54     	; 0xf3a <__stack+0x63b>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     f04:	8d 31       	cpi	r24, 0x1D	; 29
     f06:	c8 f4       	brcc	.+50     	; 0xf3a <__stack+0x63b>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	fc 01       	movw	r30, r24
     f0c:	ee 0f       	add	r30, r30
     f0e:	ff 1f       	adc	r31, r31
     f10:	ee 0f       	add	r30, r30
     f12:	ff 1f       	adc	r31, r31
     f14:	ee 0f       	add	r30, r30
     f16:	ff 1f       	adc	r31, r31
     f18:	e8 1b       	sub	r30, r24
     f1a:	f9 0b       	sbc	r31, r25
     f1c:	ee 0d       	add	r30, r14
     f1e:	ff 1d       	adc	r31, r15
     f20:	a2 81       	ldd	r26, Z+2	; 0x02
     f22:	b3 81       	ldd	r27, Z+3	; 0x03
     f24:	2c 91       	ld	r18, X
     f26:	cb 01       	movw	r24, r22
     f28:	06 80       	ldd	r0, Z+6	; 0x06
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <__stack+0x631>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	0a 94       	dec	r0
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <__stack+0x62d>
     f34:	80 95       	com	r24
     f36:	82 23       	and	r24, r18
     f38:	8c 93       	st	X, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     f3a:	fa 01       	movw	r30, r20
     f3c:	81 91       	ld	r24, Z+
     f3e:	af 01       	movw	r20, r30
     f40:	88 23       	and	r24, r24
     f42:	01 f7       	brne	.-64     	; 0xf04 <__stack+0x605>
     f44:	45 e0       	ldi	r20, 0x05	; 5
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	a4 0e       	add	r10, r20
     f4a:	b5 1e       	adc	r11, r21
/* Display data                                                         */
/************************************************************************/
static inline void Display(uint8_t *p)
{
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
     f4c:	46 14       	cp	r4, r6
     f4e:	57 04       	cpc	r5, r7
     f50:	31 f0       	breq	.+12     	; 0xf5e <__stack+0x65f>
}

/************************************************************************/
/* drop down effect                                                     */
/************************************************************************/
void FallOut(uint8_t *p, uint8_t time)
     f52:	a5 01       	movw	r20, r10
     f54:	44 50       	subi	r20, 0x04	; 4
     f56:	50 40       	sbci	r21, 0x00	; 0
     f58:	c9 80       	ldd	r12, Y+1	; 0x01
     f5a:	d9 84       	ldd	r13, Y+9	; 0x09
     f5c:	14 cf       	rjmp	.-472    	; 0xd86 <__stack+0x487>
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
		_delay_ms(5);
		Clear();
	}
	delayms = 1;
     f5e:	5b 81       	ldd	r21, Y+3	; 0x03
     f60:	50 93 00 01 	sts	0x0100, r21
     f64:	8c 81       	ldd	r24, Y+4	; 0x04
     f66:	80 93 01 01 	sts	0x0101, r24
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
     f6c:	91 50       	subi	r25, 0x01	; 1
     f6e:	9a 83       	std	Y+2, r25	; 0x02
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     f70:	99 23       	and	r25, r25
     f72:	c1 f4       	brne	.+48     	; 0xfa4 <__stack+0x6a5>
     f74:	20 c0       	rjmp	.+64     	; 0xfb6 <__stack+0x6b7>
void FallOut(uint8_t *p, uint8_t time)
{
	uint8_t *bf = buffer;
	uint8_t index, step = 0;
	HoldDisplay(p, 20);
	for(step = 0; step <5 ; step++)
     f76:	a2 e3       	ldi	r26, 0x32	; 50
     f78:	aa 83       	std	Y+2, r26	; 0x02
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     f7a:	0f 2e       	mov	r0, r31
     f7c:	fe eb       	ldi	r31, 0xBE	; 190
     f7e:	ef 2e       	mov	r14, r31
     f80:	f1 e0       	ldi	r31, 0x01	; 1
     f82:	ff 2e       	mov	r15, r31
     f84:	f0 2d       	mov	r31, r0
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	6b 83       	std	Y+3, r22	; 0x03
     f8c:	7c 83       	std	Y+4, r23	; 0x04
}

inline void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
     f8e:	00 ec       	ldi	r16, 0xC0	; 192
     f90:	10 e0       	ldi	r17, 0x00	; 0
	/* Put data into buffer, sends the data */
	UDR0 = data;
     f92:	0f 2e       	mov	r0, r31
     f94:	f6 ec       	ldi	r31, 0xC6	; 198
     f96:	8f 2e       	mov	r8, r31
     f98:	99 24       	eor	r9, r9
     f9a:	f0 2d       	mov	r31, r0
}

/************************************************************************/
/* drop down effect                                                     */
/************************************************************************/
void FallOut(uint8_t *p, uint8_t time)
     f9c:	d9 8c       	ldd	r13, Y+25	; 0x19
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
     f9e:	22 24       	eor	r2, r2
     fa0:	33 24       	eor	r3, r3
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     fa2:	d9 82       	std	Y+1, r13	; 0x01
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     fa4:	0f 2e       	mov	r0, r31
     fa6:	f0 e9       	ldi	r31, 0x90	; 144
     fa8:	af 2e       	mov	r10, r31
     faa:	f2 e0       	ldi	r31, 0x02	; 2
     fac:	bf 2e       	mov	r11, r31
     fae:	f0 2d       	mov	r31, r0
     fb0:	6f 88       	ldd	r6, Y+23	; 0x17
     fb2:	78 8c       	ldd	r7, Y+24	; 0x18
     fb4:	ce cf       	rjmp	.-100    	; 0xf52 <__stack+0x653>
			
		}
		HoldDisplay(bf, time);
	}
	HoldDisplay(bf, 50);
}
     fb6:	6b 96       	adiw	r28, 0x1b	; 27
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	df 90       	pop	r13
     fd0:	cf 90       	pop	r12
     fd2:	bf 90       	pop	r11
     fd4:	af 90       	pop	r10
     fd6:	9f 90       	pop	r9
     fd8:	8f 90       	pop	r8
     fda:	7f 90       	pop	r7
     fdc:	6f 90       	pop	r6
     fde:	5f 90       	pop	r5
     fe0:	4f 90       	pop	r4
     fe2:	3f 90       	pop	r3
     fe4:	2f 90       	pop	r2
     fe6:	08 95       	ret

00000fe8 <TypeIn>:

/************************************************************************/
/* type effect                                                          */
/************************************************************************/
void TypeIn(uint8_t *p, uint8_t time)
{
     fe8:	2f 92       	push	r2
     fea:	3f 92       	push	r3
     fec:	4f 92       	push	r4
     fee:	5f 92       	push	r5
     ff0:	6f 92       	push	r6
     ff2:	7f 92       	push	r7
     ff4:	8f 92       	push	r8
     ff6:	9f 92       	push	r9
     ff8:	af 92       	push	r10
     ffa:	bf 92       	push	r11
     ffc:	cf 92       	push	r12
     ffe:	df 92       	push	r13
    1000:	ef 92       	push	r14
    1002:	ff 92       	push	r15
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	61 97       	sbiw	r28, 0x11	; 17
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	9f 87       	std	Y+15, r25	; 0x0f
    101e:	8e 87       	std	Y+14, r24	; 0x0e
    1020:	6e 83       	std	Y+6, r22	; 0x06
}

/************************************************************************/
/* type effect                                                          */
/************************************************************************/
void TypeIn(uint8_t *p, uint8_t time)
    1022:	ec e8       	ldi	r30, 0x8C	; 140
    1024:	f2 e0       	ldi	r31, 0x02	; 2
    1026:	cf 01       	movw	r24, r30
    1028:	49 96       	adiw	r24, 0x19	; 25
/************************************************************************/
inline void InitBuffer()
{
	uint8_t *bf = buffer;
	uint8_t index = 0;
	for(index=0; index<25; index++) *bf++ = 0x00;
    102a:	11 92       	st	Z+, r1
    102c:	e8 17       	cp	r30, r24
    102e:	f9 07       	cpc	r31, r25
    1030:	e1 f7       	brne	.-8      	; 0x102a <TypeIn+0x42>
    1032:	24 e0       	ldi	r18, 0x04	; 4
    1034:	2b 87       	std	Y+11, r18	; 0x0b
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1036:	82 e0       	ldi	r24, 0x02	; 2
    1038:	91 e0       	ldi	r25, 0x01	; 1
}

/************************************************************************/
/* type effect                                                          */
/************************************************************************/
void TypeIn(uint8_t *p, uint8_t time)
    103a:	8f 83       	std	Y+7, r24	; 0x07
    103c:	98 87       	std	Y+8, r25	; 0x08
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    103e:	0f 2e       	mov	r0, r31
    1040:	fe eb       	ldi	r31, 0xBE	; 190
    1042:	cf 2e       	mov	r12, r31
    1044:	f1 e0       	ldi	r31, 0x01	; 1
    1046:	df 2e       	mov	r13, r31
    1048:	f0 2d       	mov	r31, r0
}

inline void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    104a:	00 ec       	ldi	r16, 0xC0	; 192
    104c:	10 e0       	ldi	r17, 0x00	; 0
}

/************************************************************************/
/* type effect                                                          */
/************************************************************************/
void TypeIn(uint8_t *p, uint8_t time)
    104e:	dc 01       	movw	r26, r24
    1050:	15 96       	adiw	r26, 0x05	; 5
    1052:	bc 83       	std	Y+4, r27	; 0x04
    1054:	ab 83       	std	Y+3, r26	; 0x03
    1056:	89 83       	std	Y+1, r24	; 0x01
    1058:	9a 83       	std	Y+2, r25	; 0x02
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
    105a:	0f 2e       	mov	r0, r31
    105c:	f7 e0       	ldi	r31, 0x07	; 7
    105e:	4f 2e       	mov	r4, r31
    1060:	f1 e0       	ldi	r31, 0x01	; 1
    1062:	5f 2e       	mov	r5, r31
    1064:	f0 2d       	mov	r31, r0
    1066:	4b c1       	rjmp	.+662    	; 0x12fe <TypeIn+0x316>
	uint8_t index, step, rep = 0;	
	for(step = 4; step >= 1 ; step--)
	{
		for(rep = 0; rep < 5; rep+=4)
		{
			for(index = step ; index < 25; index+=5)
    1068:	4b 85       	ldd	r20, Y+11	; 0x0b
    106a:	ac 85       	ldd	r26, Y+12	; 0x0c
    106c:	bd 85       	ldd	r27, Y+13	; 0x0d
    106e:	6e 85       	ldd	r22, Y+14	; 0x0e
    1070:	7f 85       	ldd	r23, Y+15	; 0x0f
			{
				*(bf+index) = *(p+index) &  (*(p+index) >> (4-rep));
    1072:	24 2f       	mov	r18, r20
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	fb 01       	movw	r30, r22
    1078:	e2 0f       	add	r30, r18
    107a:	f3 1f       	adc	r31, r19
    107c:	50 81       	ld	r21, Z
    107e:	24 57       	subi	r18, 0x74	; 116
    1080:	3d 4f       	sbci	r19, 0xFD	; 253
    1082:	85 2f       	mov	r24, r21
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0a 2e       	mov	r0, r26
    1088:	02 c0       	rjmp	.+4      	; 0x108e <TypeIn+0xa6>
    108a:	95 95       	asr	r25
    108c:	87 95       	ror	r24
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <TypeIn+0xa2>
    1092:	85 23       	and	r24, r21
    1094:	f9 01       	movw	r30, r18
    1096:	80 83       	st	Z, r24
	uint8_t index, step, rep = 0;	
	for(step = 4; step >= 1 ; step--)
	{
		for(rep = 0; rep < 5; rep+=4)
		{
			for(index = step ; index < 25; index+=5)
    1098:	4b 5f       	subi	r20, 0xFB	; 251
    109a:	49 31       	cpi	r20, 0x19	; 25
    109c:	50 f3       	brcs	.-44     	; 0x1072 <TypeIn+0x8a>
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    109e:	fe 81       	ldd	r31, Y+6	; 0x06
    10a0:	ff 23       	and	r31, r31
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <TypeIn+0xbe>
    10a4:	06 c1       	rjmp	.+524    	; 0x12b2 <TypeIn+0x2ca>
    10a6:	16 c1       	rjmp	.+556    	; 0x12d4 <TypeIn+0x2ec>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    10a8:	8d 31       	cpi	r24, 0x1D	; 29
    10aa:	c8 f4       	brcc	.+50     	; 0x10de <TypeIn+0xf6>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	fc 01       	movw	r30, r24
    10b0:	ee 0f       	add	r30, r30
    10b2:	ff 1f       	adc	r31, r31
    10b4:	ee 0f       	add	r30, r30
    10b6:	ff 1f       	adc	r31, r31
    10b8:	ee 0f       	add	r30, r30
    10ba:	ff 1f       	adc	r31, r31
    10bc:	e8 1b       	sub	r30, r24
    10be:	f9 0b       	sbc	r31, r25
    10c0:	ec 0d       	add	r30, r12
    10c2:	fd 1d       	adc	r31, r13
    10c4:	a2 81       	ldd	r26, Z+2	; 0x02
    10c6:	b3 81       	ldd	r27, Z+3	; 0x03
    10c8:	2c 91       	ld	r18, X
    10ca:	c7 01       	movw	r24, r14
    10cc:	06 80       	ldd	r0, Z+6	; 0x06
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <TypeIn+0xec>
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	0a 94       	dec	r0
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <TypeIn+0xe8>
    10d8:	80 95       	com	r24
    10da:	82 23       	and	r24, r18
    10dc:	8c 93       	st	X, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    10de:	db 01       	movw	r26, r22
    10e0:	8d 91       	ld	r24, X+
    10e2:	bd 01       	movw	r22, r26
    10e4:	88 23       	and	r24, r24
    10e6:	01 f7       	brne	.-64     	; 0x10a8 <TypeIn+0xc0>
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    10e8:	2b 9a       	sbi	0x05, 3	; 5
}

/************************************************************************/
/* type effect                                                          */
/************************************************************************/
void TypeIn(uint8_t *p, uint8_t time)
    10ea:	b5 01       	movw	r22, r10
    10ec:	fa 01       	movw	r30, r20
	for(index=0; index<5; index++){
		pinsMultiWrite(plex_pins, LOW);
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
    10ee:	91 91       	ld	r25, Z+
}

inline void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    10f0:	d8 01       	movw	r26, r16
    10f2:	8c 91       	ld	r24, X
    10f4:	85 ff       	sbrs	r24, 5
    10f6:	fc cf       	rjmp	.-8      	; 0x10f0 <TypeIn+0x108>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    10f8:	d4 01       	movw	r26, r8
    10fa:	9c 93       	st	X, r25
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
		pinsMultiWrite(plex_pins, LOW);
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
    10fc:	e6 17       	cp	r30, r22
    10fe:	f7 07       	cpc	r31, r23
    1100:	b1 f7       	brne	.-20     	; 0x10ee <TypeIn+0x106>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1102:	2b 98       	cbi	0x05, 3	; 5
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
    1104:	1c 99       	sbic	0x03, 4	; 3
    1106:	fe cf       	rjmp	.-4      	; 0x1104 <TypeIn+0x11c>
    1108:	a1 01       	movw	r20, r2
    110a:	59 8a       	std	Y+17, r5	; 0x11
    110c:	48 8a       	std	Y+16, r4	; 0x10
		///////////////////////////////////////////////////////
		for(bit = 0; bit < 8 ; bit++)
			pinWrite(int_data_pins[bit], (*p & (1  << bit)));
    110e:	e8 89       	ldd	r30, Y+16	; 0x10
    1110:	f9 89       	ldd	r31, Y+17	; 0x11
    1112:	21 91       	ld	r18, Z+
    1114:	f9 8b       	std	Y+17, r31	; 0x11
    1116:	e8 8b       	std	Y+16, r30	; 0x10
    1118:	db 01       	movw	r26, r22
    111a:	3c 91       	ld	r19, X
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    111c:	2d 31       	cpi	r18, 0x1D	; 29
    111e:	08 f0       	brcs	.+2      	; 0x1122 <TypeIn+0x13a>
    1120:	3e c0       	rjmp	.+124    	; 0x119e <TypeIn+0x1b6>
    1122:	f7 01       	movw	r30, r14
    1124:	04 2e       	mov	r0, r20
    1126:	02 c0       	rjmp	.+4      	; 0x112c <TypeIn+0x144>
    1128:	ee 0f       	add	r30, r30
    112a:	ff 1f       	adc	r31, r31
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <TypeIn+0x140>
    1130:	cf 01       	movw	r24, r30
    1132:	83 23       	and	r24, r19
		if (value) {
    1134:	d1 f0       	breq	.+52     	; 0x116a <TypeIn+0x182>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1136:	82 2f       	mov	r24, r18
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	fc 01       	movw	r30, r24
    113c:	ee 0f       	add	r30, r30
    113e:	ff 1f       	adc	r31, r31
    1140:	ee 0f       	add	r30, r30
    1142:	ff 1f       	adc	r31, r31
    1144:	ee 0f       	add	r30, r30
    1146:	ff 1f       	adc	r31, r31
    1148:	e8 1b       	sub	r30, r24
    114a:	f9 0b       	sbc	r31, r25
    114c:	ec 0d       	add	r30, r12
    114e:	fd 1d       	adc	r31, r13
    1150:	a2 81       	ldd	r26, Z+2	; 0x02
    1152:	b3 81       	ldd	r27, Z+3	; 0x03
    1154:	2c 91       	ld	r18, X
    1156:	c7 01       	movw	r24, r14
    1158:	06 80       	ldd	r0, Z+6	; 0x06
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <TypeIn+0x178>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	0a 94       	dec	r0
    1162:	e2 f7       	brpl	.-8      	; 0x115c <TypeIn+0x174>
    1164:	82 2b       	or	r24, r18
    1166:	8c 93       	st	X, r24
    1168:	1a c0       	rjmp	.+52     	; 0x119e <TypeIn+0x1b6>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    116a:	82 2f       	mov	r24, r18
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	fc 01       	movw	r30, r24
    1170:	ee 0f       	add	r30, r30
    1172:	ff 1f       	adc	r31, r31
    1174:	ee 0f       	add	r30, r30
    1176:	ff 1f       	adc	r31, r31
    1178:	ee 0f       	add	r30, r30
    117a:	ff 1f       	adc	r31, r31
    117c:	e8 1b       	sub	r30, r24
    117e:	f9 0b       	sbc	r31, r25
    1180:	ec 0d       	add	r30, r12
    1182:	fd 1d       	adc	r31, r13
    1184:	a2 81       	ldd	r26, Z+2	; 0x02
    1186:	b3 81       	ldd	r27, Z+3	; 0x03
    1188:	2c 91       	ld	r18, X
    118a:	c7 01       	movw	r24, r14
    118c:	06 80       	ldd	r0, Z+6	; 0x06
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <TypeIn+0x1ac>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	0a 94       	dec	r0
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <TypeIn+0x1a8>
    1198:	80 95       	com	r24
    119a:	82 23       	and	r24, r18
    119c:	8c 93       	st	X, r24
    119e:	4f 5f       	subi	r20, 0xFF	; 255
    11a0:	5f 4f       	sbci	r21, 0xFF	; 255
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
		///////////////////////////////////////////////////////
		for(bit = 0; bit < 8 ; bit++)
    11a2:	48 30       	cpi	r20, 0x08	; 8
    11a4:	51 05       	cpc	r21, r1
    11a6:	09 f0       	breq	.+2      	; 0x11aa <TypeIn+0x1c2>
    11a8:	b2 cf       	rjmp	.-156    	; 0x110e <TypeIn+0x126>
			pinWrite(int_data_pins[bit], (*p & (1  << bit)));
		p++;
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
    11aa:	d3 01       	movw	r26, r6
    11ac:	8d 91       	ld	r24, X+
    11ae:	3d 01       	movw	r6, r26
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    11b0:	8d 31       	cpi	r24, 0x1D	; 29
    11b2:	c0 f4       	brcc	.+48     	; 0x11e4 <TypeIn+0x1fc>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	fc 01       	movw	r30, r24
    11b8:	ee 0f       	add	r30, r30
    11ba:	ff 1f       	adc	r31, r31
    11bc:	ee 0f       	add	r30, r30
    11be:	ff 1f       	adc	r31, r31
    11c0:	ee 0f       	add	r30, r30
    11c2:	ff 1f       	adc	r31, r31
    11c4:	e8 1b       	sub	r30, r24
    11c6:	f9 0b       	sbc	r31, r25
    11c8:	ec 0d       	add	r30, r12
    11ca:	fd 1d       	adc	r31, r13
    11cc:	a2 81       	ldd	r26, Z+2	; 0x02
    11ce:	b3 81       	ldd	r27, Z+3	; 0x03
    11d0:	2c 91       	ld	r18, X
    11d2:	c7 01       	movw	r24, r14
    11d4:	06 80       	ldd	r0, Z+6	; 0x06
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <TypeIn+0x1f4>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <TypeIn+0x1f0>
    11e0:	82 2b       	or	r24, r18
    11e2:	8c 93       	st	X, r24
    11e4:	ef e1       	ldi	r30, 0x1F	; 31
    11e6:	fe e4       	ldi	r31, 0x4E	; 78
    11e8:	31 97       	sbiw	r30, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <TypeIn+0x200>
    11ec:	00 c0       	rjmp	.+0      	; 0x11ee <TypeIn+0x206>
    11ee:	00 00       	nop
    11f0:	49 81       	ldd	r20, Y+1	; 0x01
    11f2:	5a 81       	ldd	r21, Y+2	; 0x02
    11f4:	1b c0       	rjmp	.+54     	; 0x122c <TypeIn+0x244>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    11f6:	8d 31       	cpi	r24, 0x1D	; 29
    11f8:	c8 f4       	brcc	.+50     	; 0x122c <TypeIn+0x244>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	fc 01       	movw	r30, r24
    11fe:	ee 0f       	add	r30, r30
    1200:	ff 1f       	adc	r31, r31
    1202:	ee 0f       	add	r30, r30
    1204:	ff 1f       	adc	r31, r31
    1206:	ee 0f       	add	r30, r30
    1208:	ff 1f       	adc	r31, r31
    120a:	e8 1b       	sub	r30, r24
    120c:	f9 0b       	sbc	r31, r25
    120e:	ec 0d       	add	r30, r12
    1210:	fd 1d       	adc	r31, r13
    1212:	a2 81       	ldd	r26, Z+2	; 0x02
    1214:	b3 81       	ldd	r27, Z+3	; 0x03
    1216:	2c 91       	ld	r18, X
    1218:	c7 01       	movw	r24, r14
    121a:	06 80       	ldd	r0, Z+6	; 0x06
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <TypeIn+0x23a>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	0a 94       	dec	r0
    1224:	e2 f7       	brpl	.-8      	; 0x121e <TypeIn+0x236>
    1226:	80 95       	com	r24
    1228:	82 23       	and	r24, r18
    122a:	8c 93       	st	X, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    122c:	da 01       	movw	r26, r20
    122e:	8d 91       	ld	r24, X+
    1230:	ad 01       	movw	r20, r26
    1232:	88 23       	and	r24, r24
    1234:	01 f7       	brne	.-64     	; 0x11f6 <TypeIn+0x20e>
    1236:	a2 01       	movw	r20, r4
    1238:	1b c0       	rjmp	.+54     	; 0x1270 <TypeIn+0x288>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    123a:	8d 31       	cpi	r24, 0x1D	; 29
    123c:	c8 f4       	brcc	.+50     	; 0x1270 <TypeIn+0x288>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	fc 01       	movw	r30, r24
    1242:	ee 0f       	add	r30, r30
    1244:	ff 1f       	adc	r31, r31
    1246:	ee 0f       	add	r30, r30
    1248:	ff 1f       	adc	r31, r31
    124a:	ee 0f       	add	r30, r30
    124c:	ff 1f       	adc	r31, r31
    124e:	e8 1b       	sub	r30, r24
    1250:	f9 0b       	sbc	r31, r25
    1252:	ec 0d       	add	r30, r12
    1254:	fd 1d       	adc	r31, r13
    1256:	a2 81       	ldd	r26, Z+2	; 0x02
    1258:	b3 81       	ldd	r27, Z+3	; 0x03
    125a:	2c 91       	ld	r18, X
    125c:	c7 01       	movw	r24, r14
    125e:	06 80       	ldd	r0, Z+6	; 0x06
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <TypeIn+0x27e>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <TypeIn+0x27a>
    126a:	80 95       	com	r24
    126c:	82 23       	and	r24, r18
    126e:	8c 93       	st	X, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1270:	fa 01       	movw	r30, r20
    1272:	81 91       	ld	r24, Z+
    1274:	af 01       	movw	r20, r30
    1276:	88 23       	and	r24, r24
    1278:	01 f7       	brne	.-64     	; 0x123a <TypeIn+0x252>
    127a:	25 e0       	ldi	r18, 0x05	; 5
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	a2 0e       	add	r10, r18
    1280:	b3 1e       	adc	r11, r19
/* Display data                                                         */
/************************************************************************/
static inline void Display(uint8_t *p)
{
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	9c 81       	ldd	r25, Y+4	; 0x04
    1286:	68 16       	cp	r6, r24
    1288:	79 06       	cpc	r7, r25
    128a:	31 f0       	breq	.+12     	; 0x1298 <TypeIn+0x2b0>
}

/************************************************************************/
/* type effect                                                          */
/************************************************************************/
void TypeIn(uint8_t *p, uint8_t time)
    128c:	a5 01       	movw	r20, r10
    128e:	44 50       	subi	r20, 0x04	; 4
    1290:	50 40       	sbci	r21, 0x00	; 0
    1292:	69 81       	ldd	r22, Y+1	; 0x01
    1294:	7a 81       	ldd	r23, Y+2	; 0x02
    1296:	23 cf       	rjmp	.-442    	; 0x10de <TypeIn+0xf6>
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
		_delay_ms(5);
		Clear();
	}
	delayms = 1;
    1298:	99 85       	ldd	r25, Y+9	; 0x09
    129a:	90 93 00 01 	sts	0x0100, r25
    129e:	aa 85       	ldd	r26, Y+10	; 0x0a
    12a0:	a0 93 01 01 	sts	0x0101, r26
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    12a4:	bd 81       	ldd	r27, Y+5	; 0x05
    12a6:	bf 5f       	subi	r27, 0xFF	; 255
    12a8:	bd 83       	std	Y+5, r27	; 0x05
    12aa:	ee 81       	ldd	r30, Y+6	; 0x06
    12ac:	be 17       	cp	r27, r30
    12ae:	49 f4       	brne	.+18     	; 0x12c2 <TypeIn+0x2da>
    12b0:	11 c0       	rjmp	.+34     	; 0x12d4 <TypeIn+0x2ec>
    12b2:	1d 82       	std	Y+5, r1	; 0x05
inline void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
	/* Put data into buffer, sends the data */
	UDR0 = data;
    12b4:	0f 2e       	mov	r0, r31
    12b6:	f6 ec       	ldi	r31, 0xC6	; 198
    12b8:	8f 2e       	mov	r8, r31
    12ba:	99 24       	eor	r9, r9
    12bc:	f0 2d       	mov	r31, r0
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
    12be:	22 24       	eor	r2, r2
    12c0:	33 24       	eor	r3, r3
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    12c2:	6f 80       	ldd	r6, Y+7	; 0x07
    12c4:	78 84       	ldd	r7, Y+8	; 0x08
    12c6:	0f 2e       	mov	r0, r31
    12c8:	f0 e9       	ldi	r31, 0x90	; 144
    12ca:	af 2e       	mov	r10, r31
    12cc:	f2 e0       	ldi	r31, 0x02	; 2
    12ce:	bf 2e       	mov	r11, r31
    12d0:	f0 2d       	mov	r31, r0
    12d2:	dc cf       	rjmp	.-72     	; 0x128c <TypeIn+0x2a4>
}

/************************************************************************/
/* type effect                                                          */
/************************************************************************/
void TypeIn(uint8_t *p, uint8_t time)
    12d4:	2c 85       	ldd	r18, Y+12	; 0x0c
    12d6:	3d 85       	ldd	r19, Y+13	; 0x0d
    12d8:	24 50       	subi	r18, 0x04	; 4
    12da:	30 40       	sbci	r19, 0x00	; 0
    12dc:	3d 87       	std	Y+13, r19	; 0x0d
    12de:	2c 87       	std	Y+12, r18	; 0x0c
	InitBuffer();
	uint8_t *bf = buffer;
	uint8_t index, step, rep = 0;	
	for(step = 4; step >= 1 ; step--)
	{
		for(rep = 0; rep < 5; rep+=4)
    12e0:	8f ef       	ldi	r24, 0xFF	; 255
    12e2:	2c 3f       	cpi	r18, 0xFC	; 252
    12e4:	38 07       	cpc	r19, r24
    12e6:	29 f0       	breq	.+10     	; 0x12f2 <TypeIn+0x30a>
		{
			for(index = step ; index < 25; index+=5)
    12e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    12ea:	99 31       	cpi	r25, 0x19	; 25
    12ec:	08 f4       	brcc	.+2      	; 0x12f0 <TypeIn+0x308>
    12ee:	bc ce       	rjmp	.-648    	; 0x1068 <TypeIn+0x80>
    12f0:	d6 ce       	rjmp	.-596    	; 0x109e <TypeIn+0xb6>
    12f2:	ab 85       	ldd	r26, Y+11	; 0x0b
    12f4:	a1 50       	subi	r26, 0x01	; 1
    12f6:	ab 87       	std	Y+11, r26	; 0x0b
void TypeIn(uint8_t *p, uint8_t time)
{
	InitBuffer();
	uint8_t *bf = buffer;
	uint8_t index, step, rep = 0;	
	for(step = 4; step >= 1 ; step--)
    12f8:	aa 23       	and	r26, r26
    12fa:	09 f4       	brne	.+2      	; 0x12fe <TypeIn+0x316>
    12fc:	1f c1       	rjmp	.+574    	; 0x153c <TypeIn+0x554>
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    12fe:	e4 e0       	ldi	r30, 0x04	; 4
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	fd 87       	std	Y+13, r31	; 0x0d
    1304:	ec 87       	std	Y+12, r30	; 0x0c
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1306:	ee 24       	eor	r14, r14
    1308:	ff 24       	eor	r15, r15
    130a:	e3 94       	inc	r14
    130c:	e9 86       	std	Y+9, r14	; 0x09
    130e:	fa 86       	std	Y+10, r15	; 0x0a
    1310:	eb cf       	rjmp	.-42     	; 0x12e8 <TypeIn+0x300>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1312:	8d 31       	cpi	r24, 0x1D	; 29
    1314:	f8 f4       	brcc	.+62     	; 0x1354 <TypeIn+0x36c>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	fc 01       	movw	r30, r24
    131a:	ee 0f       	add	r30, r30
    131c:	ff 1f       	adc	r31, r31
    131e:	ee 0f       	add	r30, r30
    1320:	ff 1f       	adc	r31, r31
    1322:	ee 0f       	add	r30, r30
    1324:	ff 1f       	adc	r31, r31
    1326:	e8 1b       	sub	r30, r24
    1328:	f9 0b       	sbc	r31, r25
    132a:	cf 01       	movw	r24, r30
    132c:	8e 0d       	add	r24, r14
    132e:	9f 1d       	adc	r25, r15
    1330:	fc 01       	movw	r30, r24
    1332:	c2 80       	ldd	r12, Z+2	; 0x02
    1334:	d3 80       	ldd	r13, Z+3	; 0x03
    1336:	f6 01       	movw	r30, r12
    1338:	20 81       	ld	r18, Z
    133a:	1b 01       	movw	r2, r22
    133c:	fc 01       	movw	r30, r24
    133e:	06 80       	ldd	r0, Z+6	; 0x06
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <TypeIn+0x35e>
    1342:	22 0c       	add	r2, r2
    1344:	33 1c       	adc	r3, r3
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <TypeIn+0x35a>
    134a:	c1 01       	movw	r24, r2
    134c:	80 95       	com	r24
    134e:	82 23       	and	r24, r18
    1350:	f6 01       	movw	r30, r12
    1352:	80 83       	st	Z, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1354:	8d 91       	ld	r24, X+
    1356:	88 23       	and	r24, r24
    1358:	e1 f6       	brne	.-72     	; 0x1312 <TypeIn+0x32a>
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    135a:	2b 9a       	sbi	0x05, 3	; 5
}

/************************************************************************/
/* type effect                                                          */
/************************************************************************/
void TypeIn(uint8_t *p, uint8_t time)
    135c:	64 01       	movw	r12, r8
    135e:	fa 01       	movw	r30, r20
	for(index=0; index<5; index++){
		pinsMultiWrite(plex_pins, LOW);
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
    1360:	91 91       	ld	r25, Z+
}

inline void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1362:	d8 01       	movw	r26, r16
    1364:	8c 91       	ld	r24, X
    1366:	85 ff       	sbrs	r24, 5
    1368:	fc cf       	rjmp	.-8      	; 0x1362 <TypeIn+0x37a>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    136a:	d5 01       	movw	r26, r10
    136c:	9c 93       	st	X, r25
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
		pinsMultiWrite(plex_pins, LOW);
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
    136e:	ec 15       	cp	r30, r12
    1370:	fd 05       	cpc	r31, r13
    1372:	b1 f7       	brne	.-20     	; 0x1360 <TypeIn+0x378>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1374:	2b 98       	cbi	0x05, 3	; 5
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
    1376:	1c 99       	sbic	0x03, 4	; 3
    1378:	fe cf       	rjmp	.-4      	; 0x1376 <TypeIn+0x38e>
    137a:	d2 01       	movw	r26, r4
    137c:	40 e0       	ldi	r20, 0x00	; 0
    137e:	50 e0       	ldi	r21, 0x00	; 0
		///////////////////////////////////////////////////////
		for(bit = 0; bit < 8 ; bit++)
			pinWrite(int_data_pins[bit], (*p & (1  << bit)));
    1380:	8d 91       	ld	r24, X+
    1382:	f6 01       	movw	r30, r12
    1384:	90 81       	ld	r25, Z
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1386:	8d 31       	cpi	r24, 0x1D	; 29
    1388:	08 f0       	brcs	.+2      	; 0x138c <TypeIn+0x3a4>
    138a:	4c c0       	rjmp	.+152    	; 0x1424 <TypeIn+0x43c>
    138c:	1b 01       	movw	r2, r22
    138e:	04 2e       	mov	r0, r20
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <TypeIn+0x3ae>
    1392:	22 0c       	add	r2, r2
    1394:	33 1c       	adc	r3, r3
    1396:	0a 94       	dec	r0
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <TypeIn+0x3aa>
    139a:	91 01       	movw	r18, r2
    139c:	29 23       	and	r18, r25
		if (value) {
    139e:	09 f1       	breq	.+66     	; 0x13e2 <TypeIn+0x3fa>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	fc 01       	movw	r30, r24
    13a4:	ee 0f       	add	r30, r30
    13a6:	ff 1f       	adc	r31, r31
    13a8:	ee 0f       	add	r30, r30
    13aa:	ff 1f       	adc	r31, r31
    13ac:	ee 0f       	add	r30, r30
    13ae:	ff 1f       	adc	r31, r31
    13b0:	e8 1b       	sub	r30, r24
    13b2:	f9 0b       	sbc	r31, r25
    13b4:	9f 01       	movw	r18, r30
    13b6:	2e 0d       	add	r18, r14
    13b8:	3f 1d       	adc	r19, r15
    13ba:	39 8b       	std	Y+17, r19	; 0x11
    13bc:	28 8b       	std	Y+16, r18	; 0x10
    13be:	f9 01       	movw	r30, r18
    13c0:	22 80       	ldd	r2, Z+2	; 0x02
    13c2:	33 80       	ldd	r3, Z+3	; 0x03
    13c4:	f1 01       	movw	r30, r2
    13c6:	20 81       	ld	r18, Z
    13c8:	cb 01       	movw	r24, r22
    13ca:	e8 89       	ldd	r30, Y+16	; 0x10
    13cc:	f9 89       	ldd	r31, Y+17	; 0x11
    13ce:	06 80       	ldd	r0, Z+6	; 0x06
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <TypeIn+0x3ee>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <TypeIn+0x3ea>
    13da:	82 2b       	or	r24, r18
    13dc:	f1 01       	movw	r30, r2
    13de:	80 83       	st	Z, r24
    13e0:	21 c0       	rjmp	.+66     	; 0x1424 <TypeIn+0x43c>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	fc 01       	movw	r30, r24
    13e6:	ee 0f       	add	r30, r30
    13e8:	ff 1f       	adc	r31, r31
    13ea:	ee 0f       	add	r30, r30
    13ec:	ff 1f       	adc	r31, r31
    13ee:	ee 0f       	add	r30, r30
    13f0:	ff 1f       	adc	r31, r31
    13f2:	e8 1b       	sub	r30, r24
    13f4:	f9 0b       	sbc	r31, r25
    13f6:	1f 01       	movw	r2, r30
    13f8:	2e 0c       	add	r2, r14
    13fa:	3f 1c       	adc	r3, r15
    13fc:	39 8a       	std	Y+17, r3	; 0x11
    13fe:	28 8a       	std	Y+16, r2	; 0x10
    1400:	f1 01       	movw	r30, r2
    1402:	22 80       	ldd	r2, Z+2	; 0x02
    1404:	33 80       	ldd	r3, Z+3	; 0x03
    1406:	f1 01       	movw	r30, r2
    1408:	20 81       	ld	r18, Z
    140a:	cb 01       	movw	r24, r22
    140c:	e8 89       	ldd	r30, Y+16	; 0x10
    140e:	f9 89       	ldd	r31, Y+17	; 0x11
    1410:	06 80       	ldd	r0, Z+6	; 0x06
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <TypeIn+0x430>
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	0a 94       	dec	r0
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <TypeIn+0x42c>
    141c:	80 95       	com	r24
    141e:	82 23       	and	r24, r18
    1420:	f1 01       	movw	r30, r2
    1422:	80 83       	st	Z, r24
    1424:	4f 5f       	subi	r20, 0xFF	; 255
    1426:	5f 4f       	sbci	r21, 0xFF	; 255
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
		///////////////////////////////////////////////////////
		for(bit = 0; bit < 8 ; bit++)
    1428:	48 30       	cpi	r20, 0x08	; 8
    142a:	51 05       	cpc	r21, r1
    142c:	09 f0       	breq	.+2      	; 0x1430 <TypeIn+0x448>
    142e:	a8 cf       	rjmp	.-176    	; 0x1380 <TypeIn+0x398>
			pinWrite(int_data_pins[bit], (*p & (1  << bit)));
		p++;
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
    1430:	d3 01       	movw	r26, r6
    1432:	8d 91       	ld	r24, X+
    1434:	3d 01       	movw	r6, r26
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1436:	8d 31       	cpi	r24, 0x1D	; 29
    1438:	c0 f4       	brcc	.+48     	; 0x146a <TypeIn+0x482>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	fc 01       	movw	r30, r24
    143e:	ee 0f       	add	r30, r30
    1440:	ff 1f       	adc	r31, r31
    1442:	ee 0f       	add	r30, r30
    1444:	ff 1f       	adc	r31, r31
    1446:	ee 0f       	add	r30, r30
    1448:	ff 1f       	adc	r31, r31
    144a:	e8 1b       	sub	r30, r24
    144c:	f9 0b       	sbc	r31, r25
    144e:	ee 0d       	add	r30, r14
    1450:	ff 1d       	adc	r31, r15
    1452:	a2 81       	ldd	r26, Z+2	; 0x02
    1454:	b3 81       	ldd	r27, Z+3	; 0x03
    1456:	2c 91       	ld	r18, X
    1458:	cb 01       	movw	r24, r22
    145a:	06 80       	ldd	r0, Z+6	; 0x06
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <TypeIn+0x47a>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	0a 94       	dec	r0
    1464:	e2 f7       	brpl	.-8      	; 0x145e <TypeIn+0x476>
    1466:	82 2b       	or	r24, r18
    1468:	8c 93       	st	X, r24
    146a:	ef e1       	ldi	r30, 0x1F	; 31
    146c:	fe e4       	ldi	r31, 0x4E	; 78
    146e:	31 97       	sbiw	r30, 0x01	; 1
    1470:	f1 f7       	brne	.-4      	; 0x146e <TypeIn+0x486>
    1472:	00 c0       	rjmp	.+0      	; 0x1474 <TypeIn+0x48c>
    1474:	00 00       	nop
    1476:	49 81       	ldd	r20, Y+1	; 0x01
    1478:	5a 81       	ldd	r21, Y+2	; 0x02
    147a:	1b c0       	rjmp	.+54     	; 0x14b2 <TypeIn+0x4ca>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    147c:	8d 31       	cpi	r24, 0x1D	; 29
    147e:	c8 f4       	brcc	.+50     	; 0x14b2 <TypeIn+0x4ca>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	fc 01       	movw	r30, r24
    1484:	ee 0f       	add	r30, r30
    1486:	ff 1f       	adc	r31, r31
    1488:	ee 0f       	add	r30, r30
    148a:	ff 1f       	adc	r31, r31
    148c:	ee 0f       	add	r30, r30
    148e:	ff 1f       	adc	r31, r31
    1490:	e8 1b       	sub	r30, r24
    1492:	f9 0b       	sbc	r31, r25
    1494:	ee 0d       	add	r30, r14
    1496:	ff 1d       	adc	r31, r15
    1498:	a2 81       	ldd	r26, Z+2	; 0x02
    149a:	b3 81       	ldd	r27, Z+3	; 0x03
    149c:	2c 91       	ld	r18, X
    149e:	cb 01       	movw	r24, r22
    14a0:	06 80       	ldd	r0, Z+6	; 0x06
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <TypeIn+0x4c0>
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	0a 94       	dec	r0
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <TypeIn+0x4bc>
    14ac:	80 95       	com	r24
    14ae:	82 23       	and	r24, r18
    14b0:	8c 93       	st	X, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    14b2:	da 01       	movw	r26, r20
    14b4:	8d 91       	ld	r24, X+
    14b6:	ad 01       	movw	r20, r26
    14b8:	88 23       	and	r24, r24
    14ba:	01 f7       	brne	.-64     	; 0x147c <TypeIn+0x494>
    14bc:	a2 01       	movw	r20, r4
    14be:	1b c0       	rjmp	.+54     	; 0x14f6 <TypeIn+0x50e>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    14c0:	8d 31       	cpi	r24, 0x1D	; 29
    14c2:	c8 f4       	brcc	.+50     	; 0x14f6 <TypeIn+0x50e>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	fc 01       	movw	r30, r24
    14c8:	ee 0f       	add	r30, r30
    14ca:	ff 1f       	adc	r31, r31
    14cc:	ee 0f       	add	r30, r30
    14ce:	ff 1f       	adc	r31, r31
    14d0:	ee 0f       	add	r30, r30
    14d2:	ff 1f       	adc	r31, r31
    14d4:	e8 1b       	sub	r30, r24
    14d6:	f9 0b       	sbc	r31, r25
    14d8:	ee 0d       	add	r30, r14
    14da:	ff 1d       	adc	r31, r15
    14dc:	a2 81       	ldd	r26, Z+2	; 0x02
    14de:	b3 81       	ldd	r27, Z+3	; 0x03
    14e0:	2c 91       	ld	r18, X
    14e2:	cb 01       	movw	r24, r22
    14e4:	06 80       	ldd	r0, Z+6	; 0x06
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <TypeIn+0x504>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <TypeIn+0x500>
    14f0:	80 95       	com	r24
    14f2:	82 23       	and	r24, r18
    14f4:	8c 93       	st	X, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    14f6:	fa 01       	movw	r30, r20
    14f8:	81 91       	ld	r24, Z+
    14fa:	af 01       	movw	r20, r30
    14fc:	88 23       	and	r24, r24
    14fe:	01 f7       	brne	.-64     	; 0x14c0 <TypeIn+0x4d8>
    1500:	0f 2e       	mov	r0, r31
    1502:	f5 e0       	ldi	r31, 0x05	; 5
    1504:	2f 2e       	mov	r2, r31
    1506:	33 24       	eor	r3, r3
    1508:	f0 2d       	mov	r31, r0
    150a:	82 0c       	add	r8, r2
    150c:	93 1c       	adc	r9, r3
/* Display data                                                         */
/************************************************************************/
static inline void Display(uint8_t *p)
{
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
    150e:	27 e0       	ldi	r18, 0x07	; 7
    1510:	62 16       	cp	r6, r18
    1512:	21 e0       	ldi	r18, 0x01	; 1
    1514:	72 06       	cpc	r7, r18
    1516:	31 f0       	breq	.+12     	; 0x1524 <TypeIn+0x53c>
}

/************************************************************************/
/* type effect                                                          */
/************************************************************************/
void TypeIn(uint8_t *p, uint8_t time)
    1518:	a4 01       	movw	r20, r8
    151a:	44 50       	subi	r20, 0x04	; 4
    151c:	50 40       	sbci	r21, 0x00	; 0
    151e:	a9 81       	ldd	r26, Y+1	; 0x01
    1520:	ba 81       	ldd	r27, Y+2	; 0x02
    1522:	18 cf       	rjmp	.-464    	; 0x1354 <TypeIn+0x36c>
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
		_delay_ms(5);
		Clear();
	}
	delayms = 1;
    1524:	3d 81       	ldd	r19, Y+5	; 0x05
    1526:	30 93 00 01 	sts	0x0100, r19
    152a:	8e 81       	ldd	r24, Y+6	; 0x06
    152c:	80 93 01 01 	sts	0x0101, r24
    1530:	9b 81       	ldd	r25, Y+3	; 0x03
    1532:	91 50       	subi	r25, 0x01	; 1
    1534:	9b 83       	std	Y+3, r25	; 0x03
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1536:	99 23       	and	r25, r25
    1538:	39 f5       	brne	.+78     	; 0x1588 <TypeIn+0x5a0>
    153a:	2f c0       	rjmp	.+94     	; 0x159a <TypeIn+0x5b2>
void TypeIn(uint8_t *p, uint8_t time)
{
	InitBuffer();
	uint8_t *bf = buffer;
	uint8_t index, step, rep = 0;	
	for(step = 4; step >= 1 ; step--)
    153c:	a2 e3       	ldi	r26, 0x32	; 50
    153e:	ab 83       	std	Y+3, r26	; 0x03
}

/************************************************************************/
/* type effect                                                          */
/************************************************************************/
void TypeIn(uint8_t *p, uint8_t time)
    1540:	ee 85       	ldd	r30, Y+14	; 0x0e
    1542:	ff 85       	ldd	r31, Y+15	; 0x0f
    1544:	34 96       	adiw	r30, 0x04	; 4
    1546:	ff 87       	std	Y+15, r31	; 0x0f
    1548:	ee 87       	std	Y+14, r30	; 0x0e
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    154a:	0f 2e       	mov	r0, r31
    154c:	fe eb       	ldi	r31, 0xBE	; 190
    154e:	ef 2e       	mov	r14, r31
    1550:	f1 e0       	ldi	r31, 0x01	; 1
    1552:	ff 2e       	mov	r15, r31
    1554:	f0 2d       	mov	r31, r0
    1556:	61 e0       	ldi	r22, 0x01	; 1
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	6d 83       	std	Y+5, r22	; 0x05
    155c:	7e 83       	std	Y+6, r23	; 0x06
}

inline void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    155e:	00 ec       	ldi	r16, 0xC0	; 192
    1560:	10 e0       	ldi	r17, 0x00	; 0
	/* Put data into buffer, sends the data */
	UDR0 = data;
    1562:	0f 2e       	mov	r0, r31
    1564:	f6 ec       	ldi	r31, 0xC6	; 198
    1566:	af 2e       	mov	r10, r31
    1568:	bb 24       	eor	r11, r11
    156a:	f0 2d       	mov	r31, r0
}

/************************************************************************/
/* type effect                                                          */
/************************************************************************/
void TypeIn(uint8_t *p, uint8_t time)
    156c:	0f 2e       	mov	r0, r31
    156e:	f2 e0       	ldi	r31, 0x02	; 2
    1570:	2f 2e       	mov	r2, r31
    1572:	f1 e0       	ldi	r31, 0x01	; 1
    1574:	3f 2e       	mov	r3, r31
    1576:	f0 2d       	mov	r31, r0
    1578:	29 82       	std	Y+1, r2	; 0x01
    157a:	3a 82       	std	Y+2, r3	; 0x02
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
    157c:	0f 2e       	mov	r0, r31
    157e:	f7 e0       	ldi	r31, 0x07	; 7
    1580:	4f 2e       	mov	r4, r31
    1582:	f1 e0       	ldi	r31, 0x01	; 1
    1584:	5f 2e       	mov	r5, r31
    1586:	f0 2d       	mov	r31, r0
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1588:	0f 2e       	mov	r0, r31
    158a:	f2 e0       	ldi	r31, 0x02	; 2
    158c:	6f 2e       	mov	r6, r31
    158e:	f1 e0       	ldi	r31, 0x01	; 1
    1590:	7f 2e       	mov	r7, r31
    1592:	f0 2d       	mov	r31, r0
}

/************************************************************************/
/* type effect                                                          */
/************************************************************************/
void TypeIn(uint8_t *p, uint8_t time)
    1594:	8e 84       	ldd	r8, Y+14	; 0x0e
    1596:	9f 84       	ldd	r9, Y+15	; 0x0f
    1598:	bf cf       	rjmp	.-130    	; 0x1518 <TypeIn+0x530>
			}
			HoldDisplay(bf, time);
		}
	}
	HoldDisplay(p, 50);
}
    159a:	61 96       	adiw	r28, 0x11	; 17
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	1f 91       	pop	r17
    15ac:	0f 91       	pop	r16
    15ae:	ff 90       	pop	r15
    15b0:	ef 90       	pop	r14
    15b2:	df 90       	pop	r13
    15b4:	cf 90       	pop	r12
    15b6:	bf 90       	pop	r11
    15b8:	af 90       	pop	r10
    15ba:	9f 90       	pop	r9
    15bc:	8f 90       	pop	r8
    15be:	7f 90       	pop	r7
    15c0:	6f 90       	pop	r6
    15c2:	5f 90       	pop	r5
    15c4:	4f 90       	pop	r4
    15c6:	3f 90       	pop	r3
    15c8:	2f 90       	pop	r2
    15ca:	08 95       	ret

000015cc <TypeOut>:
/************************************************************************/
/* Delete effect                                                         */
/************************************************************************/
void TypeOut(uint8_t *p, uint8_t time)
{
    15cc:	2f 92       	push	r2
    15ce:	3f 92       	push	r3
    15d0:	4f 92       	push	r4
    15d2:	5f 92       	push	r5
    15d4:	6f 92       	push	r6
    15d6:	7f 92       	push	r7
    15d8:	8f 92       	push	r8
    15da:	9f 92       	push	r9
    15dc:	af 92       	push	r10
    15de:	bf 92       	push	r11
    15e0:	cf 92       	push	r12
    15e2:	df 92       	push	r13
    15e4:	ef 92       	push	r14
    15e6:	ff 92       	push	r15
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	6f 97       	sbiw	r28, 0x1f	; 31
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	9a 8f       	std	Y+26, r25	; 0x1a
    1602:	89 8f       	std	Y+25, r24	; 0x19
    1604:	6e 87       	std	Y+14, r22	; 0x0e
	HoldDisplay(p, 50);
}
/************************************************************************/
/* Delete effect                                                         */
/************************************************************************/
void TypeOut(uint8_t *p, uint8_t time)
    1606:	8c e8       	ldi	r24, 0x8C	; 140
    1608:	92 e0       	ldi	r25, 0x02	; 2
    160a:	9e 83       	std	Y+6, r25	; 0x06
    160c:	8d 83       	std	Y+5, r24	; 0x05
    160e:	49 96       	adiw	r24, 0x19	; 25
/************************************************************************/
/* initialize buffer                                                    */
/************************************************************************/
inline void InitBuffer()
{
	uint8_t *bf = buffer;
    1610:	ed 81       	ldd	r30, Y+5	; 0x05
    1612:	fe 81       	ldd	r31, Y+6	; 0x06
	uint8_t index = 0;
	for(index=0; index<25; index++) *bf++ = 0x00;
    1614:	11 92       	st	Z+, r1
    1616:	e8 17       	cp	r30, r24
    1618:	f9 07       	cpc	r31, r25
    161a:	e1 f7       	brne	.-8      	; 0x1614 <TypeOut+0x48>
    161c:	9a e0       	ldi	r25, 0x0A	; 10
    161e:	9c 83       	std	Y+4, r25	; 0x04
	HoldDisplay(p, 50);
}
/************************************************************************/
/* Delete effect                                                         */
/************************************************************************/
void TypeOut(uint8_t *p, uint8_t time)
    1620:	a9 8d       	ldd	r26, Y+25	; 0x19
    1622:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1624:	14 96       	adiw	r26, 0x04	; 4
    1626:	bb 87       	std	Y+11, r27	; 0x0b
    1628:	aa 87       	std	Y+10, r26	; 0x0a
    162a:	e2 e0       	ldi	r30, 0x02	; 2
    162c:	f1 e0       	ldi	r31, 0x01	; 1
    162e:	ef 83       	std	Y+7, r30	; 0x07
    1630:	f8 87       	std	Y+8, r31	; 0x08
    1632:	0f 2e       	mov	r0, r31
    1634:	fe eb       	ldi	r31, 0xBE	; 190
    1636:	ef 2e       	mov	r14, r31
    1638:	f1 e0       	ldi	r31, 0x01	; 1
    163a:	ff 2e       	mov	r15, r31
    163c:	f0 2d       	mov	r31, r0
    163e:	01 e0       	ldi	r16, 0x01	; 1
    1640:	10 e0       	ldi	r17, 0x00	; 0
    1642:	0c 87       	std	Y+12, r16	; 0x0c
    1644:	1d 87       	std	Y+13, r17	; 0x0d
}

inline void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1646:	60 ec       	ldi	r22, 0xC0	; 192
    1648:	70 e0       	ldi	r23, 0x00	; 0
	/* Put data into buffer, sends the data */
	UDR0 = data;
    164a:	0f 2e       	mov	r0, r31
    164c:	f6 ec       	ldi	r31, 0xC6	; 198
    164e:	cf 2e       	mov	r12, r31
    1650:	dd 24       	eor	r13, r13
    1652:	f0 2d       	mov	r31, r0
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
    1654:	0f 2e       	mov	r0, r31
    1656:	f7 e0       	ldi	r31, 0x07	; 7
    1658:	2f 2e       	mov	r2, r31
    165a:	f1 e0       	ldi	r31, 0x01	; 1
    165c:	3f 2e       	mov	r3, r31
    165e:	f0 2d       	mov	r31, r0
	HoldDisplay(p, 50);
}
/************************************************************************/
/* Delete effect                                                         */
/************************************************************************/
void TypeOut(uint8_t *p, uint8_t time)
    1660:	f9 83       	std	Y+1, r31	; 0x01
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
    1662:	2a 82       	std	Y+2, r2	; 0x02
    1664:	3b 82       	std	Y+3, r3	; 0x03
    1666:	8e 2e       	mov	r8, r30
    1668:	37 c1       	rjmp	.+622    	; 0x18d8 <TypeOut+0x30c>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    166a:	8d 31       	cpi	r24, 0x1D	; 29
    166c:	20 f5       	brcc	.+72     	; 0x16b6 <TypeOut+0xea>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	fc 01       	movw	r30, r24
    1672:	ee 0f       	add	r30, r30
    1674:	ff 1f       	adc	r31, r31
    1676:	ee 0f       	add	r30, r30
    1678:	ff 1f       	adc	r31, r31
    167a:	ee 0f       	add	r30, r30
    167c:	ff 1f       	adc	r31, r31
    167e:	e8 1b       	sub	r30, r24
    1680:	f9 0b       	sbc	r31, r25
    1682:	cf 01       	movw	r24, r30
    1684:	8e 0d       	add	r24, r14
    1686:	9f 1d       	adc	r25, r15
    1688:	9f 8f       	std	Y+31, r25	; 0x1f
    168a:	8e 8f       	std	Y+30, r24	; 0x1e
    168c:	fc 01       	movw	r30, r24
    168e:	02 80       	ldd	r0, Z+2	; 0x02
    1690:	f3 81       	ldd	r31, Z+3	; 0x03
    1692:	e0 2d       	mov	r30, r0
    1694:	fe 8b       	std	Y+22, r31	; 0x16
    1696:	ed 8b       	std	Y+21, r30	; 0x15
    1698:	40 81       	ld	r20, Z
    169a:	c8 01       	movw	r24, r16
    169c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    169e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    16a0:	06 80       	ldd	r0, Z+6	; 0x06
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <TypeOut+0xdc>
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	0a 94       	dec	r0
    16aa:	e2 f7       	brpl	.-8      	; 0x16a4 <TypeOut+0xd8>
    16ac:	80 95       	com	r24
    16ae:	84 23       	and	r24, r20
    16b0:	ed 89       	ldd	r30, Y+21	; 0x15
    16b2:	fe 89       	ldd	r31, Y+22	; 0x16
    16b4:	80 83       	st	Z, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    16b6:	8d 91       	ld	r24, X+
    16b8:	88 23       	and	r24, r24
    16ba:	b9 f6       	brne	.-82     	; 0x166a <TypeOut+0x9e>
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    16bc:	2b 9a       	sbi	0x05, 3	; 5
	HoldDisplay(p, 50);
}
/************************************************************************/
/* Delete effect                                                         */
/************************************************************************/
void TypeOut(uint8_t *p, uint8_t time)
    16be:	f9 01       	movw	r30, r18
    16c0:	95 01       	movw	r18, r10
	for(index=0; index<5; index++){
		pinsMultiWrite(plex_pins, LOW);
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
    16c2:	91 91       	ld	r25, Z+
}

inline void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    16c4:	db 01       	movw	r26, r22
    16c6:	8c 91       	ld	r24, X
    16c8:	85 ff       	sbrs	r24, 5
    16ca:	fc cf       	rjmp	.-8      	; 0x16c4 <TypeOut+0xf8>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    16cc:	d6 01       	movw	r26, r12
    16ce:	9c 93       	st	X, r25
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
		pinsMultiWrite(plex_pins, LOW);
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
    16d0:	e2 17       	cp	r30, r18
    16d2:	f3 07       	cpc	r31, r19
    16d4:	b1 f7       	brne	.-20     	; 0x16c2 <TypeOut+0xf6>
    16d6:	c9 01       	movw	r24, r18
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    16d8:	2b 98       	cbi	0x05, 3	; 5
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
    16da:	1c 99       	sbic	0x03, 4	; 3
    16dc:	fe cf       	rjmp	.-4      	; 0x16da <TypeOut+0x10e>
    16de:	2f 86       	std	Y+15, r2	; 0x0f
    16e0:	38 8a       	std	Y+16, r3	; 0x10
    16e2:	aa 81       	ldd	r26, Y+2	; 0x02
    16e4:	bb 81       	ldd	r27, Y+3	; 0x03
    16e6:	40 e0       	ldi	r20, 0x00	; 0
    16e8:	50 e0       	ldi	r21, 0x00	; 0
    16ea:	9e 8b       	std	Y+22, r25	; 0x16
    16ec:	8d 8b       	std	Y+21, r24	; 0x15
		///////////////////////////////////////////////////////
		for(bit = 0; bit < 8 ; bit++)
			pinWrite(int_data_pins[bit], (*p & (1  << bit)));
    16ee:	2d 91       	ld	r18, X+
    16f0:	ed 89       	ldd	r30, Y+21	; 0x15
    16f2:	fe 89       	ldd	r31, Y+22	; 0x16
    16f4:	30 81       	ld	r19, Z
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    16f6:	2d 31       	cpi	r18, 0x1D	; 29
    16f8:	08 f0       	brcs	.+2      	; 0x16fc <TypeOut+0x130>
    16fa:	54 c0       	rjmp	.+168    	; 0x17a4 <TypeOut+0x1d8>
    16fc:	f8 01       	movw	r30, r16
    16fe:	04 2e       	mov	r0, r20
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <TypeOut+0x13a>
    1702:	ee 0f       	add	r30, r30
    1704:	ff 1f       	adc	r31, r31
    1706:	0a 94       	dec	r0
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <TypeOut+0x136>
    170a:	cf 01       	movw	r24, r30
    170c:	83 23       	and	r24, r19
		if (value) {
    170e:	29 f1       	breq	.+74     	; 0x175a <TypeOut+0x18e>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1710:	82 2f       	mov	r24, r18
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	fc 01       	movw	r30, r24
    1716:	ee 0f       	add	r30, r30
    1718:	ff 1f       	adc	r31, r31
    171a:	ee 0f       	add	r30, r30
    171c:	ff 1f       	adc	r31, r31
    171e:	ee 0f       	add	r30, r30
    1720:	ff 1f       	adc	r31, r31
    1722:	e8 1b       	sub	r30, r24
    1724:	f9 0b       	sbc	r31, r25
    1726:	cf 01       	movw	r24, r30
    1728:	8e 0d       	add	r24, r14
    172a:	9f 1d       	adc	r25, r15
    172c:	9f 8f       	std	Y+31, r25	; 0x1f
    172e:	8e 8f       	std	Y+30, r24	; 0x1e
    1730:	fc 01       	movw	r30, r24
    1732:	22 81       	ldd	r18, Z+2	; 0x02
    1734:	33 81       	ldd	r19, Z+3	; 0x03
    1736:	f9 01       	movw	r30, r18
    1738:	90 80       	ld	r9, Z
    173a:	c8 01       	movw	r24, r16
    173c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    173e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1740:	06 80       	ldd	r0, Z+6	; 0x06
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <TypeOut+0x17c>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	0a 94       	dec	r0
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <TypeOut+0x178>
    174c:	9f 8f       	std	Y+31, r25	; 0x1f
    174e:	8e 8f       	std	Y+30, r24	; 0x1e
    1750:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1752:	89 29       	or	r24, r9
    1754:	f9 01       	movw	r30, r18
    1756:	80 83       	st	Z, r24
    1758:	25 c0       	rjmp	.+74     	; 0x17a4 <TypeOut+0x1d8>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    175a:	82 2f       	mov	r24, r18
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	fc 01       	movw	r30, r24
    1760:	ee 0f       	add	r30, r30
    1762:	ff 1f       	adc	r31, r31
    1764:	ee 0f       	add	r30, r30
    1766:	ff 1f       	adc	r31, r31
    1768:	ee 0f       	add	r30, r30
    176a:	ff 1f       	adc	r31, r31
    176c:	e8 1b       	sub	r30, r24
    176e:	f9 0b       	sbc	r31, r25
    1770:	cf 01       	movw	r24, r30
    1772:	8e 0d       	add	r24, r14
    1774:	9f 1d       	adc	r25, r15
    1776:	9f 8f       	std	Y+31, r25	; 0x1f
    1778:	8e 8f       	std	Y+30, r24	; 0x1e
    177a:	fc 01       	movw	r30, r24
    177c:	22 81       	ldd	r18, Z+2	; 0x02
    177e:	33 81       	ldd	r19, Z+3	; 0x03
    1780:	f9 01       	movw	r30, r18
    1782:	90 80       	ld	r9, Z
    1784:	c8 01       	movw	r24, r16
    1786:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1788:	ff 8d       	ldd	r31, Y+31	; 0x1f
    178a:	06 80       	ldd	r0, Z+6	; 0x06
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <TypeOut+0x1c6>
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	0a 94       	dec	r0
    1794:	e2 f7       	brpl	.-8      	; 0x178e <TypeOut+0x1c2>
    1796:	9f 8f       	std	Y+31, r25	; 0x1f
    1798:	8e 8f       	std	Y+30, r24	; 0x1e
    179a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    179c:	80 95       	com	r24
    179e:	89 21       	and	r24, r9
    17a0:	f9 01       	movw	r30, r18
    17a2:	80 83       	st	Z, r24
    17a4:	4f 5f       	subi	r20, 0xFF	; 255
    17a6:	5f 4f       	sbci	r21, 0xFF	; 255
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
		///////////////////////////////////////////////////////
		for(bit = 0; bit < 8 ; bit++)
    17a8:	48 30       	cpi	r20, 0x08	; 8
    17aa:	51 05       	cpc	r21, r1
    17ac:	09 f0       	breq	.+2      	; 0x17b0 <TypeOut+0x1e4>
    17ae:	9f cf       	rjmp	.-194    	; 0x16ee <TypeOut+0x122>
			pinWrite(int_data_pins[bit], (*p & (1  << bit)));
		p++;
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
    17b0:	d3 01       	movw	r26, r6
    17b2:	8d 91       	ld	r24, X+
    17b4:	3d 01       	movw	r6, r26
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    17b6:	8d 31       	cpi	r24, 0x1D	; 29
    17b8:	c0 f4       	brcc	.+48     	; 0x17ea <TypeOut+0x21e>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	fc 01       	movw	r30, r24
    17be:	ee 0f       	add	r30, r30
    17c0:	ff 1f       	adc	r31, r31
    17c2:	ee 0f       	add	r30, r30
    17c4:	ff 1f       	adc	r31, r31
    17c6:	ee 0f       	add	r30, r30
    17c8:	ff 1f       	adc	r31, r31
    17ca:	e8 1b       	sub	r30, r24
    17cc:	f9 0b       	sbc	r31, r25
    17ce:	ee 0d       	add	r30, r14
    17d0:	ff 1d       	adc	r31, r15
    17d2:	a2 81       	ldd	r26, Z+2	; 0x02
    17d4:	b3 81       	ldd	r27, Z+3	; 0x03
    17d6:	2c 91       	ld	r18, X
    17d8:	c8 01       	movw	r24, r16
    17da:	06 80       	ldd	r0, Z+6	; 0x06
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <TypeOut+0x216>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	0a 94       	dec	r0
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <TypeOut+0x212>
    17e6:	82 2b       	or	r24, r18
    17e8:	8c 93       	st	X, r24
    17ea:	ef e1       	ldi	r30, 0x1F	; 31
    17ec:	fe e4       	ldi	r31, 0x4E	; 78
    17ee:	31 97       	sbiw	r30, 0x01	; 1
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <TypeOut+0x222>
    17f2:	00 c0       	rjmp	.+0      	; 0x17f4 <TypeOut+0x228>
    17f4:	00 00       	nop
    17f6:	a8 2d       	mov	r26, r8
    17f8:	b9 81       	ldd	r27, Y+1	; 0x01
    17fa:	38 2d       	mov	r19, r8
    17fc:	21 c0       	rjmp	.+66     	; 0x1840 <TypeOut+0x274>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    17fe:	8d 31       	cpi	r24, 0x1D	; 29
    1800:	f8 f4       	brcc	.+62     	; 0x1840 <TypeOut+0x274>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	fc 01       	movw	r30, r24
    1806:	ee 0f       	add	r30, r30
    1808:	ff 1f       	adc	r31, r31
    180a:	ee 0f       	add	r30, r30
    180c:	ff 1f       	adc	r31, r31
    180e:	ee 0f       	add	r30, r30
    1810:	ff 1f       	adc	r31, r31
    1812:	e8 1b       	sub	r30, r24
    1814:	f9 0b       	sbc	r31, r25
    1816:	cf 01       	movw	r24, r30
    1818:	8e 0d       	add	r24, r14
    181a:	9f 1d       	adc	r25, r15
    181c:	fc 01       	movw	r30, r24
    181e:	42 81       	ldd	r20, Z+2	; 0x02
    1820:	53 81       	ldd	r21, Z+3	; 0x03
    1822:	fa 01       	movw	r30, r20
    1824:	20 81       	ld	r18, Z
    1826:	48 01       	movw	r8, r16
    1828:	fc 01       	movw	r30, r24
    182a:	06 80       	ldd	r0, Z+6	; 0x06
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <TypeOut+0x266>
    182e:	88 0c       	add	r8, r8
    1830:	99 1c       	adc	r9, r9
    1832:	0a 94       	dec	r0
    1834:	e2 f7       	brpl	.-8      	; 0x182e <TypeOut+0x262>
    1836:	c4 01       	movw	r24, r8
    1838:	80 95       	com	r24
    183a:	82 23       	and	r24, r18
    183c:	fa 01       	movw	r30, r20
    183e:	80 83       	st	Z, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1840:	8d 91       	ld	r24, X+
    1842:	88 23       	and	r24, r24
    1844:	e1 f6       	brne	.-72     	; 0x17fe <TypeOut+0x232>
    1846:	83 2e       	mov	r8, r19
    1848:	42 2d       	mov	r20, r2
    184a:	33 2d       	mov	r19, r3
    184c:	aa 81       	ldd	r26, Y+2	; 0x02
    184e:	bb 81       	ldd	r27, Y+3	; 0x03
    1850:	26 c0       	rjmp	.+76     	; 0x189e <TypeOut+0x2d2>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1852:	8d 31       	cpi	r24, 0x1D	; 29
    1854:	20 f5       	brcc	.+72     	; 0x189e <TypeOut+0x2d2>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	fc 01       	movw	r30, r24
    185a:	ee 0f       	add	r30, r30
    185c:	ff 1f       	adc	r31, r31
    185e:	ee 0f       	add	r30, r30
    1860:	ff 1f       	adc	r31, r31
    1862:	ee 0f       	add	r30, r30
    1864:	ff 1f       	adc	r31, r31
    1866:	e8 1b       	sub	r30, r24
    1868:	f9 0b       	sbc	r31, r25
    186a:	cf 01       	movw	r24, r30
    186c:	8e 0d       	add	r24, r14
    186e:	9f 1d       	adc	r25, r15
    1870:	9f 8f       	std	Y+31, r25	; 0x1f
    1872:	8e 8f       	std	Y+30, r24	; 0x1e
    1874:	fc 01       	movw	r30, r24
    1876:	02 80       	ldd	r0, Z+2	; 0x02
    1878:	f3 81       	ldd	r31, Z+3	; 0x03
    187a:	e0 2d       	mov	r30, r0
    187c:	fe 8b       	std	Y+22, r31	; 0x16
    187e:	ed 8b       	std	Y+21, r30	; 0x15
    1880:	20 81       	ld	r18, Z
    1882:	c8 01       	movw	r24, r16
    1884:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1886:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1888:	06 80       	ldd	r0, Z+6	; 0x06
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <TypeOut+0x2c4>
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	0a 94       	dec	r0
    1892:	e2 f7       	brpl	.-8      	; 0x188c <TypeOut+0x2c0>
    1894:	80 95       	com	r24
    1896:	82 23       	and	r24, r18
    1898:	ed 89       	ldd	r30, Y+21	; 0x15
    189a:	fe 89       	ldd	r31, Y+22	; 0x16
    189c:	80 83       	st	Z, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    189e:	8d 91       	ld	r24, X+
    18a0:	88 23       	and	r24, r24
    18a2:	b9 f6       	brne	.-82     	; 0x1852 <TypeOut+0x286>
    18a4:	85 e0       	ldi	r24, 0x05	; 5
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	a8 0e       	add	r10, r24
    18aa:	b9 1e       	adc	r11, r25
/* Display data                                                         */
/************************************************************************/
static inline void Display(uint8_t *p)
{
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
    18ac:	97 e0       	ldi	r25, 0x07	; 7
    18ae:	69 16       	cp	r6, r25
    18b0:	91 e0       	ldi	r25, 0x01	; 1
    18b2:	79 06       	cpc	r7, r25
    18b4:	31 f0       	breq	.+12     	; 0x18c2 <TypeOut+0x2f6>
	HoldDisplay(p, 50);
}
/************************************************************************/
/* Delete effect                                                         */
/************************************************************************/
void TypeOut(uint8_t *p, uint8_t time)
    18b6:	95 01       	movw	r18, r10
    18b8:	24 50       	subi	r18, 0x04	; 4
    18ba:	30 40       	sbci	r19, 0x00	; 0
    18bc:	a8 2d       	mov	r26, r8
    18be:	b9 81       	ldd	r27, Y+1	; 0x01
    18c0:	fa ce       	rjmp	.-524    	; 0x16b6 <TypeOut+0xea>
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
		_delay_ms(5);
		Clear();
	}
	delayms = 1;
    18c2:	ac 85       	ldd	r26, Y+12	; 0x0c
    18c4:	a0 93 00 01 	sts	0x0100, r26
    18c8:	bd 85       	ldd	r27, Y+13	; 0x0d
    18ca:	b0 93 01 01 	sts	0x0101, r27
    18ce:	ec 81       	ldd	r30, Y+4	; 0x04
    18d0:	e1 50       	subi	r30, 0x01	; 1
    18d2:	ec 83       	std	Y+4, r30	; 0x04
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    18d4:	ee 23       	and	r30, r30
    18d6:	99 f0       	breq	.+38     	; 0x18fe <TypeOut+0x332>
    18d8:	82 e0       	ldi	r24, 0x02	; 2
    18da:	91 e0       	ldi	r25, 0x01	; 1
    18dc:	8f 8b       	std	Y+23, r24	; 0x17
    18de:	98 8f       	std	Y+24, r25	; 0x18
	HoldDisplay(p, 50);
}
/************************************************************************/
/* Delete effect                                                         */
/************************************************************************/
void TypeOut(uint8_t *p, uint8_t time)
    18e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    18e2:	bb 84       	ldd	r11, Y+11	; 0x0b
    18e4:	bf 81       	ldd	r27, Y+7	; 0x07
    18e6:	bb 8f       	std	Y+27, r27	; 0x1b
    18e8:	e8 85       	ldd	r30, Y+8	; 0x08
    18ea:	e9 87       	std	Y+9, r30	; 0x09
    18ec:	0f 2e       	mov	r0, r31
    18ee:	f7 e0       	ldi	r31, 0x07	; 7
    18f0:	4f 2e       	mov	r4, r31
    18f2:	f1 e0       	ldi	r31, 0x01	; 1
    18f4:	5f 2e       	mov	r5, r31
    18f6:	f0 2d       	mov	r31, r0
    18f8:	6b 2e       	mov	r6, r27
    18fa:	7e 2e       	mov	r7, r30
    18fc:	dc cf       	rjmp	.-72     	; 0x18b6 <TypeOut+0x2ea>
    18fe:	4a 8b       	std	Y+18, r20	; 0x12
    1900:	3b 8b       	std	Y+19, r19	; 0x13
    1902:	e9 8d       	ldd	r30, Y+25	; 0x19
    1904:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1906:	9f 01       	movw	r18, r30
    1908:	ad 81       	ldd	r26, Y+5	; 0x05
    190a:	be 81       	ldd	r27, Y+6	; 0x06
{
	InitBuffer();
	uint8_t *bf = buffer;
	uint8_t index, step, rep = 0;
	HoldDisplay(p, 10);
	for(index=0; index<25; index++) *(bf+index) = *(p+index);
    190c:	f9 01       	movw	r30, r18
    190e:	81 91       	ld	r24, Z+
    1910:	9f 01       	movw	r18, r30
    1912:	8d 93       	st	X+, r24
    1914:	0f 2e       	mov	r0, r31
    1916:	f5 ea       	ldi	r31, 0xA5	; 165
    1918:	8f 2e       	mov	r8, r31
    191a:	f2 e0       	ldi	r31, 0x02	; 2
    191c:	9f 2e       	mov	r9, r31
    191e:	f0 2d       	mov	r31, r0
    1920:	8a 16       	cp	r8, r26
    1922:	9b 06       	cpc	r9, r27
    1924:	99 f7       	brne	.-26     	; 0x190c <TypeOut+0x340>
    1926:	1c 8a       	std	Y+20, r1	; 0x14
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1928:	0f 2e       	mov	r0, r31
    192a:	fe eb       	ldi	r31, 0xBE	; 190
    192c:	cf 2e       	mov	r12, r31
    192e:	f1 e0       	ldi	r31, 0x01	; 1
    1930:	df 2e       	mov	r13, r31
    1932:	f0 2d       	mov	r31, r0
    1934:	61 e0       	ldi	r22, 0x01	; 1
    1936:	70 e0       	ldi	r23, 0x00	; 0
}

inline void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1938:	00 ec       	ldi	r16, 0xC0	; 192
    193a:	10 e0       	ldi	r17, 0x00	; 0
	/* Put data into buffer, sends the data */
	UDR0 = data;
    193c:	0f 2e       	mov	r0, r31
    193e:	f6 ec       	ldi	r31, 0xC6	; 198
    1940:	8f 2e       	mov	r8, r31
    1942:	99 24       	eor	r9, r9
    1944:	f0 2d       	mov	r31, r0
	HoldDisplay(p, 50);
}
/************************************************************************/
/* Delete effect                                                         */
/************************************************************************/
void TypeOut(uint8_t *p, uint8_t time)
    1946:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1948:	2c 8f       	std	Y+28, r18	; 0x1c
    194a:	89 85       	ldd	r24, Y+9	; 0x09
    194c:	8d 8f       	std	Y+29, r24	; 0x1d
    194e:	6d 87       	std	Y+13, r22	; 0x0d
    1950:	79 8b       	std	Y+17, r23	; 0x11
    1952:	51 c1       	rjmp	.+674    	; 0x1bf6 <TypeOut+0x62a>
	{
		for(rep = 0; rep < 9; rep+=8)
		{
			for(index = step ; index < 25; index+=5)
			{
				*(bf+index) = *(p+index) & (0x0F >> rep);
    1954:	82 2f       	mov	r24, r18
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	ec e8       	ldi	r30, 0x8C	; 140
    195a:	f2 e0       	ldi	r31, 0x02	; 2
    195c:	e8 0f       	add	r30, r24
    195e:	f9 1f       	adc	r31, r25
    1960:	84 0f       	add	r24, r20
    1962:	95 1f       	adc	r25, r21
    1964:	dc 01       	movw	r26, r24
    1966:	8c 91       	ld	r24, X
    1968:	83 23       	and	r24, r19
    196a:	80 83       	st	Z, r24
	for(index=0; index<25; index++) *(bf+index) = *(p+index);
	for(step = 0; step < 5 ; step++)
	{
		for(rep = 0; rep < 9; rep+=8)
		{
			for(index = step ; index < 25; index+=5)
    196c:	2b 5f       	subi	r18, 0xFB	; 251
    196e:	29 31       	cpi	r18, 0x19	; 25
    1970:	88 f3       	brcs	.-30     	; 0x1954 <TypeOut+0x388>
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1972:	be 85       	ldd	r27, Y+14	; 0x0e
    1974:	bb 23       	and	r27, r27
    1976:	09 f0       	breq	.+2      	; 0x197a <TypeOut+0x3ae>
    1978:	07 c1       	rjmp	.+526    	; 0x1b88 <TypeOut+0x5bc>
    197a:	1e c1       	rjmp	.+572    	; 0x1bb8 <TypeOut+0x5ec>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    197c:	8d 31       	cpi	r24, 0x1D	; 29
    197e:	c8 f4       	brcc	.+50     	; 0x19b2 <TypeOut+0x3e6>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	fc 01       	movw	r30, r24
    1984:	ee 0f       	add	r30, r30
    1986:	ff 1f       	adc	r31, r31
    1988:	ee 0f       	add	r30, r30
    198a:	ff 1f       	adc	r31, r31
    198c:	ee 0f       	add	r30, r30
    198e:	ff 1f       	adc	r31, r31
    1990:	e8 1b       	sub	r30, r24
    1992:	f9 0b       	sbc	r31, r25
    1994:	ec 0d       	add	r30, r12
    1996:	fd 1d       	adc	r31, r13
    1998:	a2 81       	ldd	r26, Z+2	; 0x02
    199a:	b3 81       	ldd	r27, Z+3	; 0x03
    199c:	2c 91       	ld	r18, X
    199e:	cb 01       	movw	r24, r22
    19a0:	06 80       	ldd	r0, Z+6	; 0x06
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <TypeOut+0x3dc>
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	0a 94       	dec	r0
    19aa:	e2 f7       	brpl	.-8      	; 0x19a4 <TypeOut+0x3d8>
    19ac:	80 95       	com	r24
    19ae:	82 23       	and	r24, r18
    19b0:	8c 93       	st	X, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    19b2:	f7 01       	movw	r30, r14
    19b4:	81 91       	ld	r24, Z+
    19b6:	7f 01       	movw	r14, r30
    19b8:	88 23       	and	r24, r24
    19ba:	01 f7       	brne	.-64     	; 0x197c <TypeOut+0x3b0>
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    19bc:	2b 9a       	sbi	0x05, 3	; 5
	HoldDisplay(p, 50);
}
/************************************************************************/
/* Delete effect                                                         */
/************************************************************************/
void TypeOut(uint8_t *p, uint8_t time)
    19be:	75 01       	movw	r14, r10
    19c0:	fa 01       	movw	r30, r20
	for(index=0; index<5; index++){
		pinsMultiWrite(plex_pins, LOW);
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
    19c2:	91 91       	ld	r25, Z+
}

inline void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    19c4:	d8 01       	movw	r26, r16
    19c6:	8c 91       	ld	r24, X
    19c8:	85 ff       	sbrs	r24, 5
    19ca:	fc cf       	rjmp	.-8      	; 0x19c4 <TypeOut+0x3f8>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    19cc:	d4 01       	movw	r26, r8
    19ce:	9c 93       	st	X, r25
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
		pinsMultiWrite(plex_pins, LOW);
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
    19d0:	ee 15       	cp	r30, r14
    19d2:	ff 05       	cpc	r31, r15
    19d4:	b1 f7       	brne	.-20     	; 0x19c2 <TypeOut+0x3f6>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    19d6:	2b 98       	cbi	0x05, 3	; 5
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
    19d8:	1c 99       	sbic	0x03, 4	; 3
    19da:	fe cf       	rjmp	.-4      	; 0x19d8 <TypeOut+0x40c>
    19dc:	2b 81       	ldd	r18, Y+3	; 0x03
    19de:	3c 81       	ldd	r19, Y+4	; 0x04
    19e0:	a1 01       	movw	r20, r2
    19e2:	3f 8f       	std	Y+31, r19	; 0x1f
    19e4:	2e 8f       	std	Y+30, r18	; 0x1e
		///////////////////////////////////////////////////////
		for(bit = 0; bit < 8 ; bit++)
			pinWrite(int_data_pins[bit], (*p & (1  << bit)));
    19e6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    19e8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    19ea:	21 91       	ld	r18, Z+
    19ec:	ff 8f       	std	Y+31, r31	; 0x1f
    19ee:	ee 8f       	std	Y+30, r30	; 0x1e
    19f0:	d7 01       	movw	r26, r14
    19f2:	3c 91       	ld	r19, X
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    19f4:	2d 31       	cpi	r18, 0x1D	; 29
    19f6:	08 f0       	brcs	.+2      	; 0x19fa <TypeOut+0x42e>
    19f8:	3e c0       	rjmp	.+124    	; 0x1a76 <TypeOut+0x4aa>
    19fa:	fb 01       	movw	r30, r22
    19fc:	04 2e       	mov	r0, r20
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <TypeOut+0x438>
    1a00:	ee 0f       	add	r30, r30
    1a02:	ff 1f       	adc	r31, r31
    1a04:	0a 94       	dec	r0
    1a06:	e2 f7       	brpl	.-8      	; 0x1a00 <TypeOut+0x434>
    1a08:	cf 01       	movw	r24, r30
    1a0a:	83 23       	and	r24, r19
		if (value) {
    1a0c:	d1 f0       	breq	.+52     	; 0x1a42 <TypeOut+0x476>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1a0e:	82 2f       	mov	r24, r18
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	fc 01       	movw	r30, r24
    1a14:	ee 0f       	add	r30, r30
    1a16:	ff 1f       	adc	r31, r31
    1a18:	ee 0f       	add	r30, r30
    1a1a:	ff 1f       	adc	r31, r31
    1a1c:	ee 0f       	add	r30, r30
    1a1e:	ff 1f       	adc	r31, r31
    1a20:	e8 1b       	sub	r30, r24
    1a22:	f9 0b       	sbc	r31, r25
    1a24:	ec 0d       	add	r30, r12
    1a26:	fd 1d       	adc	r31, r13
    1a28:	a2 81       	ldd	r26, Z+2	; 0x02
    1a2a:	b3 81       	ldd	r27, Z+3	; 0x03
    1a2c:	2c 91       	ld	r18, X
    1a2e:	cb 01       	movw	r24, r22
    1a30:	06 80       	ldd	r0, Z+6	; 0x06
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <TypeOut+0x46c>
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	0a 94       	dec	r0
    1a3a:	e2 f7       	brpl	.-8      	; 0x1a34 <TypeOut+0x468>
    1a3c:	82 2b       	or	r24, r18
    1a3e:	8c 93       	st	X, r24
    1a40:	1a c0       	rjmp	.+52     	; 0x1a76 <TypeOut+0x4aa>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a42:	82 2f       	mov	r24, r18
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	fc 01       	movw	r30, r24
    1a48:	ee 0f       	add	r30, r30
    1a4a:	ff 1f       	adc	r31, r31
    1a4c:	ee 0f       	add	r30, r30
    1a4e:	ff 1f       	adc	r31, r31
    1a50:	ee 0f       	add	r30, r30
    1a52:	ff 1f       	adc	r31, r31
    1a54:	e8 1b       	sub	r30, r24
    1a56:	f9 0b       	sbc	r31, r25
    1a58:	ec 0d       	add	r30, r12
    1a5a:	fd 1d       	adc	r31, r13
    1a5c:	a2 81       	ldd	r26, Z+2	; 0x02
    1a5e:	b3 81       	ldd	r27, Z+3	; 0x03
    1a60:	2c 91       	ld	r18, X
    1a62:	cb 01       	movw	r24, r22
    1a64:	06 80       	ldd	r0, Z+6	; 0x06
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <TypeOut+0x4a0>
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	0a 94       	dec	r0
    1a6e:	e2 f7       	brpl	.-8      	; 0x1a68 <TypeOut+0x49c>
    1a70:	80 95       	com	r24
    1a72:	82 23       	and	r24, r18
    1a74:	8c 93       	st	X, r24
    1a76:	4f 5f       	subi	r20, 0xFF	; 255
    1a78:	5f 4f       	sbci	r21, 0xFF	; 255
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
		///////////////////////////////////////////////////////
		for(bit = 0; bit < 8 ; bit++)
    1a7a:	48 30       	cpi	r20, 0x08	; 8
    1a7c:	51 05       	cpc	r21, r1
    1a7e:	09 f0       	breq	.+2      	; 0x1a82 <TypeOut+0x4b6>
    1a80:	b2 cf       	rjmp	.-156    	; 0x19e6 <TypeOut+0x41a>
			pinWrite(int_data_pins[bit], (*p & (1  << bit)));
		p++;
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
    1a82:	d3 01       	movw	r26, r6
    1a84:	8d 91       	ld	r24, X+
    1a86:	3d 01       	movw	r6, r26
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1a88:	8d 31       	cpi	r24, 0x1D	; 29
    1a8a:	c0 f4       	brcc	.+48     	; 0x1abc <TypeOut+0x4f0>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	fc 01       	movw	r30, r24
    1a90:	ee 0f       	add	r30, r30
    1a92:	ff 1f       	adc	r31, r31
    1a94:	ee 0f       	add	r30, r30
    1a96:	ff 1f       	adc	r31, r31
    1a98:	ee 0f       	add	r30, r30
    1a9a:	ff 1f       	adc	r31, r31
    1a9c:	e8 1b       	sub	r30, r24
    1a9e:	f9 0b       	sbc	r31, r25
    1aa0:	ec 0d       	add	r30, r12
    1aa2:	fd 1d       	adc	r31, r13
    1aa4:	a2 81       	ldd	r26, Z+2	; 0x02
    1aa6:	b3 81       	ldd	r27, Z+3	; 0x03
    1aa8:	2c 91       	ld	r18, X
    1aaa:	cb 01       	movw	r24, r22
    1aac:	06 80       	ldd	r0, Z+6	; 0x06
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <TypeOut+0x4e8>
    1ab0:	88 0f       	add	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	0a 94       	dec	r0
    1ab6:	e2 f7       	brpl	.-8      	; 0x1ab0 <TypeOut+0x4e4>
    1ab8:	82 2b       	or	r24, r18
    1aba:	8c 93       	st	X, r24
    1abc:	ef e1       	ldi	r30, 0x1F	; 31
    1abe:	fe e4       	ldi	r31, 0x4E	; 78
    1ac0:	31 97       	sbiw	r30, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <TypeOut+0x4f4>
    1ac4:	00 c0       	rjmp	.+0      	; 0x1ac6 <TypeOut+0x4fa>
    1ac6:	00 00       	nop
    1ac8:	49 81       	ldd	r20, Y+1	; 0x01
    1aca:	5a 81       	ldd	r21, Y+2	; 0x02
    1acc:	1b c0       	rjmp	.+54     	; 0x1b04 <TypeOut+0x538>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1ace:	8d 31       	cpi	r24, 0x1D	; 29
    1ad0:	c8 f4       	brcc	.+50     	; 0x1b04 <TypeOut+0x538>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	ee 0f       	add	r30, r30
    1ad8:	ff 1f       	adc	r31, r31
    1ada:	ee 0f       	add	r30, r30
    1adc:	ff 1f       	adc	r31, r31
    1ade:	ee 0f       	add	r30, r30
    1ae0:	ff 1f       	adc	r31, r31
    1ae2:	e8 1b       	sub	r30, r24
    1ae4:	f9 0b       	sbc	r31, r25
    1ae6:	ec 0d       	add	r30, r12
    1ae8:	fd 1d       	adc	r31, r13
    1aea:	a2 81       	ldd	r26, Z+2	; 0x02
    1aec:	b3 81       	ldd	r27, Z+3	; 0x03
    1aee:	2c 91       	ld	r18, X
    1af0:	cb 01       	movw	r24, r22
    1af2:	06 80       	ldd	r0, Z+6	; 0x06
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <TypeOut+0x52e>
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	0a 94       	dec	r0
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <TypeOut+0x52a>
    1afe:	80 95       	com	r24
    1b00:	82 23       	and	r24, r18
    1b02:	8c 93       	st	X, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1b04:	da 01       	movw	r26, r20
    1b06:	8d 91       	ld	r24, X+
    1b08:	ad 01       	movw	r20, r26
    1b0a:	88 23       	and	r24, r24
    1b0c:	01 f7       	brne	.-64     	; 0x1ace <TypeOut+0x502>
    1b0e:	4d 81       	ldd	r20, Y+5	; 0x05
    1b10:	5f 81       	ldd	r21, Y+7	; 0x07
    1b12:	1b c0       	rjmp	.+54     	; 0x1b4a <TypeOut+0x57e>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1b14:	8d 31       	cpi	r24, 0x1D	; 29
    1b16:	c8 f4       	brcc	.+50     	; 0x1b4a <TypeOut+0x57e>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	ee 0f       	add	r30, r30
    1b1e:	ff 1f       	adc	r31, r31
    1b20:	ee 0f       	add	r30, r30
    1b22:	ff 1f       	adc	r31, r31
    1b24:	ee 0f       	add	r30, r30
    1b26:	ff 1f       	adc	r31, r31
    1b28:	e8 1b       	sub	r30, r24
    1b2a:	f9 0b       	sbc	r31, r25
    1b2c:	ec 0d       	add	r30, r12
    1b2e:	fd 1d       	adc	r31, r13
    1b30:	a2 81       	ldd	r26, Z+2	; 0x02
    1b32:	b3 81       	ldd	r27, Z+3	; 0x03
    1b34:	2c 91       	ld	r18, X
    1b36:	cb 01       	movw	r24, r22
    1b38:	06 80       	ldd	r0, Z+6	; 0x06
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <TypeOut+0x574>
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	0a 94       	dec	r0
    1b42:	e2 f7       	brpl	.-8      	; 0x1b3c <TypeOut+0x570>
    1b44:	80 95       	com	r24
    1b46:	82 23       	and	r24, r18
    1b48:	8c 93       	st	X, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1b4a:	fa 01       	movw	r30, r20
    1b4c:	81 91       	ld	r24, Z+
    1b4e:	af 01       	movw	r20, r30
    1b50:	88 23       	and	r24, r24
    1b52:	01 f7       	brne	.-64     	; 0x1b14 <TypeOut+0x548>
    1b54:	85 e0       	ldi	r24, 0x05	; 5
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	a8 0e       	add	r10, r24
    1b5a:	b9 1e       	adc	r11, r25
/* Display data                                                         */
/************************************************************************/
static inline void Display(uint8_t *p)
{
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
    1b5c:	64 14       	cp	r6, r4
    1b5e:	75 04       	cpc	r7, r5
    1b60:	31 f0       	breq	.+12     	; 0x1b6e <TypeOut+0x5a2>
	HoldDisplay(p, 50);
}
/************************************************************************/
/* Delete effect                                                         */
/************************************************************************/
void TypeOut(uint8_t *p, uint8_t time)
    1b62:	a5 01       	movw	r20, r10
    1b64:	44 50       	subi	r20, 0x04	; 4
    1b66:	50 40       	sbci	r21, 0x00	; 0
    1b68:	e9 80       	ldd	r14, Y+1	; 0x01
    1b6a:	fa 80       	ldd	r15, Y+2	; 0x02
    1b6c:	22 cf       	rjmp	.-444    	; 0x19b2 <TypeOut+0x3e6>
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
		_delay_ms(5);
		Clear();
	}
	delayms = 1;
    1b6e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b70:	90 93 00 01 	sts	0x0100, r25
    1b74:	a9 89       	ldd	r26, Y+17	; 0x11
    1b76:	a0 93 01 01 	sts	0x0101, r26
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1b7a:	b8 85       	ldd	r27, Y+8	; 0x08
    1b7c:	bf 5f       	subi	r27, 0xFF	; 255
    1b7e:	b8 87       	std	Y+8, r27	; 0x08
    1b80:	ee 85       	ldd	r30, Y+14	; 0x0e
    1b82:	be 17       	cp	r27, r30
    1b84:	81 f4       	brne	.+32     	; 0x1ba6 <TypeOut+0x5da>
    1b86:	18 c0       	rjmp	.+48     	; 0x1bb8 <TypeOut+0x5ec>
    1b88:	18 86       	std	Y+8, r1	; 0x08
    1b8a:	ff 89       	ldd	r31, Y+23	; 0x17
    1b8c:	fa 87       	std	Y+10, r31	; 0x0a
    1b8e:	28 8d       	ldd	r18, Y+24	; 0x18
    1b90:	2c 87       	std	Y+12, r18	; 0x0c
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
    1b92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b94:	8b 83       	std	Y+3, r24	; 0x03
    1b96:	98 89       	ldd	r25, Y+16	; 0x10
    1b98:	9c 83       	std	Y+4, r25	; 0x04
    1b9a:	22 24       	eor	r2, r2
    1b9c:	33 24       	eor	r3, r3
    1b9e:	aa 89       	ldd	r26, Y+18	; 0x12
    1ba0:	ad 83       	std	Y+5, r26	; 0x05
    1ba2:	bb 89       	ldd	r27, Y+19	; 0x13
    1ba4:	bf 83       	std	Y+7, r27	; 0x07
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1ba6:	0f 2e       	mov	r0, r31
    1ba8:	f0 e9       	ldi	r31, 0x90	; 144
    1baa:	af 2e       	mov	r10, r31
    1bac:	f2 e0       	ldi	r31, 0x02	; 2
    1bae:	bf 2e       	mov	r11, r31
    1bb0:	f0 2d       	mov	r31, r0
    1bb2:	6a 84       	ldd	r6, Y+10	; 0x0a
    1bb4:	7c 84       	ldd	r7, Y+12	; 0x0c
    1bb6:	d5 cf       	rjmp	.-86     	; 0x1b62 <TypeOut+0x596>
    1bb8:	ed 89       	ldd	r30, Y+21	; 0x15
    1bba:	fe 89       	ldd	r31, Y+22	; 0x16
    1bbc:	38 96       	adiw	r30, 0x08	; 8
    1bbe:	fe 8b       	std	Y+22, r31	; 0x16
    1bc0:	ed 8b       	std	Y+21, r30	; 0x15
	uint8_t index, step, rep = 0;
	HoldDisplay(p, 10);
	for(index=0; index<25; index++) *(bf+index) = *(p+index);
	for(step = 0; step < 5 ; step++)
	{
		for(rep = 0; rep < 9; rep+=8)
    1bc2:	e0 31       	cpi	r30, 0x10	; 16
    1bc4:	f1 05       	cpc	r31, r1
    1bc6:	89 f0       	breq	.+34     	; 0x1bea <TypeOut+0x61e>
		{
			for(index = step ; index < 25; index+=5)
    1bc8:	fc 89       	ldd	r31, Y+20	; 0x14
    1bca:	f9 31       	cpi	r31, 0x19	; 25
    1bcc:	08 f0       	brcs	.+2      	; 0x1bd0 <TypeOut+0x604>
    1bce:	d1 ce       	rjmp	.-606    	; 0x1972 <TypeOut+0x3a6>
			{
				*(bf+index) = *(p+index) & (0x0F >> rep);
    1bd0:	8f e0       	ldi	r24, 0x0F	; 15
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	0d 88       	ldd	r0, Y+21	; 0x15
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <TypeOut+0x610>
    1bd8:	95 95       	asr	r25
    1bda:	87 95       	ror	r24
    1bdc:	0a 94       	dec	r0
    1bde:	e2 f7       	brpl	.-8      	; 0x1bd8 <TypeOut+0x60c>
    1be0:	38 2f       	mov	r19, r24
    1be2:	2f 2f       	mov	r18, r31
    1be4:	49 8d       	ldd	r20, Y+25	; 0x19
    1be6:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1be8:	b5 ce       	rjmp	.-662    	; 0x1954 <TypeOut+0x388>
	InitBuffer();
	uint8_t *bf = buffer;
	uint8_t index, step, rep = 0;
	HoldDisplay(p, 10);
	for(index=0; index<25; index++) *(bf+index) = *(p+index);
	for(step = 0; step < 5 ; step++)
    1bea:	2c 89       	ldd	r18, Y+20	; 0x14
    1bec:	2f 5f       	subi	r18, 0xFF	; 255
    1bee:	2c 8b       	std	Y+20, r18	; 0x14
    1bf0:	25 30       	cpi	r18, 0x05	; 5
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <TypeOut+0x62a>
    1bf4:	1a c1       	rjmp	.+564    	; 0x1e2a <TypeOut+0x85e>
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1bf6:	1e 8a       	std	Y+22, r1	; 0x16
    1bf8:	1d 8a       	std	Y+21, r1	; 0x15
	HoldDisplay(p, 50);
}
/************************************************************************/
/* Delete effect                                                         */
/************************************************************************/
void TypeOut(uint8_t *p, uint8_t time)
    1bfa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c00:	9a 83       	std	Y+2, r25	; 0x02
    1c02:	e2 cf       	rjmp	.-60     	; 0x1bc8 <TypeOut+0x5fc>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1c04:	8d 31       	cpi	r24, 0x1D	; 29
    1c06:	c8 f4       	brcc	.+50     	; 0x1c3a <TypeOut+0x66e>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	ee 0f       	add	r30, r30
    1c0e:	ff 1f       	adc	r31, r31
    1c10:	ee 0f       	add	r30, r30
    1c12:	ff 1f       	adc	r31, r31
    1c14:	ee 0f       	add	r30, r30
    1c16:	ff 1f       	adc	r31, r31
    1c18:	e8 1b       	sub	r30, r24
    1c1a:	f9 0b       	sbc	r31, r25
    1c1c:	ee 0d       	add	r30, r14
    1c1e:	ff 1d       	adc	r31, r15
    1c20:	a2 81       	ldd	r26, Z+2	; 0x02
    1c22:	b3 81       	ldd	r27, Z+3	; 0x03
    1c24:	2c 91       	ld	r18, X
    1c26:	c8 01       	movw	r24, r16
    1c28:	06 80       	ldd	r0, Z+6	; 0x06
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <TypeOut+0x664>
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	0a 94       	dec	r0
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <TypeOut+0x660>
    1c34:	80 95       	com	r24
    1c36:	82 23       	and	r24, r18
    1c38:	8c 93       	st	X, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1c3a:	d5 01       	movw	r26, r10
    1c3c:	8d 91       	ld	r24, X+
    1c3e:	5d 01       	movw	r10, r26
    1c40:	88 23       	and	r24, r24
    1c42:	01 f7       	brne	.-64     	; 0x1c04 <TypeOut+0x638>
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1c44:	2b 9a       	sbi	0x05, 3	; 5
    1c46:	54 01       	movw	r10, r8
    1c48:	fa 01       	movw	r30, r20
	for(index=0; index<5; index++){
		pinsMultiWrite(plex_pins, LOW);
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
    1c4a:	91 91       	ld	r25, Z+
}

inline void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1c4c:	db 01       	movw	r26, r22
    1c4e:	8c 91       	ld	r24, X
    1c50:	85 ff       	sbrs	r24, 5
    1c52:	fc cf       	rjmp	.-8      	; 0x1c4c <TypeOut+0x680>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    1c54:	d6 01       	movw	r26, r12
    1c56:	9c 93       	st	X, r25
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
		pinsMultiWrite(plex_pins, LOW);
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
    1c58:	ea 15       	cp	r30, r10
    1c5a:	fb 05       	cpc	r31, r11
    1c5c:	b1 f7       	brne	.-20     	; 0x1c4a <TypeOut+0x67e>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c5e:	2b 98       	cbi	0x05, 3	; 5
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
    1c60:	1c 99       	sbic	0x03, 4	; 3
    1c62:	fe cf       	rjmp	.-4      	; 0x1c60 <TypeOut+0x694>
    1c64:	af 85       	ldd	r26, Y+15	; 0x0f
    1c66:	b8 89       	ldd	r27, Y+16	; 0x10
    1c68:	a1 01       	movw	r20, r2
		///////////////////////////////////////////////////////
		for(bit = 0; bit < 8 ; bit++)
			pinWrite(int_data_pins[bit], (*p & (1  << bit)));
    1c6a:	8d 91       	ld	r24, X+
    1c6c:	f5 01       	movw	r30, r10
    1c6e:	90 81       	ld	r25, Z
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1c70:	8d 31       	cpi	r24, 0x1D	; 29
    1c72:	08 f0       	brcs	.+2      	; 0x1c76 <TypeOut+0x6aa>
    1c74:	52 c0       	rjmp	.+164    	; 0x1d1a <TypeOut+0x74e>
    1c76:	f8 01       	movw	r30, r16
    1c78:	04 2e       	mov	r0, r20
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <TypeOut+0x6b4>
    1c7c:	ee 0f       	add	r30, r30
    1c7e:	ff 1f       	adc	r31, r31
    1c80:	0a 94       	dec	r0
    1c82:	e2 f7       	brpl	.-8      	; 0x1c7c <TypeOut+0x6b0>
    1c84:	9f 01       	movw	r18, r30
    1c86:	29 23       	and	r18, r25
		if (value) {
    1c88:	21 f1       	breq	.+72     	; 0x1cd2 <TypeOut+0x706>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	ee 0f       	add	r30, r30
    1c90:	ff 1f       	adc	r31, r31
    1c92:	ee 0f       	add	r30, r30
    1c94:	ff 1f       	adc	r31, r31
    1c96:	ee 0f       	add	r30, r30
    1c98:	ff 1f       	adc	r31, r31
    1c9a:	e8 1b       	sub	r30, r24
    1c9c:	f9 0b       	sbc	r31, r25
    1c9e:	cf 01       	movw	r24, r30
    1ca0:	8e 0d       	add	r24, r14
    1ca2:	9f 1d       	adc	r25, r15
    1ca4:	9b 87       	std	Y+11, r25	; 0x0b
    1ca6:	8a 87       	std	Y+10, r24	; 0x0a
    1ca8:	fc 01       	movw	r30, r24
    1caa:	02 80       	ldd	r0, Z+2	; 0x02
    1cac:	f3 81       	ldd	r31, Z+3	; 0x03
    1cae:	e0 2d       	mov	r30, r0
    1cb0:	fe 83       	std	Y+6, r31	; 0x06
    1cb2:	ed 83       	std	Y+5, r30	; 0x05
    1cb4:	20 81       	ld	r18, Z
    1cb6:	c8 01       	movw	r24, r16
    1cb8:	ea 85       	ldd	r30, Y+10	; 0x0a
    1cba:	fb 85       	ldd	r31, Y+11	; 0x0b
    1cbc:	06 80       	ldd	r0, Z+6	; 0x06
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <TypeOut+0x6f8>
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	0a 94       	dec	r0
    1cc6:	e2 f7       	brpl	.-8      	; 0x1cc0 <TypeOut+0x6f4>
    1cc8:	82 2b       	or	r24, r18
    1cca:	ed 81       	ldd	r30, Y+5	; 0x05
    1ccc:	fe 81       	ldd	r31, Y+6	; 0x06
    1cce:	80 83       	st	Z, r24
    1cd0:	24 c0       	rjmp	.+72     	; 0x1d1a <TypeOut+0x74e>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	ee 0f       	add	r30, r30
    1cd8:	ff 1f       	adc	r31, r31
    1cda:	ee 0f       	add	r30, r30
    1cdc:	ff 1f       	adc	r31, r31
    1cde:	ee 0f       	add	r30, r30
    1ce0:	ff 1f       	adc	r31, r31
    1ce2:	e8 1b       	sub	r30, r24
    1ce4:	f9 0b       	sbc	r31, r25
    1ce6:	cf 01       	movw	r24, r30
    1ce8:	8e 0d       	add	r24, r14
    1cea:	9f 1d       	adc	r25, r15
    1cec:	9b 87       	std	Y+11, r25	; 0x0b
    1cee:	8a 87       	std	Y+10, r24	; 0x0a
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	02 80       	ldd	r0, Z+2	; 0x02
    1cf4:	f3 81       	ldd	r31, Z+3	; 0x03
    1cf6:	e0 2d       	mov	r30, r0
    1cf8:	fe 83       	std	Y+6, r31	; 0x06
    1cfa:	ed 83       	std	Y+5, r30	; 0x05
    1cfc:	20 81       	ld	r18, Z
    1cfe:	c8 01       	movw	r24, r16
    1d00:	ea 85       	ldd	r30, Y+10	; 0x0a
    1d02:	fb 85       	ldd	r31, Y+11	; 0x0b
    1d04:	06 80       	ldd	r0, Z+6	; 0x06
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <TypeOut+0x740>
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	0a 94       	dec	r0
    1d0e:	e2 f7       	brpl	.-8      	; 0x1d08 <TypeOut+0x73c>
    1d10:	80 95       	com	r24
    1d12:	82 23       	and	r24, r18
    1d14:	ed 81       	ldd	r30, Y+5	; 0x05
    1d16:	fe 81       	ldd	r31, Y+6	; 0x06
    1d18:	80 83       	st	Z, r24
    1d1a:	4f 5f       	subi	r20, 0xFF	; 255
    1d1c:	5f 4f       	sbci	r21, 0xFF	; 255
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
		///////////////////////////////////////////////////////
		for(bit = 0; bit < 8 ; bit++)
    1d1e:	48 30       	cpi	r20, 0x08	; 8
    1d20:	51 05       	cpc	r21, r1
    1d22:	09 f0       	breq	.+2      	; 0x1d26 <TypeOut+0x75a>
    1d24:	a2 cf       	rjmp	.-188    	; 0x1c6a <TypeOut+0x69e>
			pinWrite(int_data_pins[bit], (*p & (1  << bit)));
		p++;
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
    1d26:	d3 01       	movw	r26, r6
    1d28:	8d 91       	ld	r24, X+
    1d2a:	3d 01       	movw	r6, r26
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1d2c:	8d 31       	cpi	r24, 0x1D	; 29
    1d2e:	c0 f4       	brcc	.+48     	; 0x1d60 <TypeOut+0x794>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	fc 01       	movw	r30, r24
    1d34:	ee 0f       	add	r30, r30
    1d36:	ff 1f       	adc	r31, r31
    1d38:	ee 0f       	add	r30, r30
    1d3a:	ff 1f       	adc	r31, r31
    1d3c:	ee 0f       	add	r30, r30
    1d3e:	ff 1f       	adc	r31, r31
    1d40:	e8 1b       	sub	r30, r24
    1d42:	f9 0b       	sbc	r31, r25
    1d44:	ee 0d       	add	r30, r14
    1d46:	ff 1d       	adc	r31, r15
    1d48:	a2 81       	ldd	r26, Z+2	; 0x02
    1d4a:	b3 81       	ldd	r27, Z+3	; 0x03
    1d4c:	2c 91       	ld	r18, X
    1d4e:	c8 01       	movw	r24, r16
    1d50:	06 80       	ldd	r0, Z+6	; 0x06
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <TypeOut+0x78c>
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	0a 94       	dec	r0
    1d5a:	e2 f7       	brpl	.-8      	; 0x1d54 <TypeOut+0x788>
    1d5c:	82 2b       	or	r24, r18
    1d5e:	8c 93       	st	X, r24
    1d60:	ef e1       	ldi	r30, 0x1F	; 31
    1d62:	fe e4       	ldi	r31, 0x4E	; 78
    1d64:	31 97       	sbiw	r30, 0x01	; 1
    1d66:	f1 f7       	brne	.-4      	; 0x1d64 <TypeOut+0x798>
    1d68:	00 c0       	rjmp	.+0      	; 0x1d6a <TypeOut+0x79e>
    1d6a:	00 00       	nop
    1d6c:	49 81       	ldd	r20, Y+1	; 0x01
    1d6e:	59 85       	ldd	r21, Y+9	; 0x09
    1d70:	1b c0       	rjmp	.+54     	; 0x1da8 <TypeOut+0x7dc>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1d72:	8d 31       	cpi	r24, 0x1D	; 29
    1d74:	c8 f4       	brcc	.+50     	; 0x1da8 <TypeOut+0x7dc>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	fc 01       	movw	r30, r24
    1d7a:	ee 0f       	add	r30, r30
    1d7c:	ff 1f       	adc	r31, r31
    1d7e:	ee 0f       	add	r30, r30
    1d80:	ff 1f       	adc	r31, r31
    1d82:	ee 0f       	add	r30, r30
    1d84:	ff 1f       	adc	r31, r31
    1d86:	e8 1b       	sub	r30, r24
    1d88:	f9 0b       	sbc	r31, r25
    1d8a:	ee 0d       	add	r30, r14
    1d8c:	ff 1d       	adc	r31, r15
    1d8e:	a2 81       	ldd	r26, Z+2	; 0x02
    1d90:	b3 81       	ldd	r27, Z+3	; 0x03
    1d92:	2c 91       	ld	r18, X
    1d94:	c8 01       	movw	r24, r16
    1d96:	06 80       	ldd	r0, Z+6	; 0x06
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <TypeOut+0x7d2>
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	0a 94       	dec	r0
    1da0:	e2 f7       	brpl	.-8      	; 0x1d9a <TypeOut+0x7ce>
    1da2:	80 95       	com	r24
    1da4:	82 23       	and	r24, r18
    1da6:	8c 93       	st	X, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1da8:	da 01       	movw	r26, r20
    1daa:	8d 91       	ld	r24, X+
    1dac:	ad 01       	movw	r20, r26
    1dae:	88 23       	and	r24, r24
    1db0:	01 f7       	brne	.-64     	; 0x1d72 <TypeOut+0x7a6>
    1db2:	4a 89       	ldd	r20, Y+18	; 0x12
    1db4:	5b 89       	ldd	r21, Y+19	; 0x13
    1db6:	1b c0       	rjmp	.+54     	; 0x1dee <TypeOut+0x822>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1db8:	8d 31       	cpi	r24, 0x1D	; 29
    1dba:	c8 f4       	brcc	.+50     	; 0x1dee <TypeOut+0x822>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	ee 0f       	add	r30, r30
    1dc2:	ff 1f       	adc	r31, r31
    1dc4:	ee 0f       	add	r30, r30
    1dc6:	ff 1f       	adc	r31, r31
    1dc8:	ee 0f       	add	r30, r30
    1dca:	ff 1f       	adc	r31, r31
    1dcc:	e8 1b       	sub	r30, r24
    1dce:	f9 0b       	sbc	r31, r25
    1dd0:	ee 0d       	add	r30, r14
    1dd2:	ff 1d       	adc	r31, r15
    1dd4:	a2 81       	ldd	r26, Z+2	; 0x02
    1dd6:	b3 81       	ldd	r27, Z+3	; 0x03
    1dd8:	2c 91       	ld	r18, X
    1dda:	c8 01       	movw	r24, r16
    1ddc:	06 80       	ldd	r0, Z+6	; 0x06
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <TypeOut+0x818>
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	0a 94       	dec	r0
    1de6:	e2 f7       	brpl	.-8      	; 0x1de0 <TypeOut+0x814>
    1de8:	80 95       	com	r24
    1dea:	82 23       	and	r24, r18
    1dec:	8c 93       	st	X, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1dee:	fa 01       	movw	r30, r20
    1df0:	81 91       	ld	r24, Z+
    1df2:	af 01       	movw	r20, r30
    1df4:	88 23       	and	r24, r24
    1df6:	01 f7       	brne	.-64     	; 0x1db8 <TypeOut+0x7ec>
    1df8:	85 e0       	ldi	r24, 0x05	; 5
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	88 0e       	add	r8, r24
    1dfe:	99 1e       	adc	r9, r25
/* Display data                                                         */
/************************************************************************/
static inline void Display(uint8_t *p)
{
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
    1e00:	64 14       	cp	r6, r4
    1e02:	75 04       	cpc	r7, r5
    1e04:	31 f0       	breq	.+12     	; 0x1e12 <TypeOut+0x846>
	HoldDisplay(p, 50);
}
/************************************************************************/
/* Delete effect                                                         */
/************************************************************************/
void TypeOut(uint8_t *p, uint8_t time)
    1e06:	a4 01       	movw	r20, r8
    1e08:	44 50       	subi	r20, 0x04	; 4
    1e0a:	50 40       	sbci	r21, 0x00	; 0
    1e0c:	a9 80       	ldd	r10, Y+1	; 0x01
    1e0e:	b9 84       	ldd	r11, Y+9	; 0x09
    1e10:	14 cf       	rjmp	.-472    	; 0x1c3a <TypeOut+0x66e>
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
		_delay_ms(5);
		Clear();
	}
	delayms = 1;
    1e12:	9b 81       	ldd	r25, Y+3	; 0x03
    1e14:	90 93 00 01 	sts	0x0100, r25
    1e18:	ac 81       	ldd	r26, Y+4	; 0x04
    1e1a:	a0 93 01 01 	sts	0x0101, r26
    1e1e:	ba 81       	ldd	r27, Y+2	; 0x02
    1e20:	b1 50       	subi	r27, 0x01	; 1
    1e22:	ba 83       	std	Y+2, r27	; 0x02
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1e24:	bb 23       	and	r27, r27
    1e26:	c1 f4       	brne	.+48     	; 0x1e58 <TypeOut+0x88c>
    1e28:	20 c0       	rjmp	.+64     	; 0x1e6a <TypeOut+0x89e>
	InitBuffer();
	uint8_t *bf = buffer;
	uint8_t index, step, rep = 0;
	HoldDisplay(p, 10);
	for(index=0; index<25; index++) *(bf+index) = *(p+index);
	for(step = 0; step < 5 ; step++)
    1e2a:	e2 e3       	ldi	r30, 0x32	; 50
    1e2c:	ea 83       	std	Y+2, r30	; 0x02
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1e2e:	0f 2e       	mov	r0, r31
    1e30:	fe eb       	ldi	r31, 0xBE	; 190
    1e32:	ef 2e       	mov	r14, r31
    1e34:	f1 e0       	ldi	r31, 0x01	; 1
    1e36:	ff 2e       	mov	r15, r31
    1e38:	f0 2d       	mov	r31, r0
    1e3a:	01 e0       	ldi	r16, 0x01	; 1
    1e3c:	10 e0       	ldi	r17, 0x00	; 0
    1e3e:	0b 83       	std	Y+3, r16	; 0x03
    1e40:	1c 83       	std	Y+4, r17	; 0x04
}

inline void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1e42:	60 ec       	ldi	r22, 0xC0	; 192
    1e44:	70 e0       	ldi	r23, 0x00	; 0
	/* Put data into buffer, sends the data */
	UDR0 = data;
    1e46:	0f 2e       	mov	r0, r31
    1e48:	f6 ec       	ldi	r31, 0xC6	; 198
    1e4a:	cf 2e       	mov	r12, r31
    1e4c:	dd 24       	eor	r13, r13
    1e4e:	f0 2d       	mov	r31, r0
	HoldDisplay(p, 50);
}
/************************************************************************/
/* Delete effect                                                         */
/************************************************************************/
void TypeOut(uint8_t *p, uint8_t time)
    1e50:	9b 8c       	ldd	r9, Y+27	; 0x1b
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
    1e52:	22 24       	eor	r2, r2
    1e54:	33 24       	eor	r3, r3
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1e56:	99 82       	std	Y+1, r9	; 0x01
/* Hold display for specified time                                      */
/************************************************************************/
static inline void HoldDisplay(uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1e58:	0f 2e       	mov	r0, r31
    1e5a:	f0 e9       	ldi	r31, 0x90	; 144
    1e5c:	8f 2e       	mov	r8, r31
    1e5e:	f2 e0       	ldi	r31, 0x02	; 2
    1e60:	9f 2e       	mov	r9, r31
    1e62:	f0 2d       	mov	r31, r0
    1e64:	6f 88       	ldd	r6, Y+23	; 0x17
    1e66:	78 8c       	ldd	r7, Y+24	; 0x18
    1e68:	ce cf       	rjmp	.-100    	; 0x1e06 <TypeOut+0x83a>
			}
			HoldDisplay(bf, time);
		}
	}
	HoldDisplay(bf, 50);
}
    1e6a:	6f 96       	adiw	r28, 0x1f	; 31
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	df 91       	pop	r29
    1e78:	cf 91       	pop	r28
    1e7a:	1f 91       	pop	r17
    1e7c:	0f 91       	pop	r16
    1e7e:	ff 90       	pop	r15
    1e80:	ef 90       	pop	r14
    1e82:	df 90       	pop	r13
    1e84:	cf 90       	pop	r12
    1e86:	bf 90       	pop	r11
    1e88:	af 90       	pop	r10
    1e8a:	9f 90       	pop	r9
    1e8c:	8f 90       	pop	r8
    1e8e:	7f 90       	pop	r7
    1e90:	6f 90       	pop	r6
    1e92:	5f 90       	pop	r5
    1e94:	4f 90       	pop	r4
    1e96:	3f 90       	pop	r3
    1e98:	2f 90       	pop	r2
    1e9a:	08 95       	ret

00001e9c <__vector_1>:
	TypeIn(planet, 2);
	TypeOut(planet, 2);
}

ISR(INT0_vect)
{
    1e9c:	1f 92       	push	r1
    1e9e:	0f 92       	push	r0
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	0f 92       	push	r0
    1ea4:	11 24       	eor	r1, r1
    1ea6:	2f 93       	push	r18
    1ea8:	3f 93       	push	r19
    1eaa:	4f 93       	push	r20
    1eac:	5f 93       	push	r21
    1eae:	6f 93       	push	r22
    1eb0:	7f 93       	push	r23
    1eb2:	8f 93       	push	r24
    1eb4:	9f 93       	push	r25
    1eb6:	af 93       	push	r26
    1eb8:	bf 93       	push	r27
    1eba:	cf 93       	push	r28
    1ebc:	df 93       	push	r29
    1ebe:	ef 93       	push	r30
    1ec0:	ff 93       	push	r31
	if(flag_execute)
    1ec2:	80 91 8a 02 	lds	r24, 0x028A
    1ec6:	88 23       	and	r24, r24
    1ec8:	a1 f0       	breq	.+40     	; 0x1ef2 <__vector_1+0x56>
static inline void InfoRoutine()
{
	/************************************************************************/
	/* CARBON RICH PLANET                                                   */
	/************************************************************************/
	FallIn(carbon, 2);
    1eca:	81 e4       	ldi	r24, 0x41	; 65
    1ecc:	91 e0       	ldi	r25, 0x01	; 1
    1ece:	62 e0       	ldi	r22, 0x02	; 2
    1ed0:	0e 94 b4 00 	call	0x168	; 0x168 <FallIn>
	FallOut(rich, 2);
    1ed4:	88 e2       	ldi	r24, 0x28	; 40
    1ed6:	91 e0       	ldi	r25, 0x01	; 1
    1ed8:	62 e0       	ldi	r22, 0x02	; 2
    1eda:	0e 94 ae 03 	call	0x75c	; 0x75c <FallOut>
	TypeIn(planet, 2);
    1ede:	cf e0       	ldi	r28, 0x0F	; 15
    1ee0:	d1 e0       	ldi	r29, 0x01	; 1
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	62 e0       	ldi	r22, 0x02	; 2
    1ee6:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <TypeIn>
	TypeOut(planet, 2);
    1eea:	ce 01       	movw	r24, r28
    1eec:	62 e0       	ldi	r22, 0x02	; 2
    1eee:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <TypeOut>
{
	if(flag_execute)
	{
		InfoRoutine();
	}		
	flag_execute = 1;
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	80 93 8a 02 	sts	0x028A, r24
}
    1ef8:	ff 91       	pop	r31
    1efa:	ef 91       	pop	r30
    1efc:	df 91       	pop	r29
    1efe:	cf 91       	pop	r28
    1f00:	bf 91       	pop	r27
    1f02:	af 91       	pop	r26
    1f04:	9f 91       	pop	r25
    1f06:	8f 91       	pop	r24
    1f08:	7f 91       	pop	r23
    1f0a:	6f 91       	pop	r22
    1f0c:	5f 91       	pop	r21
    1f0e:	4f 91       	pop	r20
    1f10:	3f 91       	pop	r19
    1f12:	2f 91       	pop	r18
    1f14:	0f 90       	pop	r0
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	0f 90       	pop	r0
    1f1a:	1f 90       	pop	r1
    1f1c:	18 95       	reti

00001f1e <main>:
}
/************************************************************************/
/* main function                                                        */
/************************************************************************/
int main(void)
{
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <main+0x6>
    1f24:	00 d0       	rcall	.+0      	; 0x1f26 <main+0x8>
    1f26:	0f 92       	push	r0
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
	_init();
    1f2c:	0e 94 5f 00 	call	0xbe	; 0xbe <_init>
/* Display data                                                         */
/************************************************************************/
static inline void Display(uint8_t *p)
{
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
    1f30:	99 24       	eor	r9, r9
/************************************************************************/
/* main function                                                        */
/************************************************************************/
int main(void)
{
	_init();
    1f32:	0f 2e       	mov	r0, r31
    1f34:	f5 ea       	ldi	r31, 0xA5	; 165
    1f36:	6f 2e       	mov	r6, r31
    1f38:	f1 e0       	ldi	r31, 0x01	; 1
    1f3a:	7f 2e       	mov	r7, r31
    1f3c:	f0 2d       	mov	r31, r0
/* Display data                                                         */
/************************************************************************/
static inline void Display(uint8_t *p)
{
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
    1f3e:	0f 2e       	mov	r0, r31
    1f40:	f2 e0       	ldi	r31, 0x02	; 2
    1f42:	2f 2e       	mov	r2, r31
    1f44:	f1 e0       	ldi	r31, 0x01	; 1
    1f46:	3f 2e       	mov	r3, r31
    1f48:	f0 2d       	mov	r31, r0
    1f4a:	82 2c       	mov	r8, r2
    1f4c:	39 82       	std	Y+1, r3	; 0x01
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f4e:	0f 2e       	mov	r0, r31
    1f50:	fe eb       	ldi	r31, 0xBE	; 190
    1f52:	cf 2e       	mov	r12, r31
    1f54:	f1 e0       	ldi	r31, 0x01	; 1
    1f56:	df 2e       	mov	r13, r31
    1f58:	f0 2d       	mov	r31, r0
    1f5a:	61 e0       	ldi	r22, 0x01	; 1
    1f5c:	70 e0       	ldi	r23, 0x00	; 0
    1f5e:	6a 83       	std	Y+2, r22	; 0x02
    1f60:	7b 83       	std	Y+3, r23	; 0x03
}

inline void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1f62:	00 ec       	ldi	r16, 0xC0	; 192
    1f64:	10 e0       	ldi	r17, 0x00	; 0
	/* Put data into buffer, sends the data */
	UDR0 = data;
    1f66:	0f 2e       	mov	r0, r31
    1f68:	f6 ec       	ldi	r31, 0xC6	; 198
    1f6a:	4f 2e       	mov	r4, r31
    1f6c:	55 24       	eor	r5, r5
    1f6e:	f0 2d       	mov	r31, r0
    1f70:	fa c0       	rjmp	.+500    	; 0x2166 <main+0x248>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1f72:	8d 31       	cpi	r24, 0x1D	; 29
    1f74:	c8 f4       	brcc	.+50     	; 0x1fa8 <main+0x8a>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	fc 01       	movw	r30, r24
    1f7a:	ee 0f       	add	r30, r30
    1f7c:	ff 1f       	adc	r31, r31
    1f7e:	ee 0f       	add	r30, r30
    1f80:	ff 1f       	adc	r31, r31
    1f82:	ee 0f       	add	r30, r30
    1f84:	ff 1f       	adc	r31, r31
    1f86:	e8 1b       	sub	r30, r24
    1f88:	f9 0b       	sbc	r31, r25
    1f8a:	ec 0d       	add	r30, r12
    1f8c:	fd 1d       	adc	r31, r13
    1f8e:	a2 81       	ldd	r26, Z+2	; 0x02
    1f90:	b3 81       	ldd	r27, Z+3	; 0x03
    1f92:	2c 91       	ld	r18, X
    1f94:	cb 01       	movw	r24, r22
    1f96:	06 80       	ldd	r0, Z+6	; 0x06
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <main+0x80>
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	0a 94       	dec	r0
    1fa0:	e2 f7       	brpl	.-8      	; 0x1f9a <main+0x7c>
    1fa2:	80 95       	com	r24
    1fa4:	82 23       	and	r24, r18
    1fa6:	8c 93       	st	X, r24
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1fa8:	da 01       	movw	r26, r20
    1faa:	8d 91       	ld	r24, X+
    1fac:	ad 01       	movw	r20, r26
    1fae:	88 23       	and	r24, r24
    1fb0:	01 f7       	brne	.-64     	; 0x1f72 <main+0x54>
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1fb2:	2b 9a       	sbi	0x05, 3	; 5
	//////////////////////////////////////////////////////////////////////////
}
/************************************************************************/
/* main function                                                        */
/************************************************************************/
int main(void)
    1fb4:	c3 01       	movw	r24, r6
    1fb6:	04 96       	adiw	r24, 0x04	; 4
    1fb8:	f3 01       	movw	r30, r6
	for(index=0; index<5; index++){
		pinsMultiWrite(plex_pins, LOW);
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
    1fba:	31 91       	ld	r19, Z+
}

inline void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1fbc:	d8 01       	movw	r26, r16
    1fbe:	2c 91       	ld	r18, X
    1fc0:	25 ff       	sbrs	r18, 5
    1fc2:	fc cf       	rjmp	.-8      	; 0x1fbc <main+0x9e>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    1fc4:	d2 01       	movw	r26, r4
    1fc6:	3c 93       	st	X, r19
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
		pinsMultiWrite(plex_pins, LOW);
		//////////////////////////////////////////////////////
		pinWrite(latch_pin, HIGH);
		for(byte=0; byte < 4; byte++)
    1fc8:	e8 17       	cp	r30, r24
    1fca:	f9 07       	cpc	r31, r25
    1fcc:	b1 f7       	brne	.-20     	; 0x1fba <main+0x9c>
    1fce:	aa 24       	eor	r10, r10
    1fd0:	bb 24       	eor	r11, r11
    1fd2:	68 94       	set
    1fd4:	a2 f8       	bld	r10, 2
    1fd6:	a6 0c       	add	r10, r6
    1fd8:	b7 1c       	adc	r11, r7
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1fda:	2b 98       	cbi	0x05, 3	; 5
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
    1fdc:	1c 99       	sbic	0x03, 4	; 3
    1fde:	fe cf       	rjmp	.-4      	; 0x1fdc <main+0xbe>
    1fe0:	87 e0       	ldi	r24, 0x07	; 7
    1fe2:	91 e0       	ldi	r25, 0x01	; 1
    1fe4:	40 e0       	ldi	r20, 0x00	; 0
    1fe6:	50 e0       	ldi	r21, 0x00	; 0
    1fe8:	9d 83       	std	Y+5, r25	; 0x05
    1fea:	8c 83       	std	Y+4, r24	; 0x04
		///////////////////////////////////////////////////////
		for(bit = 0; bit < 8 ; bit++)
			pinWrite(int_data_pins[bit], (*p & (1  << bit)));
    1fec:	ec 81       	ldd	r30, Y+4	; 0x04
    1fee:	fd 81       	ldd	r31, Y+5	; 0x05
    1ff0:	81 91       	ld	r24, Z+
    1ff2:	fd 83       	std	Y+5, r31	; 0x05
    1ff4:	ec 83       	std	Y+4, r30	; 0x04
    1ff6:	d5 01       	movw	r26, r10
    1ff8:	9c 91       	ld	r25, X
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1ffa:	8d 31       	cpi	r24, 0x1D	; 29
    1ffc:	e0 f5       	brcc	.+120    	; 0x2076 <main+0x158>
    1ffe:	fb 01       	movw	r30, r22
    2000:	04 2e       	mov	r0, r20
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <main+0xea>
    2004:	ee 0f       	add	r30, r30
    2006:	ff 1f       	adc	r31, r31
    2008:	0a 94       	dec	r0
    200a:	e2 f7       	brpl	.-8      	; 0x2004 <main+0xe6>
    200c:	9f 01       	movw	r18, r30
    200e:	29 23       	and	r18, r25
		if (value) {
    2010:	c9 f0       	breq	.+50     	; 0x2044 <main+0x126>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	fc 01       	movw	r30, r24
    2016:	ee 0f       	add	r30, r30
    2018:	ff 1f       	adc	r31, r31
    201a:	ee 0f       	add	r30, r30
    201c:	ff 1f       	adc	r31, r31
    201e:	ee 0f       	add	r30, r30
    2020:	ff 1f       	adc	r31, r31
    2022:	e8 1b       	sub	r30, r24
    2024:	f9 0b       	sbc	r31, r25
    2026:	ec 0d       	add	r30, r12
    2028:	fd 1d       	adc	r31, r13
    202a:	a2 81       	ldd	r26, Z+2	; 0x02
    202c:	b3 81       	ldd	r27, Z+3	; 0x03
    202e:	2c 91       	ld	r18, X
    2030:	cb 01       	movw	r24, r22
    2032:	06 80       	ldd	r0, Z+6	; 0x06
    2034:	02 c0       	rjmp	.+4      	; 0x203a <main+0x11c>
    2036:	88 0f       	add	r24, r24
    2038:	99 1f       	adc	r25, r25
    203a:	0a 94       	dec	r0
    203c:	e2 f7       	brpl	.-8      	; 0x2036 <main+0x118>
    203e:	82 2b       	or	r24, r18
    2040:	8c 93       	st	X, r24
    2042:	19 c0       	rjmp	.+50     	; 0x2076 <main+0x158>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	fc 01       	movw	r30, r24
    2048:	ee 0f       	add	r30, r30
    204a:	ff 1f       	adc	r31, r31
    204c:	ee 0f       	add	r30, r30
    204e:	ff 1f       	adc	r31, r31
    2050:	ee 0f       	add	r30, r30
    2052:	ff 1f       	adc	r31, r31
    2054:	e8 1b       	sub	r30, r24
    2056:	f9 0b       	sbc	r31, r25
    2058:	ec 0d       	add	r30, r12
    205a:	fd 1d       	adc	r31, r13
    205c:	a2 81       	ldd	r26, Z+2	; 0x02
    205e:	b3 81       	ldd	r27, Z+3	; 0x03
    2060:	2c 91       	ld	r18, X
    2062:	cb 01       	movw	r24, r22
    2064:	06 80       	ldd	r0, Z+6	; 0x06
    2066:	02 c0       	rjmp	.+4      	; 0x206c <main+0x14e>
    2068:	88 0f       	add	r24, r24
    206a:	99 1f       	adc	r25, r25
    206c:	0a 94       	dec	r0
    206e:	e2 f7       	brpl	.-8      	; 0x2068 <main+0x14a>
    2070:	80 95       	com	r24
    2072:	28 23       	and	r18, r24
    2074:	2c 93       	st	X, r18
    2076:	4f 5f       	subi	r20, 0xFF	; 255
    2078:	5f 4f       	sbci	r21, 0xFF	; 255
		for(byte=0; byte < 4; byte++)
			USART_Transmit((unsigned char)*p++);
		pinWrite(latch_pin, LOW);	
		while(pinRead(clock_pin));
		///////////////////////////////////////////////////////
		for(bit = 0; bit < 8 ; bit++)
    207a:	48 30       	cpi	r20, 0x08	; 8
    207c:	51 05       	cpc	r21, r1
    207e:	09 f0       	breq	.+2      	; 0x2082 <main+0x164>
    2080:	b5 cf       	rjmp	.-150    	; 0x1fec <main+0xce>
			pinWrite(int_data_pins[bit], (*p & (1  << bit)));
		p++;
    2082:	85 e0       	ldi	r24, 0x05	; 5
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	68 0e       	add	r6, r24
    2088:	79 1e       	adc	r7, r25
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
    208a:	f1 01       	movw	r30, r2
    208c:	e9 0d       	add	r30, r9
    208e:	f1 1d       	adc	r31, r1
    2090:	80 81       	ld	r24, Z
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2092:	8d 31       	cpi	r24, 0x1D	; 29
    2094:	c0 f4       	brcc	.+48     	; 0x20c6 <main+0x1a8>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	fc 01       	movw	r30, r24
    209a:	ee 0f       	add	r30, r30
    209c:	ff 1f       	adc	r31, r31
    209e:	ee 0f       	add	r30, r30
    20a0:	ff 1f       	adc	r31, r31
    20a2:	ee 0f       	add	r30, r30
    20a4:	ff 1f       	adc	r31, r31
    20a6:	e8 1b       	sub	r30, r24
    20a8:	f9 0b       	sbc	r31, r25
    20aa:	ec 0d       	add	r30, r12
    20ac:	fd 1d       	adc	r31, r13
    20ae:	a2 81       	ldd	r26, Z+2	; 0x02
    20b0:	b3 81       	ldd	r27, Z+3	; 0x03
    20b2:	2c 91       	ld	r18, X
    20b4:	cb 01       	movw	r24, r22
    20b6:	06 80       	ldd	r0, Z+6	; 0x06
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <main+0x1a0>
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	0a 94       	dec	r0
    20c0:	e2 f7       	brpl	.-8      	; 0x20ba <main+0x19c>
    20c2:	82 2b       	or	r24, r18
    20c4:	8c 93       	st	X, r24
    20c6:	af e1       	ldi	r26, 0x1F	; 31
    20c8:	be e4       	ldi	r27, 0x4E	; 78
    20ca:	11 97       	sbiw	r26, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <main+0x1ac>
    20ce:	00 c0       	rjmp	.+0      	; 0x20d0 <main+0x1b2>
    20d0:	00 00       	nop
    20d2:	d7 01       	movw	r26, r14
    20d4:	21 c0       	rjmp	.+66     	; 0x2118 <main+0x1fa>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    20d6:	8d 31       	cpi	r24, 0x1D	; 29
    20d8:	f8 f4       	brcc	.+62     	; 0x2118 <main+0x1fa>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	fc 01       	movw	r30, r24
    20de:	ee 0f       	add	r30, r30
    20e0:	ff 1f       	adc	r31, r31
    20e2:	ee 0f       	add	r30, r30
    20e4:	ff 1f       	adc	r31, r31
    20e6:	ee 0f       	add	r30, r30
    20e8:	ff 1f       	adc	r31, r31
    20ea:	e8 1b       	sub	r30, r24
    20ec:	f9 0b       	sbc	r31, r25
    20ee:	cf 01       	movw	r24, r30
    20f0:	8c 0d       	add	r24, r12
    20f2:	9d 1d       	adc	r25, r13
    20f4:	fc 01       	movw	r30, r24
    20f6:	42 81       	ldd	r20, Z+2	; 0x02
    20f8:	53 81       	ldd	r21, Z+3	; 0x03
    20fa:	fa 01       	movw	r30, r20
    20fc:	20 81       	ld	r18, Z
    20fe:	7b 01       	movw	r14, r22
    2100:	fc 01       	movw	r30, r24
    2102:	06 80       	ldd	r0, Z+6	; 0x06
    2104:	02 c0       	rjmp	.+4      	; 0x210a <main+0x1ec>
    2106:	ee 0c       	add	r14, r14
    2108:	ff 1c       	adc	r15, r15
    210a:	0a 94       	dec	r0
    210c:	e2 f7       	brpl	.-8      	; 0x2106 <main+0x1e8>
    210e:	c7 01       	movw	r24, r14
    2110:	80 95       	com	r24
    2112:	28 23       	and	r18, r24
    2114:	fa 01       	movw	r30, r20
    2116:	20 83       	st	Z, r18
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2118:	8d 91       	ld	r24, X+
    211a:	88 23       	and	r24, r24
    211c:	e1 f6       	brne	.-72     	; 0x20d6 <main+0x1b8>
    211e:	47 e0       	ldi	r20, 0x07	; 7
    2120:	51 e0       	ldi	r21, 0x01	; 1
    2122:	1b c0       	rjmp	.+54     	; 0x215a <main+0x23c>
* pin - physical pin number on the AVR.
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1);  sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2124:	8d 31       	cpi	r24, 0x1D	; 29
    2126:	c8 f4       	brcc	.+50     	; 0x215a <main+0x23c>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	fc 01       	movw	r30, r24
    212c:	ee 0f       	add	r30, r30
    212e:	ff 1f       	adc	r31, r31
    2130:	ee 0f       	add	r30, r30
    2132:	ff 1f       	adc	r31, r31
    2134:	ee 0f       	add	r30, r30
    2136:	ff 1f       	adc	r31, r31
    2138:	e8 1b       	sub	r30, r24
    213a:	f9 0b       	sbc	r31, r25
    213c:	ec 0d       	add	r30, r12
    213e:	fd 1d       	adc	r31, r13
    2140:	a2 81       	ldd	r26, Z+2	; 0x02
    2142:	b3 81       	ldd	r27, Z+3	; 0x03
    2144:	2c 91       	ld	r18, X
    2146:	cb 01       	movw	r24, r22
    2148:	06 80       	ldd	r0, Z+6	; 0x06
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <main+0x232>
    214c:	88 0f       	add	r24, r24
    214e:	99 1f       	adc	r25, r25
    2150:	0a 94       	dec	r0
    2152:	e2 f7       	brpl	.-8      	; 0x214c <main+0x22e>
    2154:	80 95       	com	r24
    2156:	28 23       	and	r18, r24
    2158:	2c 93       	st	X, r18
* mode - either HIGH/LOW, 1/0.
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    215a:	da 01       	movw	r26, r20
    215c:	8d 91       	ld	r24, X+
    215e:	ad 01       	movw	r20, r26
    2160:	88 23       	and	r24, r24
    2162:	01 f7       	brne	.-64     	; 0x2124 <main+0x206>
/* Display data                                                         */
/************************************************************************/
static inline void Display(uint8_t *p)
{
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
    2164:	93 94       	inc	r9
    2166:	b4 e0       	ldi	r27, 0x04	; 4
    2168:	b9 15       	cp	r27, r9
    216a:	20 f0       	brcs	.+8      	; 0x2174 <main+0x256>
    216c:	71 01       	movw	r14, r2
    216e:	48 2d       	mov	r20, r8
    2170:	59 81       	ldd	r21, Y+1	; 0x01
    2172:	1a cf       	rjmp	.-460    	; 0x1fa8 <main+0x8a>
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
		_delay_ms(5);
		Clear();
	}
	delayms = 1;
    2174:	ea 81       	ldd	r30, Y+2	; 0x02
    2176:	e0 93 00 01 	sts	0x0100, r30
    217a:	fb 81       	ldd	r31, Y+3	; 0x03
    217c:	f0 93 01 01 	sts	0x0101, r31
/* Display data                                                         */
/************************************************************************/
static inline void Display(uint8_t *p)
{
	uint8_t byte, bit, index = 0;
	for(index=0; index<5; index++){
    2180:	99 24       	eor	r9, r9
		///////////////////////////////////////////////////////											
		pinWrite(plex_pins[index], HIGH);
		_delay_ms(5);
		Clear();
	}
	delayms = 1;
    2182:	0f 2e       	mov	r0, r31
    2184:	f5 ea       	ldi	r31, 0xA5	; 165
    2186:	6f 2e       	mov	r6, r31
    2188:	f1 e0       	ldi	r31, 0x01	; 1
    218a:	7f 2e       	mov	r7, r31
    218c:	f0 2d       	mov	r31, r0
    218e:	eb cf       	rjmp	.-42     	; 0x2166 <main+0x248>

00002190 <_exit>:
    2190:	f8 94       	cli

00002192 <__stop_program>:
    2192:	ff cf       	rjmp	.-2      	; 0x2192 <__stop_program>
